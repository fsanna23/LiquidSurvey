[{"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\index.js":"1","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\App.js":"2","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\editorStyles.js":"3","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\SelectedSurveyContext.js":"4","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\pages.js":"5","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NavBar.js":"6","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\MainPage.js":"7","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewSurvey.js":"8","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\View.js":"9","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\tmpSurveys.js":"10","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\viewStyles.js":"11","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\JsonLoader.js":"12","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewImage.js":"13","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewQuestion.js":"14","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\ImageInputBtn.js":"15","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\contentTypes.js":"16","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\PlaceholdersContext.js":"17","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewTextField.js":"18","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewRandomNumber.js":"19","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\surveys\\Survey.js":"20","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\MultipleChoiceQuestion.js":"21","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomGallery.js":"22","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\LinearScaleQuestion.js":"23","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\questionTypes.js":"24"},{"size":219,"mtime":1607978320816,"results":"25","hashOfConfig":"26"},{"size":4310,"mtime":1614809819872,"results":"27","hashOfConfig":"26"},{"size":8766,"mtime":1614201607977,"results":"28","hashOfConfig":"26"},{"size":124,"mtime":1613942040234,"results":"29","hashOfConfig":"26"},{"size":112,"mtime":1613940983435,"results":"30","hashOfConfig":"26"},{"size":865,"mtime":1613931944020,"results":"31","hashOfConfig":"26"},{"size":3414,"mtime":1614809866102,"results":"32","hashOfConfig":"26"},{"size":25002,"mtime":1614806816993,"results":"33","hashOfConfig":"26"},{"size":438,"mtime":1614002045119,"results":"34","hashOfConfig":"26"},{"size":4677,"mtime":1614799358541,"results":"35","hashOfConfig":"26"},{"size":2188,"mtime":1614002045122,"results":"36","hashOfConfig":"26"},{"size":20398,"mtime":1614799358540,"results":"37","hashOfConfig":"26"},{"size":7413,"mtime":1614806883523,"results":"38","hashOfConfig":"26"},{"size":11800,"mtime":1614805636747,"results":"39","hashOfConfig":"26"},{"size":1506,"mtime":1613931943980,"results":"40","hashOfConfig":"26"},{"size":166,"mtime":1614337354805,"results":"41","hashOfConfig":"26"},{"size":120,"mtime":1614188778342,"results":"42","hashOfConfig":"26"},{"size":3134,"mtime":1613931943960,"results":"43","hashOfConfig":"26"},{"size":3718,"mtime":1614805643345,"results":"44","hashOfConfig":"26"},{"size":8541,"mtime":1613668841825,"results":"45","hashOfConfig":"26"},{"size":1741,"mtime":1613931944011,"results":"46","hashOfConfig":"26"},{"size":3218,"mtime":1614365246930,"results":"47","hashOfConfig":"26"},{"size":2778,"mtime":1614001911697,"results":"48","hashOfConfig":"26"},{"size":228,"mtime":1613469144962,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"svet3z",{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\index.js",[],["105","106"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\App.js",["107","108","109"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\editorStyles.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\SelectedSurveyContext.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\pages.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NavBar.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\MainPage.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewSurvey.js",["110","111","112","113","114","115","116","117","118"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\View.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\tmpSurveys.js",["119","120"],"import {\r\n  ShortAnswer,\r\n  Paragraph,\r\n  MultipleChoice,\r\n  CheckBox,\r\n  Survey,\r\n  SurveyPage,\r\n} from \"./surveys/Survey\";\r\n\r\nlet firstQuestion = new ShortAnswer(\"My Title\", true);\r\nlet secondQuestion = new Paragraph(\"My Paragraph Title\", true);\r\nlet thirdQuestion = new MultipleChoice(\"My MultipleChoice Title\", true, [\r\n  \"firstMCChoice\",\r\n  \"secondMCChoice\",\r\n  \"thirdMCCChoice\",\r\n]);\r\nlet fourthQuestion = new CheckBox(\"My Checkbox Title\", true, [\r\n  \"firstCBChoice\",\r\n  \"secondCBChoice\",\r\n  \"thirdCBChoice\",\r\n  \"fourthCBChoice\",\r\n]);\r\n\r\nlet firstPage = new SurveyPage([\r\n  firstQuestion,\r\n  secondQuestion,\r\n  thirdQuestion,\r\n  fourthQuestion,\r\n]);\r\nlet secondPage = new SurveyPage([firstQuestion]);\r\n\r\nlet otherSurvey = new Survey(\"Prova1\", \"Desc1\", [firstPage]);\r\nlet mySurvey = {\r\n  title: \"Random01\",\r\n  description: \"RandomDesc\",\r\n  pages: [\r\n    {\r\n        \"pageId\" : \"1\",\r\n        \"contents\": [\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Multiple Choice\",\r\n              \"title\": \"The AI must decide: Is 40% or more of the nutrients on then plate fat?\",\r\n              \"description\": \"What will the AI decide?\",\r\n              \"choices\": [\r\n                {\r\n                  \"id\" : \"1\",\r\n                  \"value\": \"No, 30% of the nutrients on this plate is not fat.\"\r\n                },\r\n                {\r\n                  \"id\" : \"2\",\r\n                  \"value\": \"Yes, 30% of the nutrients on this plate is not fat.\"\r\n                }\r\n              ],\r\n              \"images\": [\"image01.png\", \"image02.png\"]\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Short Text\",\r\n              \"title\": \"The AI generated its prediction giving this motivation: it is represented as two curved lines\",\r\n              \"description\": \"What is your decision?\"\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Ranking\",\r\n              \"title\": \"Employee Performance review\",\r\n              \"description\": \"Rank these elements sorting them by importance to you\",\r\n              \"choices\": [\r\n                {\r\n                  \"id\": \"1\",\r\n                  \"value\": \"Job Knowledge\"\r\n                },\r\n                {\r\n                  \"id\": \"2\",\r\n                  \"value\": \"Work Quality\"\r\n                },\r\n                {\r\n                  \"id\": \"3\",\r\n                  \"value\": \"Attendance/punctuality\"\r\n                },\r\n                {\r\n                  \"id\": \"4\",\r\n                  \"value\": \"Productivity\"\r\n                },\r\n                {\r\n                  \"id\": \"5\",\r\n                  \"value\": \"Communication Skills\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        pageId: 2,\r\n        contents: [\r\n          {\r\n            contentId: 1,\r\n            type: \"Image\",\r\n            data: {\r\n              title: \"ImagetitleProva\",\r\n              randomName: \"Pippo\",\r\n              randomStatus: true,\r\n            },\r\n          },\r\n          {\r\n            contentId: 2,\r\n            type: \"Random Number\",\r\n            data: { name: \"Pippo\", minRange: 0, maxRange: 100 },\r\n          },\r\n          {\r\n            contentId: 3,\r\n            type: \"Random Number\",\r\n            data: { name: \"Gatto\", minRange: 0, maxRange: 100 },\r\n          },        \r\n        ],\r\n      },\r\n    {\r\n      pageId: 3,\r\n      contents: [\r\n        \r\n        {\r\n          contentId: 1,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Cane\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n        {\r\n          contentId: 2,\r\n          type: \"Random Number\",\r\n          data: { name: \"Cane\", minRange: 0, maxRange: 100 },\r\n        }, \r\n        {\r\n          contentId: 3,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Gatto\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nlet mySimpleSurvey = {\r\n  title: \"Random01\",\r\n  description: \"RandomDesc\",\r\n  pages: [\r\n    {\r\n      pageId: 1,\r\n      contents: [\r\n        {\r\n          contentId: 1,\r\n          type: \"Random Number\",\r\n          data: { name: \"Pippo\", minRange: 0, maxRange: 100 },\r\n        },\r\n        {\r\n          contentId: 2,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Pippo\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport { mySimpleSurvey, mySurvey };\r\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\viewStyles.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\JsonLoader.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Menu,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport SelectedSurveyContext from \"../../SelectedSurveyContext\";\r\n\r\n\r\nconst useStyles = questionStyle;\r\n\r\n//Componente che si occupa di prelevare i dati dal Json importato, per ogni tipo di domanda prende le informazioni presenti\r\n//e le formatta in modo che siano pronte alla visualizzazione (che avverrà passando il componente a View)\r\n\r\nfunction JsonLoader(props) {\r\n\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  let imageElement = [];\r\n  let randomElement = [];\r\n  const [vPages, setVPages] = useState([0]);\r\n\r\n  console.log(\"visitedPages Inizio: \", vPages)\r\n  /*[ES6] action è il parametro passato (indica se l'utente vuole andare alla prossima pagina (1) o quella precedente (0)), \r\n\t'e' è l'event object ritornato*/\r\n  const handlePaging = (action) => (e) => {\r\n    let visitedPages = [...vPages]\r\n    if (action) {\r\n      \r\n      setCurrentPage(currentPage + 1);\r\n      \r\n      if(visitedPages == undefined){\r\n        visitedPages.push(currentPage)\r\n      }\r\n      else if(!visitedPages.includes(currentPage)){\r\n        visitedPages.push(currentPage)\r\n      }\r\n    }\r\n    else {\r\n\r\n      setCurrentPage(currentPage - 1);\r\n      \r\n      if(visitedPages == undefined){\r\n        visitedPages.push(currentPage)\r\n      }\r\n      else if(!visitedPages.includes(currentPage)){\r\n        visitedPages.push(currentPage)\r\n      }\r\n    }\r\n    setVPages(visitedPages)\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const jsonData = useContext(SelectedSurveyContext);\r\n\r\n  const [linearScaleSelectedValue, setLinearScaleSelectedValue] = useState(\"\");\r\n  const handleLinearScaleChange = (e) => {\r\n    setLinearScaleSelectedValue(e.target.value);\r\n  };\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const [value, setValue] = React.useState(\"\");\r\n\r\n  /*BUG: se in due domande diversele possibili risposte\r\n\tdei radio button sono uguali, allora quando si sceglie la risposta in una domanda, verrà in automatico\r\n\tselezionata anche nell'altra.*/\r\n  const renderRadioButtonQuestion = (question) => {\r\n    return (\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {question.data.title}\r\n            </Box>\r\n\r\n            <Grid className={classes.grid} container spacing={3}>\r\n              <Grid item>\r\n                {/*Se l'array non è vuoto, allora lo scorre*/}\r\n                {question.data.images && question.data.images.map((img) => (\r\n                  <Paper\r\n                    variant=\"outlined\"\r\n                    className={classes.imagePaperContainer}\r\n                  >\r\n                    {/*loadImage(img)*/}\r\n                  </Paper>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {question.data.description}\r\n            </Box>\r\n\r\n            <RadioGroup name=\"RadioGroup\">\r\n              {question.data.choices.map((s) => (\r\n                <Box align=\"left\" className={classes.choicesContainer}>\r\n                  <FormControlLabel\r\n                    value={s.value}\r\n                    control={<Radio color=\"primary\" />}\r\n                    label={s.value}\r\n                  />\r\n                </Box>\r\n              ))}\r\n            </RadioGroup>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const renderTextFieldQuestion = (question) => {\r\n    return (\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {question.data.title}\r\n            </Box>\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {question.data.description}\r\n            </Box>\r\n\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                className={classes.textField}\r\n                id=\"standard-textarea\"\r\n                label=\"Type here your answer\"\r\n                Placeholder=\"Placeholder\"\r\n                multiline\r\n                rowsMax={3}\r\n              />\r\n            </form>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const renderRankingQuestion = (question) => {\r\n    return (\r\n      <Typography component={\"span\"}>\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <div>\r\n              <Box align=\"left\" className={classes.titleContainer}>\r\n                {question.data.title}\r\n              </Box>\r\n\r\n              <Box align=\"left\" className={classes.elementContainer}>\r\n                {question.data.description}\r\n              </Box>\r\n\r\n              <DragDropContext\r\n                onDragEnd={(param) => {\r\n                  //Indici dei due elementi da scambiare\r\n                  const srcIndex = param.source.index;\r\n                  const destIndex = param.destination?.index;\r\n\r\n                  const newList = question.data.choices; //Copia dell'array di scelte da ordinare\r\n                  const [reorderList] = question.data.choices.splice(\r\n                    srcIndex,\r\n                    1\r\n                  ); //si rimuove l'indice sorgente dal nuovo array\r\n                  newList.splice(destIndex, 0, reorderList); //si riaggiunge l'indice nell'array nella nuova posizione\r\n                }}\r\n              >\r\n                <Droppable droppableId=\"1\">\r\n                  {(provided, _) => (\r\n                    <div\r\n                      className={classes.rankingContainer}\r\n                      ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                    >\r\n                      {question.data.choices.map((item, i) => (\r\n                        <Draggable\r\n                          key={item.id}\r\n                          index={i}\r\n                          draggableId={\"draggable-\" + item.id}\r\n                        >\r\n                          {(provided, snapshot) => (\r\n                            <Card\r\n                              className={classes.dragndropItem}\r\n                              ref={provided.innerRef}\r\n                              {...provided.dragHandleProps}\r\n                              {...provided.draggableProps}\r\n                            >\r\n                              <CardContent>\r\n                                <DragHandleIcon\r\n                                  className={classes.dragHandleIcon}\r\n                                />\r\n                                <div className={classes.rankingCardContent}>\r\n                                  {item.value}\r\n                                </div>\r\n                              </CardContent>\r\n                            </Card>\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </DragDropContext>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const renderLinearScaleQuestion = (question) => {\r\n    return (\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {question.data.title}\r\n            </Box>\r\n\r\n            <Box\r\n              align=\"left\"\r\n              fontWeight=\"fontWeightBold\"\r\n              className={classes.elementContainer}\r\n            >\r\n              {question.data.description}\r\n            </Box>\r\n            <Box display=\"flex\" flexdirection=\"row\">\r\n              <Box className={classes.labelContainer}>\r\n                {question.data.minValueLabel}\r\n              </Box>\r\n\r\n              <FormControl component=\"fieldset\">\r\n                <RadioGroup\r\n                  row\r\n                  aria-label=\"gender\"\r\n                  name=\"LinearScale\"\r\n                  value={linearScaleSelectedValue}\r\n                  onChange={handleLinearScaleChange}\r\n                >\r\n                    {console.log(question)}\r\n                  {\r\n                    //Number converte una stringa in un numero\r\n\r\n                    [\r\n                      ...Array(Number(question.data.maxValue) + 1 - Number(question.data.minValue)\r\n                      ),\r\n                    ].map((s, i) => (\r\n                      <FormControlLabel\r\n                        value={Number(question.data.minValue) + i}\r\n                        control={\r\n                          <Radio\r\n                            checked={\r\n                              linearScaleSelectedValue ==\r\n                              Number(question.data.minValue) + i\r\n                            }\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label={Number(question.data.minValue) + i}\r\n                        labelPlacement=\"top\"\r\n                      />\r\n                    ))\r\n                  }\r\n                </RadioGroup>\r\n              </FormControl>\r\n              <Box className={classes.labelContainer}>\r\n                {question.data.maxValueLabel}\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const renderHeader = (item) => {\r\n    return (\r\n\r\n      <Typography component=\"div\" color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.questionnaireTitleContainer}>\r\n              {item.title}\r\n            </Box>\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {item.description}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const contentSorter = (item) => {\r\n\r\n    switch (item.data.type) {\r\n      case \"Multiple Choice\":\r\n        return renderRadioButtonQuestion(item);\r\n      case \"Short Text\":\r\n        return renderTextFieldQuestion(item);\r\n      case \"Linear Scale\":\r\n        return renderLinearScaleQuestion(item);\r\n      case \"Ranking\":\r\n        return renderRankingQuestion(item);\r\n    }\r\n    switch(item.type){\r\n\r\n      case \"Random Number\":\r\n      //Vengono inseriti nell'array randomElement tutti gli elementi di tipo Random Number\r\n      if(!randomElement.includes(item.data)){\r\n\r\n          randomElement.push(item.data)\r\n        }\r\n      break;\r\n\r\n      case \"Image\":\r\n        //Vengono inseriti nell'array randomElement tutti gli elementi di tipo Image\r\n        if(!imageElement.includes(item.data)){\r\n\r\n          imageElement.push(item.data)\r\n        }\r\n    }\r\n  };\r\n  const questionImagesNames = [];\r\n  const [imagesNames, setImagesNames] = useState([]);\r\n  var minValue = 0;\r\n  const nameNumberAssociation = [];\r\n  const images = [];\r\n  const [toPrint, setToPrint] = useState([]);\r\n  var name = null;\r\n  var assValue = null;\r\n  let obj = [];\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    if(!vPages.includes(currentPage)){\r\n    let printP = [...toPrint];\r\n    let promises = nameNumberAssociation.map((s, i) => {\r\n          return new Promise((resolve) => {\r\n          let imgPath = new URL(\"http://localhost:9000/getImage\")\r\n          imgPath.search = new URLSearchParams({imageName: s.value, folder: \"question\"})\r\n          fetch(imgPath)\r\n          .then((response) => response.blob())\r\n          .then((data) => {\r\n            resolve({img: URL.createObjectURL(data),name: s.name});\r\n          });\r\n        });\r\n        });\r\n\r\n        Promise.all(promises)\r\n        .then((results) => {\r\n          printP.push(...results)\r\n          setToPrint(printP)\r\n        })\r\n    }\r\n  }, [currentPage])\r\n\r\n  const renderImage = () => {\r\n\r\n    let printP = [];\r\n\r\n    //se esistono Elementi di tipo immagine allora esegue tutto il resto (c'è la stessa condizione a riga 496)\r\n    if(imageElement && imageElement.length > 0){\r\n    //se l'array imagesNames è vuoto allora prende dal server i nomi delle immagini (sia question che explaination)\r\n    //e le mette dentro imagesNames\r\n    if(imagesNames.length == 0){\r\n\r\n      fetch('http://localhost:9000/getImageList')\r\n      .then(response => response.json())\r\n      .then(data => {setImagesNames(data)})\r\n    }\r\n    //Se esistono le immagini di tipo Question Images allora mette dentro un array tutti i nomi\r\n    if(imagesNames['Question Images'] && imagesNames['Question Images'].length > 0){\r\n      \r\n      //data contiene i nomi delle immagini 'question' e 'explaination', quindi prendo solo le 'question'      \r\n      imagesNames['Question Images'].map((name) =>{\r\n\r\n        if(!questionImagesNames.includes(name)){\r\n          questionImagesNames.push(name);\r\n        }\r\n      })\r\n\r\n      //scorre l'array popolato nel case a riga 345 dello switch e per ogni elemento prende un nome di un'immagine casualmente\r\n      //dall'array che contiene i nomi delle sole immagini di tipo Question Images. infine associa il nome dell'elemento casuale\r\n      //ad un immagine casuale (nameNumberAssociation avrà tutte le associazioni nome numero casuale)\r\n      \r\n\r\n      randomElement.map((s, i) => {\r\n        if(nameNumberAssociation[i] === undefined){\r\n      //Generazione di un numero casuale da associare al randomName\r\n          var rand = Math.floor(minValue + Math.random() * (questionImagesNames.length - minValue));\r\n      \r\n      //Array di oggetti. in ogni oggetto c'è l'associazione (randomName, immagineCasuale)\r\n          nameNumberAssociation.push({name: `${s.name}`, value: `${questionImagesNames[rand]}`});\r\n        }else if(nameNumberAssociation[i].name !== s.name){\r\n\r\n          var rand = Math.floor(minValue + Math.random() * (questionImagesNames.length - minValue));\r\n          nameNumberAssociation.push({name: `${s.name}`, value: `${questionImagesNames[rand]}`});\r\n        }\r\n      })\r\n      \r\n      //QUESTA PARTE L'ABBIAMO VISTA ASSIEME\r\n      //Recupero delle immagini dal server\r\n      \r\n      if(toPrint.length == 0){\r\n        let promises = nameNumberAssociation.map((s) => {\r\n          return new Promise((resolve) => {\r\n          let imgPath = new URL(\"http://localhost:9000/getImage\")\r\n          imgPath.search = new URLSearchParams({imageName: s.value, folder: \"question\"})\r\n          fetch(imgPath)\r\n          .then((response) => response.blob())\r\n          .then((data) => {\r\n            resolve({img: URL.createObjectURL(data),name: s.name});\r\n          });\r\n        });\r\n        });\r\n\r\n        Promise.all(promises)\r\n        .then((results) => {\r\n          printP.push(...results)\r\n          setToPrint(printP)\r\n        })\r\n        \r\n\r\n      }else{\r\n\r\n        console.log(\"toPrint: \", toPrint)\r\n        //console.log(\"To Print: \", toPrint)\r\n        return imagesPrinter();\r\n      }\r\n      \r\n      \r\n    }\r\n  }\r\n  }\r\n\r\n  const imagesPrinter = () => {\r\n    return(\r\n      <div>\r\n      {/*\r\n      ToPrint -> ha le associazioni tra nome del randomNumber e immagine da stampare\r\n      scorre toPrint e per ogni nome di ogni elemento, controlla se esiste un elemento di tipo Image che ha\r\n      lo stesso nome, in caso positivo stampa l'immagine associata allo stesso nome che sta dentro toPrint*/}\r\n      {console.log(\"toPrint: \", toPrint)}\r\n      {toPrint.map((tp, i) => (\r\n        imageElement.map((ie) => (\r\n        ie && ie.randomName === tp.name ?\r\n        <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {ie.title}\r\n            </Box>\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {ie.description}\r\n            </Box>\r\n            <div className={classes.singleImageContainer}>\r\n\r\n                <img src={tp.img} width=\"200px\" height=\"200px\" /> \r\n               \r\n                {ie.randomName}\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n\r\n        : \"\"\r\n      ))\r\n      ))}\r\n      </div>\r\n    \r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n    {/*Mappa il file .json*/}\r\n      {jsonData.map((item) => (\r\n        <div>\r\n          {/*Renders the questionnaire's header*/}\r\n          {renderHeader(item)}\r\n          {/*Mappa tutti i contenuti (contents nel json) della pagina corrente e per ogni contenuto chiama il contentSorter\r\n          e lo renderizza*/}\r\n          {item.pages[currentPage].contents.map((s) => {\r\n            return <div>{contentSorter(s)}</div>;\r\n            \r\n            //if(imageElement && imageElement.length > 0){\r\n            //}\r\n          })}\r\n          {/*se l'array che contiene elementi immagine casuale chiama il renderImage(). per ogni pagina richiama il renderImage\r\n          se le condizioni sono vere*/}\r\n          {imageElement && imageElement.length > 0 ?\r\n              renderImage()\r\n            : \"\"\r\n          }\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            className={classes.pagesSwitchButtonContainer}\r\n          >\r\n            {/*If currentPage is > 0 it shows the \"Back\" button in order to scroll back one page*/}\r\n            {currentPage > 0 ? (\r\n              <Button\r\n                className={classes.pagesSwitchButton}\r\n                variant=\"contained\"\r\n                onClick={handlePaging(0)}\r\n                color=\"primary\"\r\n              >\r\n                Back\r\n              </Button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {/*If currentPage is equal to the last element of the 'pages' array it shows the 'Save' button that will save the survey,\r\n          if not, it will shows the 'Next' button until there is a next page (the array index starts from 0)*/}\r\n            {currentPage === item.pages.length - 1 ? (\r\n              <Button\r\n                className={classes.pagesSwitchButton}\r\n                variant=\"contained\"\r\n                /*GESTIRE ONCLICK*/ color=\"primary\"\r\n              >\r\n                Save\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                className={classes.pagesSwitchButton}\r\n                variant=\"contained\"\r\n                onClick={handlePaging(1)}\r\n                color=\"primary\"\r\n              >\r\n                Next\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </div>\r\n      ))}\r\n      \r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default JsonLoader;\r\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewImage.js",["155","156","157","158","159","160","161","162","163","164","165","166"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewQuestion.js",["167","168","169","170"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\ImageInputBtn.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\contentTypes.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\PlaceholdersContext.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewTextField.js",["171","172","173","174","175","176","177"],"import React, { Fragment, useState } from \"react\";\n// Material\nimport {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  IconButton,\n  Input,\n  Divider,\n  Tooltip,\n  FormControlLabel,\n  Switch,\n} from \"@material-ui/core\";\n// Draggable\nimport { Draggable } from \"react-beautiful-dnd\";\n// Icons\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n// Style\nimport { newTextFieldStyle } from \"../../editorStyles\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport ShortTextIcon from \"@material-ui/icons/ShortText\";\nimport ImageInputBtn from \"./ImageInputBtn\";\nconst useStyles = newTextFieldStyle;\n\nfunction NewTextField(props) {\n  const classes = useStyles();\n\n  const [state, setState] = useState({\n    title: \"\",\n    description: \"\",\n  });\n\n  const onRemoveContent = () => {\n    props.removeTextField(props.index);\n  };\n\n  const onChangeTitle = (e) => {\n    setState({ ...state, title: e.target.value });\n    props.update({ title: e.target.value });\n  };\n\n  const onChangeDescription = (e) => {\n    setState({ ...state, description: e.target.value });\n    props.update({ description: e.target.value });\n  };\n\n  return (\n    <Box width={800} className={classes.boxCardRoot}>\n      <Card className={classes.cardRoot} variant=\"outlined\">\n        <CardContent className={classes.cardContent}>\n          <Input\n            placeholder=\"Title\"\n            inputProps={{ \"aria-label\": \"title\" }}\n            className={classes.textTitle}\n            value={state.title}\n            onChange={onChangeTitle}\n          />\n          <Input\n            placeholder=\"Description\"\n            inputProps={{ \"aria-label\": \"description\" }}\n            className={classes.textDescription}\n            value={state.description}\n            onChange={onChangeDescription}\n          />\n        </CardContent>\n        <Divider variant=\"middle\" />\n        <CardActions className={classes.cardActions}>\n          <div\n            id={\"left-side-actions\" + props.index}\n            className={classes.cardActionsLeft}\n          >\n            <Tooltip title=\"Move up\" placement=\"bottom\">\n              <IconButton\n                onClick={() => {\n                  props.move.up();\n                }}\n              >\n                <ArrowUpward />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Move down\" placement=\"bottom\">\n              <IconButton\n                onClick={() => {\n                  props.move.down();\n                }}\n              >\n                <ArrowDownward />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <div className={classes.cardActionsRight}>\n            <Tooltip title=\"Delete question\" placement=\"bottom\">\n              <IconButton\n                onClick={() => {\n                  onRemoveContent();\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n}\n\nexport default NewTextField;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewRandomNumber.js",["178","179"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\surveys\\Survey.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\MultipleChoiceQuestion.js",["180"],"import React, { useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { multipleChoiceQuestionStyle } from \"../../editorStyles\";\nconst useStyles = multipleChoiceQuestionStyle;\n\nfunction MultipleChoiceQuestion(props) {\n  const classes = useStyles();\n  let choices = [...props.choices];\n\n  const onChangeValue = (e, index) => {\n    choices[index].value = e.target.value;\n    props.update(choices);\n  };\n\n  const onRemoveOption = (index) => {\n    choices = choices.filter((el, ix) => ix !== index);\n    props.update(choices);\n  };\n\n  const onAddOption = () => {\n    choices = [...choices, { id: choices.length + 1, value: \"\" }];\n    props.update(choices);\n  };\n\n  const renderOptions = () => {\n    return props.choices.map((choice, index) => {\n      return (\n        <div key={\"choice-\" + choice.id}>\n          <TextField\n            label={\"Option \" + (index + 1)}\n            value={choice.value}\n            className={classes.textField}\n            onChange={(e) => {\n              onChangeValue(e, index);\n            }}\n          />\n          {index !== 0 && index !== 1 ? (\n            <Button\n              color=\"#FF0000\"\n              className={classes.removeOptionBtn}\n              onClick={() => {\n                onRemoveOption(index);\n              }}\n            >\n              Remove option\n            </Button>\n          ) : null}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={classes.fieldContainer}>\n      {renderOptions()}\n      <Button\n        color=\"primary\"\n        className={classes.addOptionBtn}\n        onClick={() => {\n          onAddOption();\n        }}\n      >\n        Add option\n      </Button>\n    </div>\n  );\n}\n\nexport default MultipleChoiceQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomGallery.js",["181","182"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport content_type from \"../../contentTypes\";\n\nfunction RandomGallery(props) {\n  const [content, setContent] = useState(undefined);\n  const [contentIndex, setContentIndex] = useState(0);\n  const [contentList, setContentList] = useState([]);\n  const randomType = props.randomType;\n\n  useEffect(() => {\n    if (content === undefined) {\n      getFirstContent();\n    }\n  }, []);\n\n  const getFirstContent = () => {\n    // TODO generalize for any type of content\n    let imageList;\n    fetch(\"http://localhost:9000/getImageList\")\n      .then((response) => response.json())\n      .then((data) => {\n        setContentList(data);\n        imageList = data;\n      })\n      .then(() => {\n        let url = new URL(\"http://localhost:9000/getImage\");\n        url.search = new URLSearchParams({\n          imageName: imageList[\"Question Images\"][0],\n          folder: \"question\",\n        });\n        fetch(url)\n          .then((response) => response.blob())\n          .then((data) => setContent(data));\n      });\n  };\n\n  const getPreviousContent = () => {\n    let newIndex;\n    if (contentIndex !== 0) {\n      console.log(\"Content index is not zero\");\n      newIndex = contentIndex - 1;\n      setContentIndex(contentIndex - 1);\n    } else {\n      console.log(\"Content index is zero\");\n      newIndex = contentList[\"Question Images\"].length - 1;\n      setContentIndex(contentList[\"Question Images\"].length - 1);\n    }\n    console.log(\"The new index is\", newIndex);\n    console.log(\"The list is: \", contentList);\n    console.log(\n      \"The value at the list is :\",\n      contentList[\"Question Images\"][newIndex]\n    );\n    let url = new URL(\"http://localhost:9000/getImage\");\n    url.search = new URLSearchParams({\n      imageName: contentList[\"Question Images\"][newIndex],\n      folder: \"question\",\n    });\n    fetch(url)\n      .then((response) => response.blob())\n      .then((data) => setContent(data));\n  };\n\n  const getNextContent = () => {\n    let newIndex;\n    if (contentIndex !== contentList[\"Question Images\"].length - 1) {\n      newIndex = contentIndex + 1;\n      setContentIndex(contentIndex + 1);\n    } else {\n      newIndex = 0;\n      setContentIndex(0);\n    }\n    let url = new URL(\"http://localhost:9000/getImage\");\n    url.search = new URLSearchParams({\n      imageName: contentList[\"Question Images\"][newIndex],\n      folder: \"question\",\n    });\n    fetch(url)\n      .then((response) => response.blob())\n      .then((data) => setContent(data));\n  };\n\n  const renderRandomComponent = () => {\n    switch (randomType) {\n      case content_type.IMAGE: {\n        return content !== undefined ? (\n          <img src={URL.createObjectURL(content)} alt=\"Random image\" />\n        ) : (\n          <Fragment />\n        );\n      }\n      default: {\n        return <Fragment />;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Typography variant=\"body1\">Overview of your random component</Typography>\n      {renderRandomComponent()}\n      <Button onClick={getPreviousContent}>Previous Content</Button>\n      <Button onClick={getNextContent}>Next Content</Button>\n    </div>\n  );\n}\n\nexport default RandomGallery;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\LinearScaleQuestion.js",["183"],"import React, { useEffect } from \"react\";\nimport { linearScaleQuestionStyle } from \"../../editorStyles\";\nimport {\n  Typography,\n  FormControl,\n  Select,\n  MenuItem,\n  Box,\n  TextField,\n} from \"@material-ui/core\";\nconst useStyles = linearScaleQuestionStyle;\n\nfunction LinearScaleQuestion(props) {\n  const classes = useStyles();\n  let minValue = props.minValue;\n  let maxValue = props.maxValue;\n  let minValueLabel = props.minValueLabel;\n  let maxValueLabel = props.maxValueLabel;\n\n  useEffect(() => {\n    props.updateAll({ minValue, maxValue, minValueLabel, maxValueLabel });\n  }, []);\n\n  const onChangeMinValue = (e) => {\n    props.updateMinValue(e.target.value);\n  };\n\n  const onChangeMaxValue = (e) => {\n    props.updateMaxValue(e.target.value);\n  };\n\n  const onChangeMinValueLabel = (e) => {\n    props.updateMinValueLabel(e.target.value);\n  };\n\n  const onChangeMaxValueLabel = (e) => {\n    props.updateMaxValueLabel(e.target.value);\n  };\n\n  return (\n    <div className={classes.fieldContainer}>\n      <Box component=\"div\" className={classes.rangeSelectContainer}>\n        <Typography variant=\"body1\" className={classes.rangeSelectItem}>\n          Da{\" \"}\n        </Typography>\n        <FormControl className={classes.rangeSelectItem}>\n          <Select value={minValue} onChange={onChangeMinValue}>\n            <MenuItem value={0}>0</MenuItem>\n            <MenuItem value={1}>1</MenuItem>\n          </Select>\n        </FormControl>\n        <Typography variant=\"body1\" className={classes.rangeSelectItem}>\n          {\" \"}\n          a{\" \"}\n        </Typography>\n        <FormControl className={classes.rangeSelectItem}>\n          <Select value={maxValue} onChange={onChangeMaxValue}>\n            <MenuItem value={2}>2</MenuItem>\n            <MenuItem value={3}>3</MenuItem>\n            <MenuItem value={4}>4</MenuItem>\n            <MenuItem value={5}>5</MenuItem>\n            <MenuItem value={6}>6</MenuItem>\n            <MenuItem value={7}>7</MenuItem>\n            <MenuItem value={8}>8</MenuItem>\n            <MenuItem value={9}>9</MenuItem>\n            <MenuItem value={10}>10</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n      <Box component=\"div\">\n        <FormControl className={classes.labelChangeContainer}>\n          <TextField\n            label={\"Minimum value label\"}\n            value={minValueLabel}\n            className={classes.textField && classes.labelChangeItem}\n            onChange={onChangeMinValueLabel}\n          />\n          <TextField\n            label={\"Maximum value label\"}\n            value={maxValueLabel}\n            className={classes.textField && classes.labelChangeItem}\n            onChange={onChangeMaxValueLabel}\n          />\n        </FormControl>\n      </Box>\n    </div>\n  );\n}\n\nexport default LinearScaleQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\questionTypes.js",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":18,"column":7,"nodeType":"190","messageId":"191","endLine":18,"endColumn":14},{"ruleId":"192","severity":1,"message":"193","line":75,"column":5,"nodeType":"194","messageId":"195","endLine":99,"endColumn":6},{"ruleId":"192","severity":1,"message":"193","line":104,"column":7,"nodeType":"194","messageId":"195","endLine":109,"endColumn":8},{"ruleId":"188","severity":1,"message":"196","line":20,"column":8,"nodeType":"190","messageId":"191","endLine":20,"endColumn":21},{"ruleId":"188","severity":1,"message":"197","line":23,"column":10,"nodeType":"190","messageId":"191","endLine":23,"endColumn":25},{"ruleId":"188","severity":1,"message":"198","line":23,"column":27,"nodeType":"190","messageId":"191","endLine":23,"endColumn":36},{"ruleId":"188","severity":1,"message":"199","line":27,"column":8,"nodeType":"190","messageId":"191","endLine":27,"endColumn":21},{"ruleId":"188","severity":1,"message":"200","line":36,"column":8,"nodeType":"190","messageId":"191","endLine":36,"endColumn":27},{"ruleId":"201","severity":1,"message":"202","line":87,"column":6,"nodeType":"203","endLine":87,"endColumn":8,"suggestions":"204"},{"ruleId":"188","severity":1,"message":"205","line":90,"column":9,"nodeType":"190","messageId":"191","endLine":90,"endColumn":18},{"ruleId":"188","severity":1,"message":"206","line":284,"column":13,"nodeType":"190","messageId":"191","endLine":284,"endColumn":35},{"ruleId":"207","severity":1,"message":"208","line":360,"column":53,"nodeType":"209","messageId":"210","endLine":360,"endColumn":55},{"ruleId":"188","severity":1,"message":"211","line":30,"column":5,"nodeType":"190","messageId":"191","endLine":30,"endColumn":15},{"ruleId":"188","severity":1,"message":"212","line":32,"column":5,"nodeType":"190","messageId":"191","endLine":32,"endColumn":16},{"ruleId":"188","severity":1,"message":"213","line":8,"column":3,"nodeType":"190","messageId":"191","endLine":8,"endColumn":14},{"ruleId":"188","severity":1,"message":"214","line":10,"column":3,"nodeType":"190","messageId":"191","endLine":10,"endColumn":13},{"ruleId":"188","severity":1,"message":"215","line":11,"column":3,"nodeType":"190","messageId":"191","endLine":11,"endColumn":8},{"ruleId":"188","severity":1,"message":"216","line":12,"column":3,"nodeType":"190","messageId":"191","endLine":12,"endColumn":15},{"ruleId":"188","severity":1,"message":"217","line":13,"column":3,"nodeType":"190","messageId":"191","endLine":13,"endColumn":15},{"ruleId":"188","severity":1,"message":"218","line":14,"column":3,"nodeType":"190","messageId":"191","endLine":14,"endColumn":11},{"ruleId":"188","severity":1,"message":"219","line":15,"column":3,"nodeType":"190","messageId":"191","endLine":15,"endColumn":7},{"ruleId":"188","severity":1,"message":"220","line":16,"column":3,"nodeType":"190","messageId":"191","endLine":16,"endColumn":9},{"ruleId":"188","severity":1,"message":"221","line":17,"column":3,"nodeType":"190","messageId":"191","endLine":17,"endColumn":10},{"ruleId":"188","severity":1,"message":"222","line":19,"column":3,"nodeType":"190","messageId":"191","endLine":19,"endColumn":9},{"ruleId":"188","severity":1,"message":"223","line":20,"column":3,"nodeType":"190","messageId":"191","endLine":20,"endColumn":10},{"ruleId":"188","severity":1,"message":"224","line":22,"column":8,"nodeType":"190","messageId":"191","endLine":22,"endColumn":17},{"ruleId":"188","severity":1,"message":"225","line":29,"column":8,"nodeType":"190","messageId":"191","endLine":29,"endColumn":17},{"ruleId":"226","severity":1,"message":"227","line":57,"column":23,"nodeType":"228","messageId":"229","endLine":57,"endColumn":25},{"ruleId":"226","severity":1,"message":"227","line":68,"column":23,"nodeType":"228","messageId":"229","endLine":68,"endColumn":25},{"ruleId":"188","severity":1,"message":"230","line":86,"column":10,"nodeType":"190","messageId":"191","endLine":86,"endColumn":18},{"ruleId":"188","severity":1,"message":"231","line":87,"column":9,"nodeType":"190","messageId":"191","endLine":87,"endColumn":20},{"ruleId":"188","severity":1,"message":"232","line":91,"column":9,"nodeType":"190","messageId":"191","endLine":91,"endColumn":20},{"ruleId":"188","severity":1,"message":"233","line":95,"column":10,"nodeType":"190","messageId":"191","endLine":95,"endColumn":15},{"ruleId":"188","severity":1,"message":"234","line":95,"column":17,"nodeType":"190","messageId":"191","endLine":95,"endColumn":25},{"ruleId":"226","severity":1,"message":"227","line":306,"column":56,"nodeType":"228","messageId":"229","endLine":306,"endColumn":58},{"ruleId":"192","severity":1,"message":"193","line":354,"column":5,"nodeType":"194","messageId":"195","endLine":363,"endColumn":6},{"ruleId":"192","severity":1,"message":"193","line":364,"column":5,"nodeType":"194","messageId":"195","endLine":380,"endColumn":6},{"ruleId":"188","severity":1,"message":"235","line":386,"column":9,"nodeType":"190","messageId":"191","endLine":386,"endColumn":15},{"ruleId":"188","severity":1,"message":"236","line":388,"column":7,"nodeType":"190","messageId":"191","endLine":388,"endColumn":11},{"ruleId":"188","severity":1,"message":"237","line":389,"column":7,"nodeType":"190","messageId":"191","endLine":389,"endColumn":15},{"ruleId":"188","severity":1,"message":"238","line":390,"column":7,"nodeType":"190","messageId":"191","endLine":390,"endColumn":10},{"ruleId":"201","severity":1,"message":"239","line":415,"column":6,"nodeType":"203","endLine":415,"endColumn":19,"suggestions":"240"},{"ruleId":"226","severity":1,"message":"227","line":425,"column":27,"nodeType":"228","messageId":"229","endLine":425,"endColumn":29},{"ruleId":"207","severity":1,"message":"241","line":435,"column":49,"nodeType":"209","messageId":"242","endLine":435,"endColumn":51},{"ruleId":"207","severity":1,"message":"241","line":447,"column":32,"nodeType":"209","messageId":"242","endLine":447,"endColumn":34},{"ruleId":"243","severity":1,"message":"244","line":456,"column":15,"nodeType":"190","messageId":"245","endLine":456,"endColumn":19},{"ruleId":"226","severity":1,"message":"227","line":464,"column":25,"nodeType":"228","messageId":"229","endLine":464,"endColumn":27},{"ruleId":"246","severity":1,"message":"247","line":523,"column":17,"nodeType":"248","endLine":523,"endColumn":66},{"ruleId":"188","severity":1,"message":"216","line":16,"column":3,"nodeType":"190","messageId":"191","endLine":16,"endColumn":15},{"ruleId":"188","severity":1,"message":"217","line":17,"column":3,"nodeType":"190","messageId":"191","endLine":17,"endColumn":15},{"ruleId":"188","severity":1,"message":"249","line":21,"column":10,"nodeType":"190","messageId":"191","endLine":21,"endColumn":19},{"ruleId":"188","severity":1,"message":"250","line":23,"column":8,"nodeType":"190","messageId":"191","endLine":23,"endColumn":22},{"ruleId":"188","severity":1,"message":"251","line":29,"column":8,"nodeType":"190","messageId":"191","endLine":29,"endColumn":21},{"ruleId":"188","severity":1,"message":"252","line":30,"column":8,"nodeType":"190","messageId":"191","endLine":30,"endColumn":21},{"ruleId":"188","severity":1,"message":"253","line":31,"column":8,"nodeType":"190","messageId":"191","endLine":31,"endColumn":19},{"ruleId":"188","severity":1,"message":"254","line":32,"column":8,"nodeType":"190","messageId":"191","endLine":32,"endColumn":30},{"ruleId":"188","severity":1,"message":"255","line":33,"column":8,"nodeType":"190","messageId":"191","endLine":33,"endColumn":20},{"ruleId":"188","severity":1,"message":"256","line":34,"column":8,"nodeType":"190","messageId":"191","endLine":34,"endColumn":23},{"ruleId":"188","severity":1,"message":"257","line":35,"column":8,"nodeType":"190","messageId":"191","endLine":35,"endColumn":24},{"ruleId":"201","severity":1,"message":"258","line":60,"column":6,"nodeType":"203","endLine":60,"endColumn":8,"suggestions":"259"},{"ruleId":"188","severity":1,"message":"250","line":27,"column":8,"nodeType":"190","messageId":"191","endLine":27,"endColumn":22},{"ruleId":"188","severity":1,"message":"249","line":33,"column":10,"nodeType":"190","messageId":"191","endLine":33,"endColumn":19},{"ruleId":"188","severity":1,"message":"260","line":42,"column":7,"nodeType":"190","messageId":"191","endLine":42,"endColumn":18},{"ruleId":"201","severity":1,"message":"261","line":95,"column":6,"nodeType":"203","endLine":95,"endColumn":8,"suggestions":"262"},{"ruleId":"188","severity":1,"message":"263","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"264","line":12,"column":3,"nodeType":"190","messageId":"191","endLine":12,"endColumn":19},{"ruleId":"188","severity":1,"message":"222","line":13,"column":3,"nodeType":"190","messageId":"191","endLine":13,"endColumn":9},{"ruleId":"188","severity":1,"message":"249","line":16,"column":10,"nodeType":"190","messageId":"191","endLine":16,"endColumn":19},{"ruleId":"188","severity":1,"message":"250","line":18,"column":8,"nodeType":"190","messageId":"191","endLine":18,"endColumn":22},{"ruleId":"188","severity":1,"message":"252","line":24,"column":8,"nodeType":"190","messageId":"191","endLine":24,"endColumn":21},{"ruleId":"188","severity":1,"message":"196","line":25,"column":8,"nodeType":"190","messageId":"191","endLine":25,"endColumn":21},{"ruleId":"188","severity":1,"message":"220","line":12,"column":3,"nodeType":"190","messageId":"191","endLine":12,"endColumn":9},{"ruleId":"201","severity":1,"message":"265","line":36,"column":6,"nodeType":"203","endLine":36,"endColumn":8,"suggestions":"266"},{"ruleId":"188","severity":1,"message":"267","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"201","severity":1,"message":"268","line":15,"column":6,"nodeType":"203","endLine":15,"endColumn":8,"suggestions":"269"},{"ruleId":"270","severity":1,"message":"271","line":88,"column":11,"nodeType":"248","endLine":88,"endColumn":72},{"ruleId":"201","severity":1,"message":"272","line":22,"column":6,"nodeType":"203","endLine":22,"endColumn":8,"suggestions":"273"},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"no-unused-vars","'surveyz' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ImageInputBtn' is defined but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'VideoCallIcon' is defined but never used.","'PlaceholdersContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMaxContentId', 'props.json', and 'updateRandomNumbers'. Either include them or remove the dependency array.","ArrayExpression",["276"],"'onDragEnd' is assigned a value but never used.","'onOpenEmbedVideoDialog' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'secondPage' is assigned a value but never used.","'otherSurvey' is assigned a value but never used.","'CardActions' is defined but never used.","'IconButton' is defined but never used.","'Input' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","'Select' is defined but never used.","'Divider' is defined but never used.","'Switch' is defined but never used.","'Tooltip' is defined but never used.","'Container' is defined but never used.","'FormLabel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'images' is assigned a value but never used.","'name' is assigned a value but never used.","'assValue' is assigned a value but never used.","'obj' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'nameNumberAssociation', 'toPrint', and 'vPages'. Either include them or remove the dependency array.",["277"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","no-redeclare","'rand' is already defined.","redeclared","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Draggable' is defined but never used.","'DragHandleIcon' is defined but never used.","'QuestionTypes' is defined but never used.","'ShortTextIcon' is defined but never used.","'SubjectIcon' is defined but never used.","'RadioButtonCheckedIcon' is defined but never used.","'CheckBoxIcon' is defined but never used.","'LinearScaleIcon' is defined but never used.","'ImportExportIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'randomNumbersNames'. Either include it or remove the dependency array.",["278"],"'initialData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'mandatory', 'question.title', 'question.type', and 'updateQuestion'. Either include them or remove the dependency array.",["279"],"'Fragment' is defined but never used.","'FormControlLabel' is defined but never used.","React Hook useEffect has missing dependencies: 'maxRange', 'minRange', 'name', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["280"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'content'. Either include it or remove the dependency array.",["281"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'maxValue', 'maxValueLabel', 'minValue', 'minValueLabel', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["282"],"no-global-assign","no-unsafe-negation",{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},"Update the dependencies array to be: [getMaxContentId, props.json, updateRandomNumbers]",{"range":"297","text":"298"},"Update the dependencies array to be: [currentPage, nameNumberAssociation, toPrint, vPages]",{"range":"299","text":"300"},"Update the dependencies array to be: [randomNumbersNames]",{"range":"301","text":"302"},"Update the dependencies array to be: [mandatory, question.title, question.type, updateQuestion]",{"range":"303","text":"304"},"Update the dependencies array to be: [maxRange, minRange, name, props]",{"range":"305","text":"306"},"Update the dependencies array to be: [content]",{"range":"307","text":"308"},"Update the dependencies array to be: [maxValue, maxValueLabel, minValue, minValueLabel, props]",{"range":"309","text":"310"},[2548,2550],"[getMaxContentId, props.json, updateRandomNumbers]",[13562,13575],"[currentPage, nameNumberAssociation, toPrint, vPages]",[1896,1898],"[randomNumbersNames]",[2879,2881],"[mandatory, question.title, question.type, updateQuestion]",[981,983],"[maxRange, minRange, name, props]",[489,491],"[content]",[580,582],"[maxValue, maxValueLabel, minValue, minValueLabel, props]"]