[{"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\index.js":"1","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\App.js":"2","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewSurvey.js":"3","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\View.js":"4","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\tmpSurveys.js":"5","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\JsonLoader.js":"6","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\ImageInputBtn.js":"7","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\surveys\\Survey.js":"8","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\MultipleChoiceQuestion.js":"9","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomGallery.js":"10","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\LinearScaleQuestion.js":"11","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\questionTypes.js":"12","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\Page.js":"13","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\RandomNamesContext.js":"14","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\Image.js":"15","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\LinearScaleQuestion.js":"16","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\RankingQuestion.js":"17","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\MultipleChoiceQuestion.js":"18","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\TextQuestion.js":"19","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\DataCollectorContext.js":"20","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\TextField.js":"21","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\AnswersSummary.js":"22","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\CheckBoxQuestion.js":"23","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\stateReducer.js":"24","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\App2.js":"25","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\StateProvider.js":"26","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\MainPage.js":"27","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\NavBar.js":"28","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\contentTypes.js":"29","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Page.js":"30","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewSurveyContext.js":"31","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomizableContent.js":"32","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Content.js":"33","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\SectionManager.js":"34","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\ContentActions.js":"35","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\surveyActionTypes.js":"36","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\SectionManagerBtn.js":"37","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomNumber.js":"38","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Question.js":"39","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Text.js":"40","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Image.js":"41","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\QuestionTypeSelect.js":"42","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\QuestionTypeSelectMenuItem.js":"43","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomContentActions.js":"44","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\editorStyles.js":"45","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\viewStyles.js":"46"},{"size":500,"mtime":1619254640317,"results":"47","hashOfConfig":"48"},{"size":5682,"mtime":1619202402760,"results":"49","hashOfConfig":"48"},{"size":10118,"mtime":1621746968178,"results":"50","hashOfConfig":"48"},{"size":315,"mtime":1619265833143,"results":"51","hashOfConfig":"48"},{"size":4677,"mtime":1614799358541,"results":"52","hashOfConfig":"48"},{"size":9742,"mtime":1619599222431,"results":"53","hashOfConfig":"48"},{"size":2661,"mtime":1619265833075,"results":"54","hashOfConfig":"48"},{"size":8541,"mtime":1613668841825,"results":"55","hashOfConfig":"48"},{"size":3213,"mtime":1619373868813,"results":"56","hashOfConfig":"48"},{"size":7086,"mtime":1619345641716,"results":"57","hashOfConfig":"48"},{"size":8366,"mtime":1619359199431,"results":"58","hashOfConfig":"48"},{"size":228,"mtime":1613469144962,"results":"59","hashOfConfig":"48"},{"size":1926,"mtime":1619599561508,"results":"60","hashOfConfig":"48"},{"size":123,"mtime":1615031270041,"results":"61","hashOfConfig":"48"},{"size":2968,"mtime":1619349034322,"results":"62","hashOfConfig":"48"},{"size":6285,"mtime":1619604442033,"results":"63","hashOfConfig":"48"},{"size":3806,"mtime":1621761572581,"results":"64","hashOfConfig":"48"},{"size":3477,"mtime":1619274557938,"results":"65","hashOfConfig":"48"},{"size":1669,"mtime":1619265914944,"results":"66","hashOfConfig":"48"},{"size":127,"mtime":1615104756435,"results":"67","hashOfConfig":"48"},{"size":1938,"mtime":1619265834593,"results":"68","hashOfConfig":"48"},{"size":4348,"mtime":1625237092971,"results":"69","hashOfConfig":"48"},{"size":3903,"mtime":1619265833188,"results":"70","hashOfConfig":"48"},{"size":2265,"mtime":1619384780502,"results":"71","hashOfConfig":"48"},{"size":3127,"mtime":1619370478076,"results":"72","hashOfConfig":"48"},{"size":375,"mtime":1619204101941,"results":"73","hashOfConfig":"48"},{"size":10497,"mtime":1621613046247,"results":"74","hashOfConfig":"48"},{"size":876,"mtime":1625326466775,"results":"75","hashOfConfig":"48"},{"size":166,"mtime":1615755583932,"results":"76","hashOfConfig":"48"},{"size":1960,"mtime":1619265834605,"results":"77","hashOfConfig":"48"},{"size":12849,"mtime":1625234740840,"results":"78","hashOfConfig":"48"},{"size":2025,"mtime":1619265834619,"results":"79","hashOfConfig":"48"},{"size":2045,"mtime":1619265834586,"results":"80","hashOfConfig":"48"},{"size":3548,"mtime":1619520137156,"results":"81","hashOfConfig":"48"},{"size":5331,"mtime":1619600917654,"results":"82","hashOfConfig":"48"},{"size":204,"mtime":1618998053189,"results":"83","hashOfConfig":"48"},{"size":2149,"mtime":1619265834633,"results":"84","hashOfConfig":"48"},{"size":3186,"mtime":1619265833086,"results":"85","hashOfConfig":"48"},{"size":5254,"mtime":1621752103630,"results":"86","hashOfConfig":"48"},{"size":3819,"mtime":1619265833096,"results":"87","hashOfConfig":"48"},{"size":5729,"mtime":1619265833103,"results":"88","hashOfConfig":"48"},{"size":2348,"mtime":1619601386525,"results":"89","hashOfConfig":"48"},{"size":1479,"mtime":1617810962967,"results":"90","hashOfConfig":"48"},{"size":2447,"mtime":1619265834608,"results":"91","hashOfConfig":"48"},{"size":8350,"mtime":1619628086461,"results":"92","hashOfConfig":"48"},{"size":2762,"mtime":1619604613166,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"svet3z",{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"96"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"96"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"96"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"96"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"96"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"96"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"96"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\index.js",[],["217","218"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\App.js",["219","220","221","222"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewSurvey.js",["223","224"],"import React, { useEffect, useState, useReducer } from \"react\";\n// Material\nimport { Box, Button, Grid, TextField, Container } from \"@material-ui/core\";\n// Styles\nimport { newSurveyStyle } from \"./editorStyles\";\nimport Page from \"./Page\";\n\n// NewSurvey Context\nimport {\n  NewSurveyDispatcherContext,\n  SectionLengthContext,\n  RandomNumbersContext,\n  reducer,\n  initialData,\n  action_types,\n} from \"./NewSurveyContext\";\n\nimport { Link } from \"react-router-dom\";\n\nimport content_type from \"../contentTypes\";\n\n// App Context\nimport { actionTypes, actionTypes as appActionTypes } from \"../../stateReducer\";\nimport { useStateValue } from \"../../StateProvider\";\n\nconst useStyles = newSurveyStyle;\n\nfunction NewSurvey() {\n  const classes = useStyles();\n  const [surveyData, setSurveyData] = useState({\n    title: \"\",\n    description: \"\",\n  });\n  // Survey context\n  const [state, dispatch] = useReducer(reducer, initialData);\n  // App Context\n  const [{ templates, selectedSurvey }, appDispatch] = useStateValue();\n\n  /* If the selectedSurvey in the context is not null, then we are editing\n  an already existing survey, else we are creating a new one.\n  -> NOTE: check if selectedSurvey is needed as dependency */\n  useEffect(() => {\n    if (selectedSurvey.survey) {\n      console.log(\n        \"The selected survey in useEffect NewSurvye is: \",\n        selectedSurvey\n      );\n      dispatch({\n        type: action_types.SET_SURVEY,\n        survey: selectedSurvey.survey,\n      });\n      setSurveyData({\n        title: selectedSurvey.survey.title,\n        description: selectedSurvey.survey.description,\n      });\n    } else {\n      console.log(\"No Selected Survey, setting initial data\");\n      dispatch({ type: action_types.SET_INITIAL_SURVEY });\n    }\n  }, [selectedSurvey]);\n\n  useEffect(() => {\n    console.log(\"The state is changed, checking templates: \", templates);\n  }, [state]);\n\n  /* Router functions (save and exit) */\n\n  const onSaveSurvey = () => {\n    const changeImages = (json) => {\n      json.pages.forEach((page) => {\n        page.contents.forEach((cont) => {\n          if (cont.type === content_type.QUESTION) {\n            if (\n              cont.data.images &&\n              Array.isArray(cont.data.images) &&\n              cont.data.images.length !== 0\n            ) {\n              cont.data.images.map((img) => {\n                return img.name;\n              });\n            }\n          }\n          if (cont.type === content_type.IMAGE) {\n            if (!cont.data.randomStatus || cont.data.randomStatus === false) {\n              cont.data.img = cont.data.img.name;\n            }\n          }\n        });\n      });\n      return json;\n    };\n\n    console.log(\"The content is\");\n    console.log(state.sections);\n\n    let finalJSON = {\n      title: surveyData.title,\n      description: surveyData.description,\n      pages: state.sections,\n    };\n    let finalSurvey = changeImages(finalJSON);\n\n    if (selectedSurvey.survey) {\n      if (selectedSurvey.survey.isTemplate && !selectedSurvey.useTemplate) {\n        // Editing a survey\n        console.log(\"Editing survey\");\n        finalSurvey.id = selectedSurvey.id;\n        finalSurvey.isTemplate = true;\n        appDispatch({\n          type: appActionTypes.EDIT_TEMPLATE,\n          template: finalSurvey,\n        });\n        fetch(\"http://localhost:9000/editTemplate\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(finalSurvey),\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            if (data.status !== \"saved\") {\n              console.error(\"FAILED TO EDIT THE TEMPLATE\");\n            }\n          });\n      } else if (\n        selectedSurvey.survey.isTemplate &&\n        selectedSurvey.useTemplate\n      ) {\n        // We are creating a new survey\n        appDispatch({ type: appActionTypes.ADD_SURVEY, survey: finalSurvey });\n        fetch(\"http://localhost:9000/insertSurvey\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(finalSurvey),\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            if (data.status !== \"saved\") {\n              console.error(\"FAILED TO INSERT THE SURVEY\");\n            }\n          });\n      } else {\n        // The survey was not a template but we are editing it\n        finalSurvey.id = selectedSurvey.survey.id;\n        console.log(\"ENWENW The final survey is\", finalSurvey);\n        appDispatch({ type: appActionTypes.EDIT_SURVEY, survey: finalSurvey });\n        fetch(\"http://localhost:9000/editSurvey\", {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(finalSurvey),\n        })\n          .then((response) => response.json())\n          .then((data) => {\n            if (data.status !== \"saved\") {\n              console.error(\"FAILED TO EDIT THE SURVEY\");\n            }\n          });\n      }\n    } else {\n      // We are creating a new survey\n      appDispatch({ type: appActionTypes.ADD_SURVEY, survey: finalSurvey });\n      fetch(\"http://localhost:9000/insertSurvey\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(finalSurvey),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.status !== \"saved\") {\n            console.error(\"FAILED TO INSERT THE SURVEY\");\n          }\n        });\n    }\n  };\n\n  const onSaveAsTemplate = () => {\n    let finalSurvey = {\n      title: surveyData.title,\n      description: surveyData.description,\n      pages: state.sections,\n      isTemplate: true,\n    };\n\n    appDispatch({ type: appActionTypes.ADD_TEMPLATE, template: finalSurvey });\n    fetch(\"http://localhost:9000/insertTemplate\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(finalSurvey),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.status !== \"saved\") {\n          console.error(\"FAILED TO INSERT THE TEMPLATE\");\n        }\n      });\n  };\n\n  const onBackToMainPage = () => {\n    dispatch({ type: action_types.SET_INITIAL_SURVEY });\n    appDispatch({ type: appActionTypes.SELECT_SURVEY, survey: null });\n  };\n\n  /* Survey data changin functions */\n\n  const onChangeSurveyTitle = (e) => {\n    setSurveyData({ ...surveyData, title: e.target.value });\n  };\n\n  const onChangeSurveyDescription = (e) => {\n    setSurveyData({ ...surveyData, description: e.target.value });\n  };\n\n  console.log(\"Rendering NewSurvey.js\");\n  console.log(\"The NewSurvey state is: \", state.sections);\n\n  return (\n    <Box container=\"div\" className={classes.root}>\n      <Container maxWidth=\"sm\" className={classes.titleDescContainer}>\n        <Box component=\"div\" className={classes.boxTitleDescContainer}>\n          <TextField\n            id=\"surveytitleinput\"\n            label=\"Title\"\n            fullWidth\n            value={surveyData.title}\n            onChange={onChangeSurveyTitle}\n          />\n        </Box>\n        <Box component=\"div\" className={classes.boxTitleDescContainer}>\n          <TextField\n            id=\"surveydescriptioninput\"\n            label=\"Description\"\n            fullWidth\n            value={surveyData.description}\n            onChange={onChangeSurveyDescription}\n          />\n        </Box>\n      </Container>\n      <NewSurveyDispatcherContext.Provider value={dispatch}>\n        <SectionLengthContext.Provider value={state.sections?.length}>\n          <RandomNumbersContext.Provider value={state.randomNumbers}>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              id=\"cardscontainer\"\n              className={classes.cardContainer}\n            >\n              {state.sections?.map((section, sectionIndex) => {\n                console.log(\n                  \"App mapping. the section index is: \",\n                  sectionIndex\n                );\n                return (\n                  <Page\n                    section={section}\n                    sectionIndex={sectionIndex}\n                    key={section.pageId}\n                  />\n                );\n              })}\n            </Grid>\n          </RandomNumbersContext.Provider>\n        </SectionLengthContext.Provider>\n      </NewSurveyDispatcherContext.Provider>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        className={classes.bottomButtonsContainer}\n      >\n        <Grid item>\n          <Link to=\"/\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.bottomButton}\n              onClick={onBackToMainPage}\n            >\n              Back to home page\n            </Button>\n          </Link>\n        </Grid>\n        <Grid item>\n          <Link to=\"/\">\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.bottomButton}\n              onClick={onSaveSurvey}\n            >\n              Save{\" \"}\n              {!selectedSurvey?.useTemplate === false ||\n              (!selectedSurvey?.useTemplate === true &&\n                !selectedSurvey?.survey?.isTemplate)\n                ? \"survey\"\n                : \"template\"}\n            </Button>\n          </Link>\n        </Grid>\n        {!(\n          selectedSurvey.survey !== null &&\n          selectedSurvey.useTemplate === false &&\n          selectedSurvey?.survey?.isTemplate === true\n        ) && (\n          <Grid item>\n            <Link to=\"/\">\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.bottomButton}\n                onClick={onSaveAsTemplate}\n              >\n                Save as template\n              </Button>\n            </Link>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  );\n}\n\nexport default NewSurvey;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\View.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\tmpSurveys.js",["225","226"],"import {\r\n  ShortAnswer,\r\n  Paragraph,\r\n  MultipleChoice,\r\n  CheckBox,\r\n  Survey,\r\n  SurveyPage,\r\n} from \"./surveys/Survey\";\r\n\r\nlet firstQuestion = new ShortAnswer(\"My Title\", true);\r\nlet secondQuestion = new Paragraph(\"My Paragraph Title\", true);\r\nlet thirdQuestion = new MultipleChoice(\"My MultipleChoice Title\", true, [\r\n  \"firstMCChoice\",\r\n  \"secondMCChoice\",\r\n  \"thirdMCCChoice\",\r\n]);\r\nlet fourthQuestion = new CheckBox(\"My Checkbox Title\", true, [\r\n  \"firstCBChoice\",\r\n  \"secondCBChoice\",\r\n  \"thirdCBChoice\",\r\n  \"fourthCBChoice\",\r\n]);\r\n\r\nlet firstPage = new SurveyPage([\r\n  firstQuestion,\r\n  secondQuestion,\r\n  thirdQuestion,\r\n  fourthQuestion,\r\n]);\r\nlet secondPage = new SurveyPage([firstQuestion]);\r\n\r\nlet otherSurvey = new Survey(\"Prova1\", \"Desc1\", [firstPage]);\r\nlet mySurvey = {\r\n  title: \"Random01\",\r\n  description: \"RandomDesc\",\r\n  pages: [\r\n    {\r\n        \"pageId\" : \"1\",\r\n        \"contents\": [\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Multiple Choice\",\r\n              \"title\": \"The AI must decide: Is 40% or more of the nutrients on then plate fat?\",\r\n              \"description\": \"What will the AI decide?\",\r\n              \"choices\": [\r\n                {\r\n                  \"id\" : \"1\",\r\n                  \"value\": \"No, 30% of the nutrients on this plate is not fat.\"\r\n                },\r\n                {\r\n                  \"id\" : \"2\",\r\n                  \"value\": \"Yes, 30% of the nutrients on this plate is not fat.\"\r\n                }\r\n              ],\r\n              \"images\": [\"image01.png\", \"image02.png\"]\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Short Text\",\r\n              \"title\": \"The AI generated its prediction giving this motivation: it is represented as two curved lines\",\r\n              \"description\": \"What is your decision?\"\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Ranking\",\r\n              \"title\": \"Employee Performance review\",\r\n              \"description\": \"Rank these elements sorting them by importance to you\",\r\n              \"choices\": [\r\n                {\r\n                  \"id\": \"1\",\r\n                  \"value\": \"Job Knowledge\"\r\n                },\r\n                {\r\n                  \"id\": \"2\",\r\n                  \"value\": \"Work Quality\"\r\n                },\r\n                {\r\n                  \"id\": \"3\",\r\n                  \"value\": \"Attendance/punctuality\"\r\n                },\r\n                {\r\n                  \"id\": \"4\",\r\n                  \"value\": \"Productivity\"\r\n                },\r\n                {\r\n                  \"id\": \"5\",\r\n                  \"value\": \"Communication Skills\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        pageId: 2,\r\n        contents: [\r\n          {\r\n            contentId: 1,\r\n            type: \"Image\",\r\n            data: {\r\n              title: \"ImagetitleProva\",\r\n              randomName: \"Pippo\",\r\n              randomStatus: true,\r\n            },\r\n          },\r\n          {\r\n            contentId: 2,\r\n            type: \"Random Number\",\r\n            data: { name: \"Pippo\", minRange: 0, maxRange: 100 },\r\n          },\r\n          {\r\n            contentId: 3,\r\n            type: \"Random Number\",\r\n            data: { name: \"Gatto\", minRange: 0, maxRange: 100 },\r\n          },        \r\n        ],\r\n      },\r\n    {\r\n      pageId: 3,\r\n      contents: [\r\n        \r\n        {\r\n          contentId: 1,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Cane\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n        {\r\n          contentId: 2,\r\n          type: \"Random Number\",\r\n          data: { name: \"Cane\", minRange: 0, maxRange: 100 },\r\n        }, \r\n        {\r\n          contentId: 3,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Gatto\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nlet mySimpleSurvey = {\r\n  title: \"Random01\",\r\n  description: \"RandomDesc\",\r\n  pages: [\r\n    {\r\n      pageId: 1,\r\n      contents: [\r\n        {\r\n          contentId: 1,\r\n          type: \"Random Number\",\r\n          data: { name: \"Pippo\", minRange: 0, maxRange: 100 },\r\n        },\r\n        {\r\n          contentId: 2,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Pippo\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport { mySimpleSurvey, mySurvey };\r\n",["227","228"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\JsonLoader.js",["229","230","231","232","233","234","235","236"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport { Box, Button } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Page from \"./Page.js\";\nimport RandomNamesContext from \"./RandomNamesContext\";\nimport DataCollectorContext from \"./DataCollectorContext.js\";\nimport AnswersSummary from \"./AnswersSummary.js\";\n\n// UPDATE APRIL\nimport { useStateValue } from \"../../StateProvider\";\n\nconst useStyles = questionStyle;\n\n//Componente che si occupa di prelevare i dati dal Json che descrive il questionario e tutti gli elementi di cui è composto,\n//divisi per pagine. per ogni tipo di domanda prende le informazioni presenti e le formatta in modo che siano\n//pronte alla visualizzazione (che avverrà passando il componente a View e usandolo come <JsonLoader />)\n\nfunction JsonLoader(props) {\n  const classes = useStyles();\n  // const jsonData = useContext(SelectedSurveyContext);\n  const [currentPage, setCurrentPage] = useState(0); //Stato usato per conoscere la pagina corrente del questionario\n  const [vPages, setVPages] = useState([0]); //Stato che tiene traccia di tutte le pagine visitate dall'utente\n  const [randomNames, setRandomNames] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [showAnswers, setShowAnswers] = useState(false);\n\n  // UPDATE APRIL\n  const [{ selectedSurvey }, dispatch] = useStateValue();\n  const jsonData = selectedSurvey.survey;\n\n  /*---GESTIONE DELLE PAGINE DEL QUESTIONARIO---*/\n  /*[ES6] action è il parametro passato (indica se l'utente vuole andare alla prossima pagina (1) o quella precedente (0)), \n\t'e' è l'event object ritornato*/\n  const handlePaging = (action) => (e) => {\n    let visitedPages = [...vPages]; //Array ausiliario usato per settare lo state di vPages\n\n    //In base all'azione scelta (Next o Back) viene settato la pagina corrente\n    if (action) {\n      setCurrentPage(currentPage + 1);\n\n      if (visitedPages == undefined) {\n        //se non ci sono pagine visitate allora imposta la pagina 0\n        visitedPages.push(currentPage);\n      } else if (!visitedPages.includes(currentPage)) {\n        visitedPages.push(currentPage);\n      }\n    } else {\n      setCurrentPage(currentPage - 1);\n      if (visitedPages == undefined) {\n        visitedPages.push(currentPage);\n      } else if (!visitedPages.includes(currentPage)) {\n        visitedPages.push(currentPage);\n      }\n    }\n    setVPages(visitedPages);\n  };\n\n  const newRenderHeader = () => {\n    const { title, description } = jsonData;\n\n    return (\n      <Typography component=\"div\" color=\"textPrimary\" align=\"center\">\n        <Grid>\n          <Paper\n            variant=\"outlined\"\n            width={400}\n            component=\"div\"\n            className={classes.wrapper}\n          >\n            <Box align=\"left\" className={classes.questionnaireTitleContainer}>\n              {title}\n            </Box>\n            <Box align=\"left\" className={classes.elementContainer}>\n              {description}\n            </Box>\n          </Paper>\n        </Grid>\n      </Typography>\n    );\n  };\n\n  const saveSurvey = () => {\n    console.log(\"The answers are: \", answers);\n  };\n\n  const onClickShowAnswers = () => {\n    setShowAnswers(true);\n  };\n\n  /* Funzione di callback per le domande */\n  const updateAnswer = (sectionIndex, contentIndex, answer) => {\n    // Update the answer at sectionIndex and contentIndex\n    console.log(\"The section index is \", sectionIndex);\n    console.log(\"The content index is \", contentIndex);\n    console.log(\"The answer is \", answer);\n\n    if (answers.length > 0) {\n      let newAnswers = [...answers];\n      newAnswers[sectionIndex][contentIndex].answer = answer;\n      setAnswers(newAnswers);\n      console.log(\"The updated answers are \", newAnswers);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Running useEffect for randomNames setting\");\n    const savedRandomNames = sessionStorage.getItem(\n      \"randomNames\" + jsonData.id\n    );\n    if (savedRandomNames !== null) {\n      const parsedNames = JSON.parse(savedRandomNames);\n      setRandomNames(parsedNames);\n    } else {\n      let randomNamesArray = [];\n      jsonData.pages.forEach((page) => {\n        page.contents.forEach((content) => {\n          if (content.type === \"Random Number\")\n            randomNamesArray.push(content.data);\n        });\n      });\n      if (randomNamesArray.length > 0) {\n        let totalNumbers;\n        let randomObjs = [];\n        fetch(\"http://localhost:9000/getImageNumbers\")\n          .then((response) => response.json())\n          .then((data) => (totalNumbers = data.length - 1))\n          .then(() => {\n            randomNamesArray.forEach((name) => {\n              let rand = Math.floor(\n                name.minRange + Math.random() * (name.maxRange - name.minRange)\n              );\n              let randInRange = rand % totalNumbers;\n              //if(randomObjs.length)\n              randomObjs.push({\n                randomName: name.name,\n                generatedNumber: randInRange,\n              });\n            });\n          })\n          .then(() => {\n            sessionStorage.setItem(\n              \"randomNames\" + jsonData.id,\n              JSON.stringify(randomObjs)\n            );\n            setRandomNames(randomObjs);\n          });\n      } else {\n        const newRandomNames = [\"noNames\"];\n        setRandomNames(newRandomNames);\n      }\n    }\n  }, []);\n\n  /* Usiamo questo useEffect per impostare da subito la struttura delle risposte\n  in base alla struttura del JSON passato dal MainPage.\n  Lo vado a runnare dopo che setto randomNames in modo tale da avere anche le informazioni\n  riguardante i valori random */\n  useEffect(() => {\n    if (randomNames.length > 0) {\n      console.log(\"Running useEffect for answer setting\");\n      let initialAnswers = [];\n      jsonData.pages.forEach((page) => {\n        let pageArray = [];\n        page.contents.forEach((content) => {\n          if (content.type === \"Question\") {\n            if (content.data.type === \"Ranking\") {\n              pageArray.push({\n                contentType: content.type,\n                answer: content.data.choices,\n              });\n            } else if (content.data.type === \"CheckBox\") {\n              pageArray.push({\n                contentType: content.type,\n                answer: content.data.choices,\n              });\n            } else if (\n              content.data.type === \"Linear Scale\" &&\n              (content.data.continuousSwitch === false ||\n                content.data.radioBtnSwitch === true)\n            ) {\n              pageArray.push({ contentType: content.type, answer: 0 });\n            } else {\n              pageArray.push({ contentType: content.type, answer: null });\n            }\n          } else {\n            if (\n              content.data.randomStatus &&\n              content.data.randomStatus === true\n            ) {\n              console.log(\"The item randomName is \", content.data.randomName);\n              console.log(\"The randomNames are \", randomNames);\n              const foundValue = randomNames.find(\n                (rn) => rn.randomName === content.data.randomName\n              );\n              const randomValue = foundValue[\"generatedNumber\"];\n              pageArray.push({ contentType: content.type, randomValue });\n            } else {\n              pageArray.push({ contentType: content.type });\n            }\n          }\n        });\n        initialAnswers.push(pageArray);\n      });\n      console.log(\"SETTING INITIAL ANSWERS: \", initialAnswers);\n      setAnswers(initialAnswers);\n    } else {\n      console.log(\"Use effect answer: randomNames length not > 0\");\n    }\n  }, [randomNames]);\n\n  const renderPages = () => {\n    console.log(\"Rendering the pages, the randomNames are: \", randomNames);\n    return (\n      <RandomNamesContext.Provider value={randomNames}>\n        <DataCollectorContext.Provider value={updateAnswer}>\n          <Page\n            sectionIndex={currentPage}\n            contents={jsonData.pages[currentPage].contents}\n          />\n        </DataCollectorContext.Provider>\n      </RandomNamesContext.Provider>\n    );\n  };\n\n  const newReturn = () => {\n    return (\n      <div>\n        {newRenderHeader()}\n        {renderPages()}\n        <Box\n          display=\"flex\"\n          justifyContent=\"flex-end\"\n          className={classes.pagesSwitchButtonContainer}\n        >\n          {currentPage > 0 ? (\n            <Button\n              className={classes.pagesSwitchButton}\n              variant=\"contained\"\n              onClick={handlePaging(false)}\n              color=\"primary\"\n            >\n              Back\n            </Button>\n          ) : (\n            \"\"\n          )}\n          {currentPage === jsonData.pages.length - 1 ? (\n            <Button\n              className={classes.pagesSwitchButton}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={onClickShowAnswers}\n            >\n              Save\n            </Button>\n          ) : (\n            <Button\n              className={classes.pagesSwitchButton}\n              variant=\"contained\"\n              onClick={handlePaging(true)}\n              color=\"primary\"\n            >\n              Next\n            </Button>\n          )}\n        </Box>\n      </div>\n    );\n  };\n\n  const showAnswersOnClick = () => {\n    return (\n      <div>\n        <AnswersSummary answers={answers} jsonData={jsonData} />\n      </div>\n    );\n  };\n\n  switch (showAnswers) {\n    case true:\n      return showAnswersOnClick();\n\n    case false:\n      return newReturn();\n  }\n}\n\nexport default JsonLoader;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\ImageInputBtn.js",["237"],"import React, { Fragment, useRef } from \"react\";\nimport InsertPhotoIcon from \"@material-ui/icons/InsertPhoto\";\nimport { IconButton, Box } from \"@material-ui/core\";\nimport { sectionManagerBtnStyle } from \"./editorStyles\";\n\nconst useStyles = sectionManagerBtnStyle;\n\n/* Old image btn */\n\n/*NOTE: the Material UI ToolTip component needs a child that accepts a ref,\ntherefore I need to change the functional component into a forwardRef.*/\n\nconst ImageInputBtn = React.forwardRef((props, ref) => {\n  const classes = useStyles();\n  const fileInput = useRef(null);\n  const { value, ...propsNoValue } = props;\n\n  /*  Simulates the click on the input file */\n  const onAddImage = () => {\n    fileInput.current.click();\n  };\n\n  /*  Changes the image and creates a new content, adding it to the state */\n  const onChangeImage = (e) => {\n    const myImg = e.target.files[0];\n    // RETURN IMAGE\n    props.value(myImg);\n  };\n\n  return (\n    <Fragment>\n      <IconButton\n        className={classes.manageSurveyBoxIcon}\n        onClick={() => {\n          onAddImage();\n        }}\n        ref={ref}\n        {...propsNoValue}\n      >\n        <InsertPhotoIcon />\n      </IconButton>\n      <input\n        style={{\n          display: \"none\",\n          top: \"0px\",\n          right: \"0px\",\n        }}\n        type=\"file\"\n        accept=\"image/*\"\n        ref={fileInput}\n        onChange={onChangeImage}\n        onClick={(event) => {\n          // Used to let the user select the same file if needed\n          event.target.value = null;\n        }}\n      />\n    </Fragment>\n  );\n});\n\n/* New image btn */\n\nconst NewImageInputBtn = (props) => {\n  const classes = useStyles();\n  const fileInput = useRef(null);\n\n  /*  Simulates the click on the input file */\n  const onAddImage = () => {\n    fileInput.current.click();\n  };\n\n  /*  Changes the image and creates a new content, adding it to the state */\n  const onChangeImage = (e) => {\n    const myImg = e.target.files[0];\n    // RETURN IMAGE\n    props.value(myImg);\n  };\n\n  return (\n    <Box component=\"div\" {...props}>\n      <IconButton\n        className={classes.manageSurveyBoxIcon}\n        onClick={() => {\n          onAddImage();\n        }}\n        {...props}\n      >\n        <InsertPhotoIcon />\n      </IconButton>\n      <input\n        style={{\n          display: \"none\",\n          top: \"0px\",\n          right: \"0px\",\n        }}\n        type=\"file\"\n        accept=\"image/*\"\n        ref={fileInput}\n        onChange={onChangeImage}\n        onClick={(event) => {\n          // Used to let the user select the same file if needed\n          event.target.value = null;\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default ImageInputBtn;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\surveys\\Survey.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\MultipleChoiceQuestion.js",["238"],"import React, { useEffect, useContext } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { multipleChoiceQuestionStyle } from \"./editorStyles\";\n//Context\nimport { NewSurveyDispatcherContext, action_types } from \"./NewSurveyContext\";\n\nconst useStyles = multipleChoiceQuestionStyle;\n\nfunction MultipleChoiceQuestion({ choices, sectionIndex, contentIndex }) {\n  const classes = useStyles();\n  const dispatch = useContext(NewSurveyDispatcherContext);\n\n  useEffect(() => {\n    // Send initial values\n    if (choices === undefined) {\n      const updates = {\n        choices: [\n          { id: 1, value: \"\" },\n          { id: 2, value: \"\" },\n        ],\n      };\n      dispatch({\n        type: action_types.UPDATE_CONTENT,\n        payload: {\n          sectionIndex: sectionIndex,\n          contentIndex: contentIndex,\n          updates,\n        },\n      });\n    }\n  }, []);\n\n  const onChangeValue = (e, index) => {\n    let newChoices = [...choices];\n    newChoices[index].value = e.target.value;\n    const updates = {\n      choices: newChoices,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onRemoveOption = (index) => {\n    let newChoices = [...choices];\n    newChoices = newChoices.filter((el, ix) => ix !== index);\n    const updates = {\n      choices: newChoices,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onAddOption = () => {\n    let newChoices = [...choices, { id: choices.length + 1, value: \"\" }];\n    const updates = {\n      choices: newChoices,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const renderOptions = () => {\n    return choices === undefined\n      ? null\n      : choices.map((choice, index) => {\n          return (\n            <div key={\"choice-\" + choice.id}>\n              <TextField\n                label={\"Option \" + (index + 1)}\n                value={choice.value}\n                className={classes.textField}\n                onChange={(e) => {\n                  onChangeValue(e, index);\n                }}\n              />\n              {index !== 0 && index !== 1 ? (\n                <Button\n                  color=\"#FF0000\"\n                  className={classes.removeOptionBtn}\n                  onClick={() => {\n                    onRemoveOption(index);\n                  }}\n                >\n                  Remove option\n                </Button>\n              ) : null}\n            </div>\n          );\n        });\n  };\n\n  return (\n    <div className={classes.fieldContainer}>\n      {renderOptions()}\n      <Button\n        color=\"primary\"\n        className={classes.addOptionBtn}\n        onClick={() => {\n          onAddOption();\n        }}\n      >\n        Add option\n      </Button>\n    </div>\n  );\n}\n\n// export default React.memo(MultipleChoiceQuestion);\nexport default MultipleChoiceQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomGallery.js",["239","240","241","242","243","244","245","246"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport content_type from \"../contentTypes\";\n\n// Styles\nimport { randomGalleryStyle } from \"./editorStyles\";\nconst useStyles = randomGalleryStyle;\n\nconst imagePath = \"http://localhost:9000/images/\";\n\n/*   NOTE: the OldRandomGallery uses http request to get each image and each text. */\n\nfunction OldRandomGallery(props) {\n  const [content, setContent] = useState(undefined);\n  const [contentIndex, setContentIndex] = useState(0);\n  const [contentList, setContentList] = useState([]);\n  const randomType = props.randomType;\n\n  useEffect(() => {\n    if (content === undefined) {\n      getFirstContent();\n    }\n  }, []);\n\n  const getFirstContent = () => {\n    // TODO generalize for any type of content\n    let tempContentList;\n    if (randomType === content_type.IMAGE) {\n    }\n    fetch(\"http://localhost:9000/getImageList\")\n      .then((response) => response.json())\n      .then((data) => {\n        setContentList(data);\n        tempContentList = data;\n      })\n      .then(() => {\n        let url = new URL(\"http://localhost:9000/getImage\");\n        url.search = new URLSearchParams({\n          imageName: tempContentList[\"Question Images\"][0],\n          folder: \"question\",\n        });\n        fetch(url)\n          .then((response) => response.blob())\n          .then((data) => setContent(data));\n      });\n    if (randomType === content_type.TEXT) {\n      let textList;\n      fetch(\"http://localhost:9000/getTextList\")\n        .then((response) => response.json())\n        .then((data) => {\n          setContentList(data);\n          setContent(data[0]);\n          textList = data;\n        });\n    }\n  };\n\n  const getPreviousContent = () => {\n    let newIndex;\n    if (contentIndex !== 0) {\n      console.log(\"Content index is not zero\");\n      newIndex = contentIndex - 1;\n      setContentIndex(contentIndex - 1);\n    } else {\n      console.log(\"Content index is zero\");\n      newIndex = contentList[\"Question Images\"].length - 1;\n      setContentIndex(contentList[\"Question Images\"].length - 1);\n    }\n    console.log(\"The new index is\", newIndex);\n    console.log(\"The list is: \", contentList);\n    console.log(\n      \"The value at the list is :\",\n      contentList[\"Question Images\"][newIndex]\n    );\n    let url = new URL(\"http://localhost:9000/getImage\");\n    url.search = new URLSearchParams({\n      imageName: contentList[\"Question Images\"][newIndex],\n      folder: \"question\",\n    });\n    fetch(url)\n      .then((response) => response.blob())\n      .then((data) => setContent(data));\n  };\n\n  const getNextContent = () => {\n    let newIndex;\n    if (contentIndex !== contentList[\"Question Images\"].length - 1) {\n      newIndex = contentIndex + 1;\n      setContentIndex(contentIndex + 1);\n    } else {\n      newIndex = 0;\n      setContentIndex(0);\n    }\n    let url = new URL(\"http://localhost:9000/getImage\");\n    url.search = new URLSearchParams({\n      imageName: contentList[\"Question Images\"][newIndex],\n      folder: \"question\",\n    });\n    fetch(url)\n      .then((response) => response.blob())\n      .then((data) => setContent(data));\n  };\n\n  const renderRandomComponent = () => {\n    switch (randomType) {\n      case content_type.IMAGE: {\n        return content !== undefined ? (\n          <img src={URL.createObjectURL(content)} alt=\"Random image\" />\n        ) : (\n          <Fragment />\n        );\n      }\n      default: {\n        return <Fragment />;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Typography variant=\"body1\">Overview of your random component</Typography>\n      {renderRandomComponent()}\n      <Button onClick={getPreviousContent}>Previous Content</Button>\n      <Button onClick={getNextContent}>Next Content</Button>\n    </div>\n  );\n}\n\n/*   NOTE: the new RandomGallery uses static files in the Express server, which are\n *   served as simple links like \"http://localhost:9000/image/0_01.png\" */\n\nfunction RandomGallery({ randomType }) {\n  const classes = useStyles();\n  const [content, setContent] = useState(undefined);\n  const [contentIndex, setContentIndex] = useState(0);\n  const [contentList, setContentList] = useState([]);\n\n  useEffect(() => {\n    if (content === undefined) {\n      getFirstContent();\n    }\n  }, []);\n\n  const getFirstContent = () => {\n    // TODO generalize for any type of content\n    if (randomType === content_type.IMAGE) {\n      let imageList;\n      fetch(\"http://localhost:9000/newGetImageList\")\n        .then((response) => response.json())\n        .then((data) => {\n          setContentList(data);\n          imageList = data;\n          setContent(imagePath + data[0]);\n        });\n    }\n    if (randomType === content_type.TEXT) {\n      let textList;\n      fetch(\"http://localhost:9000/getTextList\")\n        .then((response) => response.json())\n        .then((data) => {\n          setContentList(data);\n          setContent(data[0]);\n          textList = data;\n        });\n    }\n  };\n\n  const getPreviousContent = () => {\n    let newIndex;\n    if (contentIndex !== 0) {\n      console.log(\"Content index is not zero\");\n      newIndex = contentIndex - 1;\n      setContentIndex(contentIndex - 1);\n    } else {\n      console.log(\"Content index is zero\");\n      newIndex = contentList.length - 1;\n      setContentIndex(contentList.length - 1);\n    }\n    console.log(\"The new index is\", newIndex);\n    switch (randomType) {\n      case content_type.IMAGE:\n        setContent(imagePath + contentList[newIndex]);\n        break;\n      case content_type.TEXT:\n        setContent(contentList[newIndex]);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const getNextContent = () => {\n    let newIndex;\n    if (contentIndex !== contentList.length - 1) {\n      newIndex = contentIndex + 1;\n      setContentIndex(contentIndex + 1);\n    } else {\n      newIndex = 0;\n      setContentIndex(0);\n    }\n    switch (randomType) {\n      case content_type.IMAGE:\n        setContent(imagePath + contentList[newIndex]);\n        break;\n      case content_type.TEXT:\n        setContent(contentList[newIndex]);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const renderRandomComponent = () => {\n    switch (randomType) {\n      case content_type.IMAGE: {\n        return content !== undefined ? (\n          <img\n            src={content}\n            alt=\"Random image\"\n            className={classes.randomImage}\n          />\n        ) : (\n          <Fragment />\n        );\n      }\n      case content_type.TEXT: {\n        return content !== undefined ? (\n          <Typography className={classes.textContent} variant=\"body2\">\n            {content}\n          </Typography>\n        ) : (\n          <Fragment />\n        );\n      }\n      default: {\n        return <Fragment />;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Typography variant=\"body1\">Overview of your random component</Typography>\n      {renderRandomComponent()}\n      <Button onClick={getPreviousContent}>Previous Content</Button>\n      <Button onClick={getNextContent}>Next Content</Button>\n    </div>\n  );\n}\n\nexport default RandomGallery;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\LinearScaleQuestion.js",["247","248"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { linearScaleQuestionStyle } from \"./editorStyles\";\nimport {\n  Typography,\n  Select,\n  MenuItem,\n  Box,\n  TextField,\n  Grid,\n  Switch,\n  FormControl,\n} from \"@material-ui/core\";\n//Context\nimport { NewSurveyDispatcherContext, action_types } from \"./NewSurveyContext\";\n\nconst useStyles = linearScaleQuestionStyle;\n\nfunction LinearScaleQuestion({\n  sectionIndex,\n  contentIndex,\n  minValue,\n  maxValue,\n  minValueLabel,\n  maxValueLabel,\n  continuousSwitch,\n  radioBtnSwitch,\n  horizontalSwitch,\n}) {\n  const classes = useStyles();\n  const dispatch = useContext(NewSurveyDispatcherContext);\n\n  useEffect(() => {\n    /* INITIAL VALUES:\n    minValue: 1,\n    maxValue: 5,\n    minValueLabel: \"\",\n    maxValueLabel: \"\", */\n    if (minValue === undefined) {\n      const updates = {\n        minValue: 1,\n        maxValue: 5,\n        minValueLabel: \"\",\n        maxValueLabel: \"\",\n        continuousSwitch: false,\n        radioBtnSwitch: false,\n        horizontalSwitch: false,\n      };\n      dispatch({\n        type: action_types.UPDATE_CONTENT,\n        payload: {\n          sectionIndex: sectionIndex,\n          contentIndex: contentIndex,\n          updates,\n        },\n      });\n    }\n  }, []);\n\n  const onChangeMinValue = (e) => {\n    const updates = {\n      minValue: e.target.value,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeMaxValue = (e) => {\n    const updates = {\n      maxValue: e.target.value,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeMinValueLabel = (e) => {\n    const updates = {\n      minValueLabel: e.target.value,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeMaxValueLabel = (e) => {\n    const updates = {\n      maxValueLabel: e.target.value,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeContinuousSwitch = () => {\n    const updates = {\n      continuousSwitch: !continuousSwitch,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeRadioBtnSwitch = () => {\n    const updates = {\n      radioBtnSwitch: !radioBtnSwitch,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeHorizontalSwitch = () => {\n    const updates = {\n      horizontalSwitch: !horizontalSwitch,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  return (\n    <div className={classes.fieldContainer}>\n      <Box component=\"div\" className={classes.rangeSelectContainer}>\n        <Typography variant=\"body1\" className={classes.rangeSelectItem}>\n          Da{\" \"}\n        </Typography>\n        <FormControl className={classes.rangeSelectItem}>\n          <Select\n            value={minValue !== undefined ? minValue : 0}\n            onChange={onChangeMinValue}\n          >\n            <MenuItem value={0}>0</MenuItem>\n            <MenuItem value={1}>1</MenuItem>\n          </Select>\n        </FormControl>\n        <Typography variant=\"body1\" className={classes.rangeSelectItem}>\n          {\" \"}\n          a{\" \"}\n        </Typography>\n        <FormControl className={classes.rangeSelectItem}>\n          <Select\n            value={maxValue !== undefined ? maxValue : 5}\n            onChange={onChangeMaxValue}\n          >\n            {[...Array(9).keys()].map((value) => (\n              <MenuItem value={value + 2} key={value}>\n                {value + 2}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Box>\n      {/* Grid container for labels - switches */}\n      <Box component=\"div\" className={classes.gridContainer}>\n        <Grid container alignItems=\"center\" className={classes.gridContainer}>\n          {/* Grid item for labels */}\n          <Grid item lg={6}>\n            <Box component=\"div\">\n              <FormControl className={classes.labelChangeContainer}>\n                <TextField\n                  label={\"Minimum value label\"}\n                  value={minValueLabel !== undefined ? minValueLabel : \"\"}\n                  className={classes.textField && classes.labelChangeItem}\n                  onChange={onChangeMinValueLabel}\n                />\n                <TextField\n                  label={\"Maximum value label\"}\n                  value={maxValueLabel !== undefined ? maxValueLabel : \"\"}\n                  className={classes.textField && classes.labelChangeItem}\n                  onChange={onChangeMaxValueLabel}\n                />\n              </FormControl>\n            </Box>\n          </Grid>\n          {/* Grid item for switches */}\n          <Grid item lg={6}>\n            <Box component=\"div\">\n              <Grid\n                component=\"label\"\n                container\n                alignItems=\"center\"\n                // justify=\"flex-end\"\n                justify=\"center\"\n                spacing={1}\n              >\n                <Grid item>\n                  <Typography>Continuous</Typography>\n                </Grid>\n                <Grid item>\n                  <Switch\n                    checked={\n                      continuousSwitch !== undefined ? continuousSwitch : false\n                    }\n                    onChange={onChangeContinuousSwitch}\n                    color=\"primary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <Typography>Discrete</Typography>\n                </Grid>\n              </Grid>\n              {/* {continuousSwitch === true ? (\n                \n              ) : null} */}\n              <Grid\n                component=\"label\"\n                container\n                alignItems=\"center\"\n                // justify=\"flex-end\"\n                justify=\"center\"\n                spacing={1}\n              >\n                <Grid item>\n                  <Typography>Slider</Typography>\n                </Grid>\n                <Grid item>\n                  <Switch\n                    checked={\n                      radioBtnSwitch !== undefined ? radioBtnSwitch : false\n                    }\n                    onChange={onChangeRadioBtnSwitch}\n                    disabled={continuousSwitch !== true}\n                    color=\"primary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <Typography>Radio buttons</Typography>\n                </Grid>\n              </Grid>\n              {/* {radioBtnSwitch === true ? (\n                \n              ) : null} */}\n              <Grid\n                component=\"label\"\n                container\n                alignItems=\"center\"\n                // justify=\"flex-end\"\n                justify=\"center\"\n                spacing={1}\n              >\n                <Grid item>\n                  <Typography>Horizontal ordering</Typography>\n                </Grid>\n                <Grid item>\n                  <Switch\n                    checked={\n                      horizontalSwitch !== undefined ? horizontalSwitch : false\n                    }\n                    onChange={onChangeHorizontalSwitch}\n                    disabled={radioBtnSwitch !== true}\n                    color=\"primary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <Typography>Vertical ordering</Typography>\n                </Grid>\n              </Grid>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </div>\n  );\n}\n\n// export default React.memo(LinearScaleQuestion);\nexport default LinearScaleQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\questionTypes.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\Page.js",["249","250","251"],"import React from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\nimport TextQuestion from \"./TextQuestion.js\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion.js\";\nimport RankingQuestion from \"./RankingQuestion.js\";\nimport LinearScaleQuestion from \"./LinearScaleQuestion.js\";\nimport TextField from \"./TextField\";\nimport Image from \"./Image.js\";\nimport CheckBoxQuestion from \"./CheckBoxQuestion\";\nconst useStyles = questionStyle;\n\nfunction Page(props) {\n  const classes = useStyles();\n\n  const contentSorter = (item, i) => {\n    switch (item.data.type) {\n      case \"Multiple Choice\":\n        return (\n          <MultipleChoiceQuestion\n            data={item.data}\n            contentIndex={i}\n            sectionIndex={props.sectionIndex}\n          />\n        );\n      case \"Short Text\":\n        return (\n          <TextQuestion\n            data={item.data}\n            contentIndex={i}\n            sectionIndex={props.sectionIndex}\n          />\n        );\n      case \"CheckBox\":\n        return (\n          <CheckBoxQuestion\n            data={item.data}\n            contentIndex={i}\n            sectionIndex={props.sectionIndex}\n          />\n        );\n      case \"Linear Scale\":\n        return (\n          <LinearScaleQuestion\n            data={item.data}\n            contentIndex={i}\n            sectionIndex={props.sectionIndex}\n          />\n        );\n      case \"Ranking\":\n        return (\n          <RankingQuestion\n            data={item.data}\n            contentIndex={i}\n            sectionIndex={props.sectionIndex}\n          />\n        );\n    }\n    switch (item.type) {\n      case \"Image\":\n        return <Image data={item.data} />;\n      case \"Text\":\n        return <TextField data={item.data} />;\n    }\n  };\n\n  return (\n    <div>\n      {props.contents.map((s, i) => {\n        return <div key={s.contentId + i}>{contentSorter(s, i)}</div>;\n      })}\n    </div>\n  );\n}\n\nexport default Page;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\RandomNamesContext.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\Image.js",["252","253","254"],"import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport { Box } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport RandomNamesContext from \"./RandomNamesContext\";\n\nconst useStyles = questionStyle;\n\nconst imagePath = \"http://localhost:9000/images/\";\n\nfunction Image(props) {\n  const classes = useStyles();\n  const [image, setImage] = useState(\"\");\n  const randomNames = useContext(RandomNamesContext);\n\n  /*  Old useEffect with http request for random image. */\n  /*useEffect(() => {\n    let tempGeneratedNumber = undefined;\n    if (props.data.randomStatus) {\n      randomNames.forEach((r) => {\n        if (r.randomName === props.data.randomName) {\n          tempGeneratedNumber = r.generatedNumber;\n        }\n      });\n      if (tempGeneratedNumber === undefined) return;\n      let imgPath = new URL(\"http://localhost:9000/getRandomImage\");\n      imgPath.search = new URLSearchParams({\n        imageName: tempGeneratedNumber,\n        folder: \"question\",\n      });\n      fetch(imgPath)\n        .then((response) => response.blob())\n        .then((data) => {\n          setImage(URL.createObjectURL(data));\n        });\n    } else {\n      setImage(URL.createObjectURL(props.data.img));\n    }\n  }, [randomNames]);*/\n\n  /*  New useEffect with static images. */\n  useEffect(() => {\n    let tempGeneratedNumber = undefined;\n    if (props.data.randomStatus) {\n      randomNames.forEach((r) => {\n        if (r.randomName === props.data.randomName) {\n          tempGeneratedNumber = r.generatedNumber;\n        }\n      });\n      if (tempGeneratedNumber === undefined) return;\n      let imgPath = new URL(\"http://localhost:9000/newGetRandomImage\");\n      imgPath.search = new URLSearchParams({\n        imageName: tempGeneratedNumber,\n      });\n      fetch(imgPath)\n        .then((response) => response.json())\n        .then((data) => {\n          setImage(imagePath + data.image);\n        });\n    } else {\n      setImage(URL.createObjectURL(props.data.img));\n    }\n    //}\n  }, [randomNames]);\n\n  return (\n    <div>\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\n        <Grid>\n          <Paper\n            variant=\"outlined\"\n            width={400}\n            component=\"div\"\n            className={classes.wrapper}\n          >\n            {props.data.title && (\n              <Box align=\"left\" className={classes.titleContainer}>\n                {props.data.title}\n              </Box>\n            )}\n            <div className={classes.singleImageContainer}>\n              <img\n                src={image}\n                width=\"200px\"\n                height=\"200px\"\n                alt=\"Random image\"\n              />\n            </div>\n          </Paper>\n        </Grid>\n      </Typography>\n    </div>\n  );\n}\n\nexport default Image;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\LinearScaleQuestion.js",["255","256"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport {\n  Box,\n  Container,\n  FormControlLabel,\n  Typography,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n  FormControl,\n  Slider,\n} from \"@material-ui/core\";\n\nimport DataCollectorContext from \"./DataCollectorContext\";\n\nconst useStyles = questionStyle;\n\nfunction LinearScaleQuestion(props) {\n  const classes = useStyles();\n  const [linearScaleSelectedValue, setLinearScaleSelectedValue] = useState(\"\");\n  const [sliderValue, setSliderValue] = useState(0);\n\n  const [answer, setAnswer] = useState([]);\n  const updateAnswer = useContext(DataCollectorContext);\n\n  // Linear scale new features\n  const { continuousSwitch, radioBtnSwitch, horizontalSwitch } = props.data;\n\n  const saveAnswer = (answer) => (e) => {\n    console.log(\"LINEAR ANSW: \", answer);\n    setAnswer(answer);\n    updateAnswer(props.sectionIndex, props.contentIndex, answer);\n  };\n\n  /*---GESTIONE DELLA SELEZIONE NELLA LINEAR SCALE---*/\n  const handleLinearScaleChange = (e) => {\n    setLinearScaleSelectedValue(e.target.value);\n  };\n\n  const handleSlider = (e, newValue) => {\n    setSliderValue(newValue);\n    updateAnswer(props.sectionIndex, props.contentIndex, newValue);\n  };\n\n  const renderSlider = (continuous) => {\n    const marks = [\n      {\n        value: Number(props.data.minValue),\n        label: props.data.minValueLabel,\n      },\n      {\n        value: Number(props.data.maxValue),\n        label: props.data.maxValueLabel,\n      },\n    ];\n\n    return (\n      <Container>\n        <Box component=\"div\" className={classes.linearScaleSliderContainer}>\n          <Slider\n            value={sliderValue}\n            onChange={handleSlider}\n            step={continuous === true ? 0.001 : 1}\n            min={Number(props.data.minValue)}\n            max={Number(props.data.maxValue)}\n            marks={marks}\n            /*classes={{\n              root: classes.linearScaleSliderRoot,\n            }}*/\n          />\n        </Box>\n        <Box component=\"div\">\n          <Typography>The value is: {sliderValue}</Typography>\n        </Box>\n      </Container>\n    );\n  };\n\n  /*  TODO: check if correct cause not made by me */\n  const renderHorizontalRadioButtons = () => {\n    return (\n      <Box display=\"flex\" flexdirection=\"row\">\n        <Box className={classes.labelContainer}>{props.data.minValueLabel}</Box>\n\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"gender\"\n            name=\"LinearScale\"\n            value={linearScaleSelectedValue}\n            onChange={handleLinearScaleChange}\n          >\n            {/*Creazione del range della LinearScale dati minValue e maxValue*/}\n            {\n              //Number converte una stringa in un numero\n              [\n                ...Array(\n                  Number(props.data.maxValue) + 1 - Number(props.data.minValue)\n                ).keys(),\n              ].map((s, i) => {\n                return (\n                  <FormControlLabel\n                    value={Number(props.data.minValue) + i}\n                    control={\n                      <Radio\n                        onChange={saveAnswer(s + 1)}\n                        checked={\n                          linearScaleSelectedValue ===\n                          (Number(props.data.minValue) + i).toString()\n                        }\n                        color=\"primary\"\n                      />\n                    }\n                    label={Number(props.data.minValue) + i}\n                    labelPlacement=\"top\"\n                    key={s}\n                    className={classes.linearScaleRadioField}\n                  />\n                );\n              })\n            }\n          </RadioGroup>\n        </FormControl>\n        <Box className={classes.labelContainer}>{props.data.maxValueLabel}</Box>\n      </Box>\n    );\n  };\n\n  const renderVerticalRadioButtons = () => {\n    return (\n      <Box align=\"left\" className={classes.titleContainer}>\n        <Box marginBottom={\"10px\"}>{props.data.minValueLabel}</Box>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            name=\"LinearScale\"\n            value={linearScaleSelectedValue}\n            onChange={handleLinearScaleChange}\n          >\n            {[\n              ...Array(\n                Number(props.data.maxValue) + 1 - Number(props.data.minValue)\n              ).keys(),\n            ].map((s, i) => {\n              return (\n                <FormControlLabel\n                  value={Number(props.data.minValue) + i}\n                  control={\n                    <Radio\n                      onChange={saveAnswer(s + 1)}\n                      checked={\n                        linearScaleSelectedValue ===\n                        (Number(props.data.minValue) + i).toString()\n                      }\n                      color=\"primary\"\n                    />\n                  }\n                  label={Number(props.data.minValue) + i}\n                  key={s}\n                />\n              );\n            })}\n          </RadioGroup>\n        </FormControl>\n        <Box marginTop={\"10px\"}>{props.data.maxValueLabel}</Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\n      <Grid>\n        <Paper\n          variant=\"outlined\"\n          width={400}\n          component=\"div\"\n          className={classes.wrapper}\n        >\n          <Box align=\"left\" className={classes.titleContainer}>\n            {props.data.title}\n          </Box>\n          <Box align=\"left\" className={classes.descriptionContainer}>\n            {props.data.description}\n          </Box>\n\n          {(continuousSwitch === false || continuousSwitch === undefined) &&\n            renderSlider(true)}\n\n          {continuousSwitch === true &&\n            (radioBtnSwitch === false || radioBtnSwitch === undefined) &&\n            renderSlider(false)}\n\n          {radioBtnSwitch === true &&\n            (horizontalSwitch === false || horizontalSwitch === undefined) &&\n            renderHorizontalRadioButtons()}\n\n          {horizontalSwitch === true && renderVerticalRadioButtons()}\n        </Paper>\n      </Grid>\n    </Typography>\n  );\n}\n\nexport default LinearScaleQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\RankingQuestion.js",["257"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport { Box, Card, CardContent } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\nimport DataCollectorContext from \"./DataCollectorContext\";\n\nconst useStyles = questionStyle;\n\nfunction RankingQuestion(props) {\n  const classes = useStyles();\n  const updateAnswer = useContext(DataCollectorContext);\n  const [choices, setChoices] = useState(props.data.choices);\n\n  useEffect(() => {\n    // Sends the answers with their initial state\n    console.log(\"Update answer ranking question running\");\n    updateAnswer(props.sectionIndex, props.contentIndex, props.data.choices);\n  }, []);\n\n  return (\n    <Typography component={\"span\"}>\n      {console.log(\"Running return for Ranking\")}\n      <Grid>\n        <Paper\n          variant=\"outlined\"\n          width={400}\n          component=\"div\"\n          className={classes.wrapper}\n        >\n          <div>\n            <Box align=\"left\" className={classes.titleContainer}>\n              {props.data.title}\n            </Box>\n\n            <Box align=\"left\" className={classes.elementContainer}>\n              {props.data.description}\n            </Box>\n\n            <DragDropContext\n              onDragEnd={(param) => {\n                //Indici dei due elementi da scambiare\n                const srcIndex = param.source.index;\n                const destIndex = param.destination?.index;\n\n                let newList = [...choices]; //Copia dell'array di scelte da ordinare\n                const [reorderList] = newList.splice(srcIndex, 1); //si rimuove l'indice sorgente dal nuovo array\n                newList.splice(destIndex, 0, reorderList); //si riaggiunge l'indice nell'array nella nuova posizione\n                setChoices(newList);\n                updateAnswer(props.sectionIndex, props.contentIndex, newList);\n              }}\n            >\n              <Droppable droppableId=\"1\">\n                {(provided, _) => (\n                  <div\n                    className={classes.rankingContainer}\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                  >\n                    {choices.map((item, i) => (\n                      <Draggable\n                        key={\"draggable-\" + item.id}\n                        index={i}\n                        draggableId={\"draggable-\" + item.id}\n                      >\n                        {(provided, snapshot) => (\n                          <Card\n                            className={classes.dragndropItem}\n                            ref={provided.innerRef}\n                            {...provided.dragHandleProps}\n                            {...provided.draggableProps}\n                          >\n                            <CardContent>\n                              <DragHandleIcon\n                                className={classes.dragHandleIcon}\n                              />\n                              <div className={classes.rankingCardContent}>\n                                {item.value}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          </div>\n        </Paper>\n      </Grid>\n    </Typography>\n  );\n}\n\nexport default RankingQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\MultipleChoiceQuestion.js",["258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"./viewStyles.js\";\r\n// Importing Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Menu,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport DataCollectorContext from \"./DataCollectorContext\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\n/*BUG: se in due domande diversele possibili risposte\r\ndei radio button sono uguali, allora quando si sceglie la risposta in una domanda, verrà in automatico\r\nselezionata anche nell'altra.*/\r\n\r\nfunction MultipleChoiceQuestion(props) {\r\n  const classes = useStyles();\r\n  let tempAnswer = [];\r\n  const [answer, setAnswer] = useState([]);\r\n  const updateAnswer = useContext(DataCollectorContext);\r\n\r\n  //Salva la risposta data\r\n  const saveAnswer = (answer) => (e) => {\r\n    setAnswer(answer);\r\n    updateAnswer(props.sectionIndex, props.contentIndex, answer);\r\n  };\r\n\r\n  return (\r\n    <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n      <Grid>\r\n        <Paper\r\n          variant=\"outlined\"\r\n          width={400}\r\n          component=\"div\"\r\n          className={classes.wrapper}\r\n        >\r\n          <Box align=\"left\" className={classes.titleContainer}>\r\n            {props.data.title}\r\n          </Box>\r\n\r\n          {props.data.images && (\r\n            <Grid className={classes.grid} container spacing={3}>\r\n              <Grid item>\r\n                {/*Se l'array non è vuoto, allora lo scorre*/}\r\n                {props.data.images.map((img) => (\r\n                  <Paper\r\n                    variant=\"outlined\"\r\n                    className={classes.imagePaperContainer}\r\n                    key={props.data}\r\n                  >\r\n                    {/*loadImage(img) - NON STA PASSANDO LE IMMAGINI STATICHE*/}\r\n                    <img src={props.data.images} width=\"200px\" height=\"200px\" />\r\n                  </Paper>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          <div className={classes.spacer}>\r\n            <RadioGroup name=\"RadioGroup\">\r\n              {props.data.choices.map((s) => (\r\n                <Box\r\n                  align=\"left\"\r\n                  className={classes.choicesContainer}\r\n                  key={s.value}\r\n                >\r\n                  <FormControlLabel\r\n                    value={s.value}\r\n                    control={\r\n                      <Radio color=\"primary\" onChange={saveAnswer(s.value)} />\r\n                    }\r\n                    label={s.value}\r\n                  />\r\n                </Box>\r\n              ))}\r\n            </RadioGroup>\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default MultipleChoiceQuestion;\r\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\TextQuestion.js",["284","285"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport { Box } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport DataCollectorContext from \"./DataCollectorContext\";\n\nconst useStyles = questionStyle;\n\nfunction TextQuestion(props) {\n  const classes = useStyles();\n  const [answer, setAnswer] = useState([]);\n  const updateAnswer = useContext(DataCollectorContext);\n\n  const saveAnswer = (e) => {\n    setAnswer(e.target.value);\n    updateAnswer(props.sectionIndex, props.contentIndex, e.target.value);\n  };\n\n  return (\n    <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\n      <Grid>\n        <Paper\n          variant=\"outlined\"\n          width={400}\n          component=\"div\"\n          className={classes.wrapper}\n        >\n          <Box align=\"left\" className={classes.titleContainer}>\n            {props.data.title}\n          </Box>\n          <Box align=\"left\" className={classes.elementContainer}>\n            {props.data.description}\n          </Box>\n\n          <form autoComplete=\"off\">\n            <TextField\n              className={classes.textField}\n              id=\"standard-textarea\"\n              label=\"Type here your answer\"\n              placeholder=\"Placeholder\"\n              multiline\n              rowsMax={3}\n              onChange={saveAnswer}\n            />\n          </form>\n        </Paper>\n      </Grid>\n    </Typography>\n  );\n}\n\nexport default TextQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\DataCollectorContext.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\TextField.js",["286","287"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\nimport RandomNamesContext from \"./RandomNamesContext\";\nimport { Box, Typography, Grid, Paper } from \"@material-ui/core\";\n\nconst useStyles = questionStyle;\n\nfunction TextField(props) {\n  const classes = useStyles();\n  const [text, setText] = useState();\n  const randomNames = useContext(RandomNamesContext);\n\n  useEffect(() => {\n    let tempGeneratedNumber = undefined;\n    if (props.data.randomStatus) {\n      randomNames.forEach((r) => {\n        if (r.randomName === props.data.randomName) {\n          tempGeneratedNumber = r.generatedNumber;\n        }\n      });\n      if (tempGeneratedNumber === undefined) return;\n      let imgPath = new URL(\"http://localhost:9000/getRandomText\");\n      imgPath.search = new URLSearchParams({\n        textName: tempGeneratedNumber,\n      });\n      fetch(imgPath)\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(\"The resulting text is \", data);\n          setText(data);\n        });\n    } else {\n      setText(props.data.description);\n    }\n  }, [randomNames]);\n\n  return (\n    <div>\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\n        <Grid>\n          <Paper\n            variant=\"outlined\"\n            width={400}\n            component=\"div\"\n            className={classes.wrapper}\n          >\n            <Box align=\"left\" className={classes.titleContainer}>\n              {props.data.title}\n            </Box>\n            {/* Create the class descriptionContainer (or change its name) into the style file */}\n            <Box\n              align=\"left\"\n              className={classes.descriptionContainer}\n              className={classes.elementContainer}\n            >\n              {text}\n            </Box>\n          </Paper>\n        </Grid>\n      </Typography>\n    </div>\n  );\n}\n\nexport default TextField;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\AnswersSummary.js",["288","289","290"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport { Box } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = questionStyle;\n\nfunction AnswerSummary(props) {\n  const classes = useStyles();\n  //prende correttamente i props\n  console.log(\"RISPOSTE: \", props.answers);\n  console.log(\"JSON: \", props.jsonData);\n  let tempPreparedAnswers = [];\n  let tempPreparedQuestions = [];\n\n  console.log(\"PROPS: \", props.answers);\n\n  const prepareAnswers = () => {\n    let tempRanking = \"\";\n    console.log(\"Prepare answer, props answers is : \", props.answers);\n\n    props.answers.forEach((item) =>\n      item.forEach((s, i) =>\n        s.answer === null\n          ? tempPreparedAnswers.push(\"NON È STATA FORNITA UNA RISPOSTA\")\n          : Array.isArray(s.answer)\n          ? s.answer.map((r) => (tempRanking = tempRanking + \" \" + r.value)) &&\n            tempPreparedAnswers.push(tempRanking) &&\n            tempRanking.length > 0\n            ? (tempRanking = \"\")\n            : \"\" //Da migliorare. Soluzione per non far stampare tutte le risposte di rank e checkbox assieme\n          : s.contentType !== \"Image\" &&\n            s.contentType !== \"Text\" &&\n            s.contentType !== \"Random Number\"\n          ? tempPreparedAnswers.push(s.answer)\n          : s.contentType === \"Image\" || s.contentType === \"Text\"\n          ? tempPreparedAnswers.push(s)\n          : \"\"\n      )\n    );\n    console.log(\"Prepare answer, tempPrepareAnswer is : \", tempPreparedAnswers);\n  };\n\n  const prepareQuestions = () => {\n    props.jsonData.pages.map((item) =>\n      item.contents.map((s) =>\n        s.type !== \"Image\" && s.type !== \"Random Number\"\n          ? tempPreparedQuestions.push(s.data.title)\n          : s.type === \"Image\" || s.type === \"Text\"\n          ? tempPreparedQuestions.push(s.data.title)\n          : \"\"\n      )\n    );\n  };\n\n  const renderAnswersSummaryHeader = () => {\n    return (\n      <Typography component=\"div\" color=\"textPrimary\" align=\"center\">\n        <Grid>\n          <Paper\n            variant=\"outlined\"\n            width={400}\n            component=\"div\"\n            className={classes.wrapper}\n          >\n            <Box\n              fontWeight={500}\n              align=\"left\"\n              className={classes.questionnaireTitleContainer}\n            >\n              Answers Summary\n            </Box>\n            <Box align=\"left\" className={classes.elementContainer}>\n              Here you can view your answers\n            </Box>\n          </Paper>\n        </Grid>\n      </Typography>\n    );\n  };\n\n  return (\n    <div>\n      {prepareQuestions()}\n      {prepareAnswers()}\n      {renderAnswersSummaryHeader()}\n      {tempPreparedAnswers.map((q, i) => (\n        <div key={tempPreparedQuestions.id}>\n          <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\n            <Grid>\n              <Paper\n                variant=\"outlined\"\n                width={400}\n                component=\"div\"\n                className={classes.wrapper}\n              >\n                <Box\n                  fontWeight={500}\n                  align=\"left\"\n                  className={classes.titleContainer}\n                >\n                  {tempPreparedQuestions[i]}\n                </Box>\n                <Box align=\"left\" className={classes.titleContainer}>\n                  {console.log(q)}\n                  {typeof q === \"object\" &&\n                  q !== null &&\n                  q.contentType === \"Image\"\n                    ? q.randomValue\n                      ? \"È stata mostrata all'utente un'immagine con valore: \" +\n                        q.randomValue\n                      : \"\"\n                    : typeof q === \"object\" &&\n                      q !== null &&\n                      q.contentType === \"Text\"\n                    ? q.randomValue\n                      ? \"È stato mostrato all'utente un testo associato al valore : \" +\n                        q.randomValue\n                      : \"\"\n                    : q}\n                </Box>\n              </Paper>\n            </Grid>\n          </Typography>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default AnswerSummary;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\CheckBoxQuestion.js",["291","292"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { questionStyle } from \"./viewStyles.js\";\n// Importing Material\nimport {\n  Box,\n  FormControlLabel,\n  Typography,\n  Grid,\n  Paper,\n  Checkbox,\n} from \"@material-ui/core\";\nimport DataCollectorContext from \"./DataCollectorContext\";\n\nconst useStyles = questionStyle;\n\n/*BUG: se in due domande diversele possibili risposte\ndei radio button sono uguali, allora quando si sceglie la risposta in una domanda, verrà in automatico\nselezionata anche nell'altra.*/\n\nfunction CheckBoxQuestion(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = useState([]);\n  const updateAnswer = useContext(DataCollectorContext);\n\n  const calculateArray = (newChecked) => {\n    const choices = props.data.choices;\n    let checkedArray = [];\n    choices.forEach((choice, ix) => {\n      if (newChecked[ix] === true) checkedArray.push(choice);\n    });\n    return checkedArray;\n  };\n\n  //Salva la risposta data\n  const changeChecked = (choiceIndex) => {\n    console.log(\"The checked state in checkbox is :\", checked);\n    let newChecked = [...checked];\n    newChecked[choiceIndex] = !newChecked[choiceIndex];\n    setChecked(newChecked);\n    let answerArray = calculateArray(newChecked);\n    console.log(\"Checkbx answer array is: \", answerArray);\n    updateAnswer(props.sectionIndex, props.contentIndex, answerArray);\n  };\n\n  useEffect(() => {\n    console.log(\"UseEffect on CheckBox\");\n    let initialChecked = [];\n    let objKeys = [...props.data.choices.keys()];\n    objKeys.forEach((key) => {\n      initialChecked.push(false);\n    });\n    setChecked(initialChecked);\n    let answerArray = calculateArray(initialChecked);\n    console.log(\"Checkbx answer array is: \", answerArray);\n    updateAnswer(props.sectionIndex, props.contentIndex, answerArray);\n  }, []);\n\n  return (\n    <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\n      <Grid>\n        <Paper\n          variant=\"outlined\"\n          width={400}\n          component=\"div\"\n          className={classes.wrapper}\n        >\n          <Box align=\"left\" className={classes.titleContainer}>\n            {props.data.title}\n          </Box>\n\n          <Box align=\"left\" className={classes.elementContainer}>\n            {props.data.description}\n          </Box>\n\n          {props.data.images && (\n            <Grid className={classes.grid} container spacing={3}>\n              <Grid item>\n                {/*Se l'array non è vuoto, allora lo scorre*/}\n                {props.data.images.map((img) => (\n                  <Paper\n                    variant=\"outlined\"\n                    className={classes.imagePaperContainer}\n                    key={props.data}\n                  >\n                    {/*loadImage(img) - NON STA PASSANDO LE IMMAGINI STATICHE*/}\n                    <img src={props.data.images} width=\"200px\" height=\"200px\" />\n                  </Paper>\n                ))}\n              </Grid>\n            </Grid>\n          )}\n          <div className={classes.spacer}>\n            {props.data.choices.map((s, choiceIndex) => (\n              <Box\n                align=\"left\"\n                className={classes.choicesContainer}\n                key={s.value}\n              >\n                <FormControlLabel\n                  value={s.value}\n                  control={\n                    <Checkbox\n                      checked={\n                        typeof checked[choiceIndex] === \"boolean\"\n                          ? checked[choiceIndex]\n                          : false\n                      }\n                      color=\"primary\"\n                      onChange={() => changeChecked(choiceIndex)}\n                    />\n                  }\n                  label={s.value}\n                />\n              </Box>\n            ))}\n          </div>\n        </Paper>\n      </Grid>\n    </Typography>\n  );\n}\n\nexport default CheckBoxQuestion;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\stateReducer.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\App2.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\StateProvider.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\MainPage.js",["293"],"import React, { useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Grid,\n  IconButton,\n  Menu,\n  MenuItem,\n  Typography,\n} from \"@material-ui/core\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport { mainPageStyle } from \"./editor/editorStyles\";\n\n// React Router\nimport { Link } from \"react-router-dom\";\n\n// App Context\nimport { useStateValue } from \"../StateProvider\";\nimport { actionTypes } from \"../stateReducer\";\n\nconst useStyles = mainPageStyle;\n\nfunction MainPage() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const classes = useStyles();\n\n  // App Context\n  const [{ surveys, templates, selectedSurvey }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    /*fetch(\"http://localhost:9000/getTemplates\")\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch({ type: actionTypes.SET_TEMPLATES, templates: data });\n      });\n    fetch(\"http://localhost:9000/getSurveys\")\n      .then((response) => response.json())\n      .then((data) =>\n        dispatch({ type: actionTypes.SET_SURVEYS, surveys: data })\n      );*/\n  }, [templates]);\n\n  /* Menu anchor functions */\n\n  const onSurveyMenuOpen = (event, survey) => {\n    console.log(\"Opening menu for survey: \", survey);\n    dispatch({\n      type: actionTypes.SELECT_SURVEY,\n      survey: { survey: survey, useTemplate: false },\n    });\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    dispatch({ type: actionTypes.SELECT_SURVEY, survey: null });\n    setAnchorEl(null);\n  };\n\n  /* Click functions */\n\n  const onCreateSurvey = () => {\n    dispatch({\n      type: actionTypes.SELECT_SURVEY,\n      survey: { survey: null, useTemplate: false },\n    });\n  };\n\n  const onUseTemplate = (survey) => {\n    /*  This line creates a new object that contains all the values from the parameter\n        obj. If I don't do this, both the new survey and the old one are changed. */\n    const tempSurvey = JSON.parse(JSON.stringify(survey));\n    dispatch({\n      type: actionTypes.SELECT_SURVEY,\n      survey: { survey: tempSurvey, useTemplate: true },\n    });\n  };\n\n  const onViewSurvey = (survey) => {\n    dispatch({\n      type: actionTypes.SELECT_SURVEY,\n      survey: { survey: survey, useTemplate: false },\n    });\n  };\n\n  const onEditSurvey = (survey) => {\n    /*  This line creates a new object that contains all the values from the parameter\n        obj. If I don't do this, both the new survey and the old one are changed. */\n    dispatch({\n      type: actionTypes.SELECT_SURVEY,\n      survey: { survey: survey, useTemplate: false },\n    });\n  };\n\n  const onDeleteSurvey = () => {\n    console.log(\"Deleting survey: \", selectedSurvey.survey);\n    setAnchorEl(null);\n\n    if (selectedSurvey.survey.isTemplate) {\n      dispatch({\n        type: actionTypes.DELETE_TEMPLATE,\n        id: selectedSurvey.survey.id,\n      });\n      fetch(\"http://localhost:9000/deleteTemplate\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(selectedSurvey.survey),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.status !== \"saved\") {\n            console.error(\"FAILED TO DELETE THE SURVEY\");\n          } else {\n            console.log(\"DELETED!!!!\");\n          }\n        });\n    } else {\n      dispatch({\n        type: actionTypes.DELETE_SURVEY,\n        id: selectedSurvey.survey.id,\n      });\n      fetch(\"http://localhost:9000/deleteSurvey\", {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(selectedSurvey.survey),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.status !== \"saved\") {\n            console.error(\"FAILED TO DELETE THE SURVEY\");\n          } else {\n            console.log(\"DELETED!!!!\");\n          }\n        });\n    }\n  };\n\n  console.log(\"The templates are: \", templates);\n\n  /* Render functions */\n\n  const displaySurveys = (surveysPar, isTemplate) => {\n    return surveysPar.map((survey, index) => {\n      return (\n        <Grid\n          item\n          key={survey.id !== undefined ? survey.id : \"survey-\" + index}\n        >\n          <Card className={classes.cardRoot} variant=\"outlined\">\n            <CardContent className={classes.cardContent}>\n              <Typography variant=\"h6\" className={classes.cardTitle}>\n                {survey.title}\n              </Typography>\n            </CardContent>\n            <CardActions className={classes.cardActions}>\n              <Link to=\"/createSurvey\">\n                <Button\n                  variant=\"text\"\n                  color=\"default\"\n                  size=\"small\"\n                  onClick={() => {\n                    onEditSurvey(survey);\n                  }}\n                >\n                  Edit\n                </Button>\n              </Link>\n              {isTemplate === false ? (\n                <Link to=\"/viewSurvey\">\n                  <Button\n                    variant=\"text\"\n                    color=\"default\"\n                    size=\"small\"\n                    onClick={() => {\n                      onViewSurvey(survey);\n                    }}\n                  >\n                    Open\n                  </Button>\n                </Link>\n              ) : (\n                <Link to=\"/createSurvey\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"default\"\n                    size=\"small\"\n                    onClick={() => {\n                      onUseTemplate(survey);\n                    }}\n                  >\n                    Use\n                  </Button>\n                </Link>\n              )}\n\n              <IconButton\n                className={classes.moreButton}\n                onClick={(e) => {\n                  onSurveyMenuOpen(e, survey);\n                }}\n              >\n                <MoreIcon />\n              </IconButton>\n            </CardActions>\n          </Card>\n        </Grid>\n      );\n    });\n  };\n\n  const newDisplaySurveys = (surveysPar, isTemplate) => {\n    return surveysPar.map((survey, index) => {\n      return (\n        <Grid\n          item\n          key={survey.id !== undefined ? survey.id : \"survey-\" + index}\n        >\n          <Card className={classes.newCardRoot}>\n            <Link to={isTemplate === false ? \"/viewSurvey\" : \"/createSurvey\"}>\n              <CardActionArea\n                onClick={() => {\n                  isTemplate === false\n                    ? onViewSurvey(survey)\n                    : onUseTemplate(survey);\n                }}\n                className={classes.cardActionArea}\n              >\n                <CardMedia\n                  className={classes.cardMedia}\n                  image={\n                    isTemplate === false\n                      ? \"https://d1c2gz5q23tkk0.cloudfront.net/assets/uploads/3072103/asset/abd0e62e-4793-4221-86c1-3da766d0fe98-Survey2.jpg?1616766958\"\n                      : \"https://images.unsplash.com/photo-1560574188-6a6774965120?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Z2VhcnxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&w=1000&q=80\"\n                  }\n                />\n                <CardContent>\n                  <Typography\n                    gutterBottom\n                    variant=\"h5\"\n                    component=\"h2\"\n                    className={classes.cardText}\n                  >\n                    {survey.title}\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                    className={classes.ext}\n                  >\n                    {survey.description}\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Link>\n            <CardActions classes={{ root: classes.newCardActions }}>\n              <Box display=\"flex\" justifyContent=\"flex-start\">\n                <Link to=\"/createSurvey\">\n                  <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    onClick={() => {\n                      onEditSurvey(survey);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </Link>\n              </Box>\n              <Box display=\"flex\" flex={1} justifyContent=\"flex-end\">\n                <IconButton\n                  onClick={(e) => {\n                    onSurveyMenuOpen(e, survey);\n                  }}\n                >\n                  <MoreIcon />\n                </IconButton>\n              </Box>\n            </CardActions>\n          </Card>\n        </Grid>\n      );\n    });\n  };\n\n  console.log(\"Rendering MainPage.js\");\n\n  return (\n    <Box component=\"div\" className={classes.root}>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Typography variant=\"h4\" className={classes.surveyTitle}>\n          Your Surveys\n        </Typography>\n        <Grid item xs={10}>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            className={classes.cardDeck}\n            justify=\"space-evenly\"\n          >\n            {newDisplaySurveys(surveys, false)}\n          </Grid>\n        </Grid>\n        <Link to=\"/createSurvey\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.cardDeck}\n            onClick={onCreateSurvey}\n          >\n            Create new survey\n          </Button>\n        </Link>\n      </Grid>\n      {/* Templates */}\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Typography variant=\"h4\" className={classes.surveyTitle}>\n          Your Templates\n        </Typography>\n        <Grid item xs={10}>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            className={classes.cardDeck}\n            justify=\"space-evenly\"\n          >\n            {newDisplaySurveys(templates, true)}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Menu\n        id=\"menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleClose}>Rename</MenuItem>\n        <MenuItem onClick={onDeleteSurvey}>Delete</MenuItem>\n      </Menu>\n    </Box>\n  );\n}\n\nexport default MainPage;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\NavBar.js",["294"],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\contentTypes.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Page.js",["295","296"],"import React, { useContext } from \"react\";\nimport { Box, Grid } from \"@material-ui/core\";\nimport content_type from \"../contentTypes\";\nimport SectionManager from \"./SectionManager\";\nimport Content from \"./Content\";\nimport RandomizableContent from \"./RandomizableContent\";\nimport { pageStyle } from \"./editorStyles\";\nimport _ from \"lodash\";\n\nconst useStyles = pageStyle;\n\nfunction Page({ section, sectionIndex }) {\n  const classes = useStyles();\n\n  const renderContent = (pageContent) => {\n    return pageContent.map((cont, contentIndex) => {\n      switch (cont.type) {\n        case content_type.QUESTION:\n        case content_type.RANDOM_NUMBER:\n          return (\n            <Content\n              content={cont}\n              sectionIndex={sectionIndex}\n              contentIndex={contentIndex}\n              key={cont.contentId}\n            />\n          );\n        case content_type.IMAGE:\n        case content_type.TEXT:\n          return (\n            <RandomizableContent\n              content={cont}\n              sectionIndex={sectionIndex}\n              contentIndex={contentIndex}\n              key={cont.contentId}\n            />\n          );\n        default:\n          return null;\n      }\n    });\n  };\n\n  console.log(\"Rendering Page with section index: \", sectionIndex);\n\n  return (\n    <Grid item xs={8} sm={12} lg={12} xl={12} className={classes.cardItem}>\n      {renderContent(section.contents)}\n      <Box className={classes.sectionManagerContainer}>\n        <SectionManager id={section.pageId} sectionIndex={sectionIndex} />\n      </Box>\n    </Grid>\n  );\n}\n\nfunction compareProps(prevProps, nextProps) {\n  // console.log(\"Prevprops in Page is: \", prevProps);\n  // console.log(\"Nextprops in Page is: \", nextProps);\n  // console.log(\n  //   \"The isEqual on Page prop change is: \",\n  //   _.isEqual(prevProps, nextProps)\n  // );\n  return _.isEqual(prevProps, nextProps);\n}\n\n// export default React.memo(Page, compareProps);\nexport default Page;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\NewSurveyContext.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomizableContent.js",["297","298","299","300"],"import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  Divider,\n  Card,\n  CardContent,\n  CardActions,\n} from \"@material-ui/core\";\nimport contentTypes from \"../contentTypes\";\nimport { contentStyle } from \"./editorStyles\";\nimport Image from \"./Image\";\nimport Text from \"./Text\";\nimport ContentActions from \"./ContentActions\";\n\nconst useStyles = contentStyle;\n\nfunction RandomizableContent({ content, sectionIndex, contentIndex }) {\n  const classes = useStyles();\n  const { type: contentType, contentId, data } = content;\n  const { randomStatus } = data;\n\n  const renderContent = () => {\n    switch (contentType) {\n      case contentTypes.IMAGE:\n        return (\n          <Image\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            data={data}\n            id={contentId}\n          />\n        );\n      case contentTypes.TEXT:\n        return (\n          <Text\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            data={data}\n          />\n        );\n      default:\n        break;\n    }\n  };\n\n  console.log(\n    \"Rendering a Randomizable content, sx cx: \",\n    sectionIndex,\n    contentIndex\n  );\n\n  return (\n    <Box className={classes.pageContent}>\n      {contentIndex === 0 ? (\n        <Box component=\"div\" className={classes.sectionDecor}>\n          <Typography variant=\"body2\">Section {sectionIndex + 1}</Typography>\n        </Box>\n      ) : null}\n      <Card className={classes.innerCardItem}>\n        <CardContent>{renderContent()}</CardContent>\n        <Divider variant=\"middle\" />\n        <CardActions className={classes.cardActions}>\n          <ContentActions\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            type={contentType}\n            id={contentId}\n            randomStatus={randomStatus}\n          />\n        </CardActions>\n      </Card>\n    </Box>\n  );\n}\n\nexport default React.memo(RandomizableContent);\n// export default RandomizableContent;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Content.js",["301","302"],"import React, { useState, useContext } from \"react\";\nimport contentTypes from \"../contentTypes\";\nimport Question from \"./Question\";\nimport RandomNumber from \"./RandomNumber\";\nimport ContentActions from \"./ContentActions\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardActions,\n  Divider,\n  Typography,\n} from \"@material-ui/core\";\n// Style\nimport { contentStyle } from \"./editorStyles\";\nconst useStyles = contentStyle;\n\nfunction Content({ content, sectionIndex, contentIndex }) {\n  const classes = useStyles();\n  const { type: contentType, contentId, data } = content;\n  const { images, descStatus, isMandatory } = data;\n\n  const renderContent = () => {\n    switch (contentType) {\n      case contentTypes.QUESTION:\n        return (\n          <Question\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            data={data}\n          />\n        );\n      case contentTypes.RANDOM_NUMBER:\n        return (\n          <RandomNumber\n            data={data}\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n          />\n        );\n      default:\n        break;\n    }\n  };\n\n  console.log(\"Rendering Content sx cx: \", sectionIndex, contentIndex);\n\n  return (\n    <Box className={classes.pageContent}>\n      {contentIndex === 0 ? (\n        <Box component=\"div\" className={classes.sectionDecor}>\n          <Typography variant=\"body2\">Section {sectionIndex + 1}</Typography>\n        </Box>\n      ) : null}\n      <Card className={classes.innerCardItem}>\n        <CardContent>{renderContent()}</CardContent>\n        <Divider variant=\"middle\" />\n        <CardActions className={classes.cardActions}>\n          <ContentActions\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            images={images}\n            isMandatory={isMandatory}\n            descStatus={descStatus}\n            type={contentType}\n            id={contentId}\n          />\n        </CardActions>\n      </Card>\n    </Box>\n  );\n}\n\nexport default React.memo(Content);\n// export default Content;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\SectionManager.js",["303","304","305"],"import React, { useContext, Fragment } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport SectionManagerBtn from \"./SectionManagerBtn\";\nimport { surveyActionTypes } from \"./surveyActionTypes\";\nimport { sectionManagerStyle } from \"./editorStyles\";\nimport {\n  NewSurveyDispatcherContext,\n  SectionLengthContext,\n  action_types,\n} from \"./NewSurveyContext\";\nimport content_type from \"../contentTypes\";\nconst useStyles = sectionManagerStyle;\n\nfunction SectionManager({ id, sectionIndex }) {\n  const classes = useStyles();\n  const dispatch = useContext(NewSurveyDispatcherContext);\n  const sectionsLength = useContext(SectionLengthContext);\n\n  const addContent = (contentType) => {\n    const switchContent = (contentType) => {\n      switch (contentType) {\n        case content_type.QUESTION:\n          return {\n            type: content_type.QUESTION,\n            data: {},\n          };\n        case content_type.IMAGE:\n          return {\n            type: content_type.IMAGE,\n            data: {},\n          };\n        case content_type.TEXT:\n          return {\n            type: content_type.TEXT,\n            data: {},\n          };\n        case content_type.RANDOM_NUMBER: {\n          console.log(\"Adding a random number section manager\");\n          return {\n            type: content_type.RANDOM_NUMBER,\n            data: {},\n          };\n        }\n        default:\n          return {};\n      }\n    };\n    const newContent = switchContent(contentType);\n    dispatch({\n      type: action_types.ADD_CONTENT,\n      payload: { sectionIndex, newContent },\n    });\n  };\n\n  const addSection = () => {\n    dispatch({\n      type: action_types.ADD_PAGE,\n      payload: { sectionIndex },\n    });\n  };\n\n  const removeSection = () => {\n    dispatch({\n      type: action_types.REMOVE_PAGE,\n      payload: { sectionIndex },\n    });\n  };\n\n  /* VIDEO functions */\n\n  const onOpenEmbedVideoDialog = () => {\n    // setOpenDialog(true);\n  };\n\n  const onCloseEmbedVideoDialog = () => {\n    // setOpenDialog(false);\n  };\n\n  const onAddVideo = (url) => {\n    /* const newContentId = increaseContentCounter();\n    const newVideo = {\n      contentId: newContentId,\n      type: content_type.VIDEO,\n      data: { url: url },\n    };\n    addContent(newVideo); */\n  };\n\n  /* end VIDEO functions */\n\n  console.log(\"Rendering SectionManager sx: \", sectionIndex);\n\n  return (\n    <Box\n      display=\"flex\"\n      className={classes.manageSurveyBox}\n      height=\"auto\"\n      width=\"fit-content\"\n    >\n      <SectionManagerBtn\n        title=\"Add question\"\n        actionType={surveyActionTypes.QUESTION}\n        clickCallback={addContent}\n      />\n      <SectionManagerBtn\n        title=\"Add image\"\n        actionType={surveyActionTypes.IMAGE}\n        clickCallback={addContent}\n      />\n      <SectionManagerBtn\n        title=\"Add text field\"\n        actionType={surveyActionTypes.TEXT}\n        clickCallback={addContent}\n      />\n      <SectionManagerBtn\n        title=\"Add random number\"\n        actionType={surveyActionTypes.RANDOM_NUMBER}\n        clickCallback={addContent}\n      />\n      <SectionManagerBtn\n        title=\"Add section\"\n        actionType={surveyActionTypes.ADD_SECTION}\n        clickCallback={addSection}\n      />\n      {sectionsLength !== 1 ? (\n        <SectionManagerBtn\n          title=\"Remove section\"\n          actionType={surveyActionTypes.REMOVE_SECTION}\n          clickCallback={removeSection}\n        />\n      ) : (\n        <Fragment />\n      )}\n    </Box>\n  );\n}\n\nexport default React.memo(SectionManager);\n// export default SectionManager;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\ContentActions.js",["306","307"],"import React, { useState, Fragment, useContext, useEffect } from \"react\";\nimport contentTypes from \"../contentTypes\";\nimport ImageInputBtn from \"./ImageInputBtn\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport RandomContentActions from \"./RandomContentActions\";\n\n// Material\nimport {\n  Tooltip,\n  IconButton,\n  Switch,\n  FormControlLabel,\n  Divider,\n} from \"@material-ui/core\";\n\n// Context\nimport { NewSurveyDispatcherContext, action_types } from \"./NewSurveyContext\";\n\n// Icons\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport ShortTextIcon from \"@material-ui/icons/ShortText\";\n\n// Style\nimport { contentActionsStyle } from \"./editorStyles\";\nconst useStyles = contentActionsStyle;\n\nfunction ContentActions({\n  sectionIndex,\n  contentIndex,\n  randomStatus,\n  images,\n  isMandatory,\n  descStatus,\n  type,\n  id,\n}) {\n  const classes = useStyles();\n  const dispatch = useContext(NewSurveyDispatcherContext);\n\n  /* Dispatcher functions */\n\n  const onMoveContentUp = () => {\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n    };\n    dispatch({ type: action_types.MOVE_CONTENT_UP, payload });\n  };\n\n  const onMoveContentDown = () => {\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n    };\n    dispatch({ type: action_types.MOVE_CONTENT_DOWN, payload });\n  };\n\n  const onDuplicateContent = () => {\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n    };\n    dispatch({ type: action_types.DUPLICATE_CONTENT, payload });\n  };\n\n  const onRemoveContent = () => {\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n    };\n    dispatch({ type: action_types.REMOVE_CONTENT, payload });\n  };\n\n  const onSwitchMandatory = () => {\n    const updates = { isMandatory: !isMandatory };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({ type: action_types.UPDATE_CONTENT, payload });\n  };\n\n  const onSwitchDescription = () => {\n    const updates = { descStatus: !descStatus };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({ type: action_types.UPDATE_CONTENT, payload });\n  };\n\n  const onAddImage = (newImg) => {\n    const newImages = [...images, newImg];\n    const updates = { images: newImages };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({ type: action_types.UPDATE_CONTENT, payload });\n  };\n\n  /* End dispatcher functions */\n\n  /* This renders if the content is a Question */\n  const renderQuestionActions = () => {\n    if (type === contentTypes.QUESTION) {\n      return (\n        <Fragment>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={isMandatory !== undefined ? isMandatory : false}\n                onChange={onSwitchMandatory}\n                color=\"primary\"\n              />\n            }\n            label=\"Mandatory\"\n            labelPlacement=\"start\"\n          />\n          <Divider\n            orientation=\"vertical\"\n            flexItem\n            className={classes.cardActionsDivider}\n          />\n          <Tooltip\n            title={(descStatus ? \"Show\" : \"Hide\") + \" description\"}\n            placement=\"bottom\"\n          >\n            <IconButton onClick={onSwitchDescription}>\n              <ShortTextIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Attach image\" placement=\"bottom\">\n            <ImageInputBtn value={onAddImage} />\n          </Tooltip>\n        </Fragment>\n      );\n    }\n    return null;\n  };\n\n  /* This renders if the content is an Image or a Text */\n  const renderRandomActions = () => {\n    switch (type) {\n      case contentTypes.IMAGE:\n      case contentTypes.TEXT:\n        return (\n          <RandomContentActions\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            randomStatus={randomStatus}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Fragment>\n      <div id={\"left-side-actions\" + id} className={classes.cardActionsLeft}>\n        <Tooltip title=\"Move up\" placement=\"bottom\">\n          <IconButton onClick={onMoveContentUp}>\n            <ArrowUpward />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Move down\" placement=\"bottom\">\n          <IconButton onClick={onMoveContentDown}>\n            <ArrowDownward />\n          </IconButton>\n        </Tooltip>\n      </div>\n      <div className={classes.cardActionsRight}>\n        {renderQuestionActions()}\n        {renderRandomActions()}\n        <Tooltip title=\"Duplicate content\" placement=\"bottom\">\n          <IconButton onClick={onDuplicateContent}>\n            <FileCopyIcon />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Delete content\" placement=\"bottom\">\n          <IconButton onClick={onRemoveContent}>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default React.memo(ContentActions);\n// export default ContentActions;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\surveyActionTypes.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\SectionManagerBtn.js",["308"],"import React from \"react\";\nimport { Tooltip, IconButton } from \"@material-ui/core\";\n// Icons\nimport AddIcon from \"@material-ui/icons/Add\";\nimport InsertPhotoIcon from \"@material-ui/icons/InsertPhoto\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\nimport VideoCallIcon from \"@material-ui/icons/VideoCall\";\nimport { surveyActionTypes } from \"./surveyActionTypes\";\nimport { sectionManagerBtnStyle } from \"./editorStyles\";\nimport content_type from \"../contentTypes\";\nconst useStyles = sectionManagerBtnStyle;\n\nconst SectionManagerBtn = React.forwardRef(\n  ({ title, actionType, clickCallback }, ref) => {\n    const classes = useStyles();\n    const renderIcon = () => {\n      switch (actionType) {\n        case surveyActionTypes.QUESTION:\n          return <AddIcon />;\n        case surveyActionTypes.IMAGE:\n          return <InsertPhotoIcon />;\n        case surveyActionTypes.TEXT:\n          return <TextFieldsIcon />;\n        case surveyActionTypes.RANDOM_NUMBER:\n          return <BookmarkIcon />;\n        case surveyActionTypes.ADD_SECTION:\n          return <PostAddIcon />;\n        case surveyActionTypes.REMOVE_SECTION:\n          return <DeleteSweepIcon />;\n        /* INSERT VIDEO - icon: VideoCallIcon */\n        default:\n          return null;\n      }\n    };\n\n    console.log(\"Rendering SectionManagerBtn with actionType \", actionType);\n\n    return (\n      <Tooltip title={title}>\n        <IconButton\n          className={classes.manageSurveyBoxIcon}\n          onClick={() => {\n            console.log(\"SectionManagerBtn the action type is: \", actionType);\n            console.log(\n              \"Clicked btn SectionManagerBtn, content type is: \",\n              content_type[actionType]\n            );\n            clickCallback(content_type[actionType]);\n          }}\n          ref={ref}\n        >\n          {renderIcon()}\n        </IconButton>\n      </Tooltip>\n    );\n  }\n);\n\n// export default React.memo(SectionManagerBtn);\nexport default SectionManagerBtn;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomNumber.js",["309"],"import React, { useEffect, useContext, Fragment } from \"react\";\nimport { Input, InputLabel, Typography, FormControl } from \"@material-ui/core\";\nimport { randomNumberStyle } from \"./editorStyles\";\nimport { NewSurveyDispatcherContext, action_types } from \"./NewSurveyContext\";\n\nconst useStyles = randomNumberStyle;\n\nfunction RandomNumber({ sectionIndex, contentIndex, data }) {\n  const dispatch = useContext(NewSurveyDispatcherContext);\n  const { name, minRange, maxRange } = data;\n\n  useEffect(() => {\n    /* TODO use dispatcher to send initial values.\n      INITIAL VALUES:\n      name: \"\",\n      minRange: 0,\n      maxRange: 100 */\n    if (name === \"\" || name === undefined) {\n      const updates = {\n        name: \"\",\n        minRange: 0,\n        maxRange: 100,\n      };\n      const payload = {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      };\n      dispatch({\n        type: action_types.UPDATE_CONTENT,\n        payload,\n      });\n    }\n  }, []);\n\n  const classes = useStyles();\n\n  const onChangeName = (e) => {\n    /* Call dispatcher with update name: e.target.value */\n    const updates = {\n      name: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const onChangeMinRange = (e) => {\n    /* Call dispatcher with update minRange: e.target.value */\n    const updates = {\n      minRange: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const onChangeMaxRange = (e) => {\n    /* Call dispatcher with update maxRange: e.target.value */\n    const updates = {\n      maxRange: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  console.log(\"Rendering Random Number sx cx: \", sectionIndex, contentIndex);\n\n  return (\n    <Fragment>\n      <Input\n        placeholder=\"Name for your random number\"\n        inputProps={{ \"aria-label\": \"random number name\" }}\n        className={classes.placeholderTitle}\n        value={name !== undefined ? name : \"\"}\n        onChange={onChangeName}\n      />\n      <Typography variant=\"body1\" className={classes.rangeText}>\n        Insert the values for the random generation range\n      </Typography>\n      <FormControl className={classes.rangeInput}>\n        <InputLabel>Minimum range value</InputLabel>\n        <Input\n          type=\"number\"\n          value={minRange !== undefined ? minRange : 0}\n          onChange={onChangeMinRange}\n        />\n      </FormControl>\n      <FormControl className={classes.rangeInput}>\n        <InputLabel>Maximum range value</InputLabel>\n        <Input\n          type=\"number\"\n          value={maxRange !== undefined ? maxRange : 100}\n          onChange={onChangeMaxRange}\n        />\n      </FormControl>\n    </Fragment>\n  );\n}\n\nexport default RandomNumber;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Question.js",["310"],"import React, { Fragment, useEffect, useContext } from \"react\";\nimport questionTypes from \"../questionTypes\";\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\nimport LinearScaleQuestion from \"./LinearScaleQuestion\";\nimport QuestionTypeSelect from \"./QuestionTypeSelect\";\n// Material\nimport { Button, Input, Grid, TextField } from \"@material-ui/core\";\n//Style\nimport { questionStyle } from \"./editorStyles\";\n//Context\nimport { NewSurveyDispatcherContext, action_types } from \"./NewSurveyContext\";\n\nconst useStyles = questionStyle;\n\nfunction Question({ sectionIndex, contentIndex, data }) {\n  const classes = useStyles();\n  const dispatch = useContext(NewSurveyDispatcherContext);\n  const {\n    title,\n    description,\n    type,\n    images,\n    descStatus,\n    /* Multiple choice props */\n    choices,\n    /* Linear scale props */\n    minValue,\n    maxValue,\n    minValueLabel,\n    maxValueLabel,\n    continuousSwitch,\n    radioBtnSwitch,\n    horizontalSwitch,\n  } = data;\n\n  /* Used to send the title, the type and the mandatory value to the parent */\n  useEffect(() => {\n    if (title === undefined) {\n      console.log(\"UseEffect is starting on Question\");\n      const updates = {\n        title: \"\",\n        description: \"\",\n      };\n      dispatch({\n        type: action_types.UPDATE_CONTENT,\n        payload: {\n          sectionIndex: sectionIndex,\n          contentIndex: contentIndex,\n          updates,\n        },\n      });\n    }\n  }, []);\n\n  /* Dispatcher functions */\n\n  const onChangeTitle = (e) => {\n    const updates = { title: e.target.value };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onChangeDescription = (e) => {\n    const updates = { description: e.target.value };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  const onRemoveImg = (index) => {\n    let newImages = images.filter((el, ix) => ix !== index);\n    const updates = { images: newImages };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload: {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      },\n    });\n  };\n\n  /* End dispatcher functions */\n\n  const renderDescription = () => {\n    if (!descStatus) return;\n    return (\n      <Input\n        placeholder=\"Question description\"\n        inputProps={{ \"aria-label\": \"description\" }}\n        className={classes.questionDescription}\n        value={description}\n        onChange={onChangeDescription}\n      />\n    );\n  };\n\n  const renderImages = () => {\n    if (!Array.isArray(images)) {\n      return;\n    }\n    return (\n      <div>\n        {images.map((image, index) => (\n          <div className={classes.imgContainer} key={\"image\" + index}>\n            <img\n              src={URL.createObjectURL(image)}\n              alt={\"image-\" + index}\n              className={classes.imgContent}\n            />\n            <Button\n              className={classes.removeImgBtn}\n              onClick={() => {\n                onRemoveImg(index);\n              }}\n            >\n              Remove image\n            </Button>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderQuestion = () => {\n    switch (type) {\n      case questionTypes.MULTIPLE_CHOICE:\n      case questionTypes.CHECKBOX:\n      case questionTypes.RANKING:\n        return (\n          <MultipleChoiceQuestion\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            choices={choices}\n          />\n        );\n      case questionTypes.LINEAR_SCALE:\n        return (\n          <LinearScaleQuestion\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n            minValue={minValue}\n            maxValue={maxValue}\n            minValueLabel={minValueLabel}\n            maxValueLabel={maxValueLabel}\n            continuousSwitch={continuousSwitch}\n            radioBtnSwitch={radioBtnSwitch}\n            horizontalSwitch={horizontalSwitch}\n          />\n        );\n      default:\n        return <div className={classes.noQuestionBlank}></div>;\n    }\n  };\n\n  console.log(\"Rendering Question sx cx: \", sectionIndex, contentIndex);\n\n  return (\n    <Fragment>\n      <Grid container direction=\"row\" justify=\"space-between\" spacing={0}>\n        <Grid item xs={12} sm={8} lg={8} className={classes.questionTitle}>\n          <TextField\n            placeholder=\"Question title\"\n            inputProps={{ \"aria-label\": \"title\" }}\n            className={classes.questionTitle}\n            onChange={onChangeTitle}\n            value={title !== undefined ? title : \"\"}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={8} sm={3} lg={3} className={classes.questionSelect}>\n          <QuestionTypeSelect\n            type={type}\n            sectionIndex={sectionIndex}\n            contentIndex={contentIndex}\n          />\n        </Grid>\n      </Grid>\n      {renderDescription()}\n      {renderImages()}\n      {renderQuestion()}\n    </Fragment>\n  );\n}\n\n// export default React.memo(Question);\nexport default Question;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Text.js",["311"],"import React, { useEffect, useState, useContext, Fragment } from \"react\";\nimport RandomGallery from \"./RandomGallery\";\nimport content_type from \"../contentTypes\";\n// Material\nimport { Input, Select, MenuItem } from \"@material-ui/core\";\n// Context\nimport {\n  RandomNumbersContext,\n  NewSurveyDispatcherContext,\n  action_types,\n} from \"./NewSurveyContext\";\n// Style\nimport { textStyle } from \"./editorStyles\";\nconst useStyles = textStyle;\n\nfunction Text({ sectionIndex, contentIndex, data }) {\n  const classes = useStyles();\n\n  const [randomNumbers, setRandomNumbers] = useState([]);\n  const appRandomNumbers = useContext(RandomNumbersContext);\n  const dispatch = useContext(NewSurveyDispatcherContext);\n  const { title, description, randomStatus, randomName } = data;\n\n  /* Every time a random number changes,\n    I need to know if I can still display it. */\n  useEffect(() => {\n    const previousPlaceholders = () => {\n      let previousPhArray = [];\n      appRandomNumbers.forEach((randomNumber) => {\n        if (randomNumber.sectionIndex < sectionIndex) {\n          previousPhArray.push(randomNumber.name);\n        }\n        if (randomNumber.sectionIndex === sectionIndex) {\n          if (randomNumber.contentIndex < contentIndex) {\n            previousPhArray.push(randomNumber.name);\n          }\n        }\n      });\n      return previousPhArray;\n    };\n    const newRandomNames = previousPlaceholders();\n    setRandomNumbers(newRandomNames);\n  }, [appRandomNumbers]);\n\n  const onChangeTitle = (e) => {\n    const updates = {\n      title: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const onChangeDescription = (e) => {\n    const updates = {\n      description: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const onChangeRandomName = (e) => {\n    const updates = {\n      randomName: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const renderRandomizeSelection = () => {\n    const checkValue = () => {\n      let check = false;\n      if (appRandomNumbers.length !== 0) {\n        randomNumbers.forEach((name) => {\n          if (randomName === name) check = true;\n        });\n      }\n      return check;\n    };\n\n    return (\n      <Fragment>\n        {randomNumbers.length !== 0 ? (\n          <Select\n            value={checkValue() === true ? randomName : \"\"}\n            className={classes.randomNameSelector}\n            onChange={onChangeRandomName}\n            defaultValue=\"\"\n          >\n            {randomNumbers.map((rn) => (\n              <MenuItem key={\"selectvalue\" + rn} value={rn}>\n                {rn}\n              </MenuItem>\n            ))}\n          </Select>\n        ) : null}\n        <RandomGallery randomType={content_type.TEXT} />\n      </Fragment>\n    );\n  };\n\n  const renderDefault = () => {\n    return (\n      <Input\n        placeholder=\"Description\"\n        inputProps={{ \"aria-label\": \"description\" }}\n        className={classes.textDescription}\n        value={description}\n        onChange={onChangeDescription}\n      />\n    );\n  };\n\n  return (\n    <Fragment>\n      <Input\n        placeholder=\"Title\"\n        inputProps={{ \"aria-label\": \"title\" }}\n        className={classes.textTitle}\n        value={title}\n        onChange={onChangeTitle}\n      />\n      {randomStatus ? renderRandomizeSelection() : renderDefault()}\n    </Fragment>\n  );\n}\n\nexport default Text;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\Image.js",["312"],"import React, {\n  Fragment,\n  useState,\n  useRef,\n  useEffect,\n  useContext,\n} from \"react\";\n// Material\nimport {\n  Grid,\n  Input,\n  Button,\n  MenuItem,\n  Select,\n  InputLabel,\n  FormControl,\n} from \"@material-ui/core\";\n// Context\nimport {\n  NewSurveyDispatcherContext,\n  RandomNumbersContext,\n  action_types,\n} from \"./NewSurveyContext\";\n// Style\nimport { imageStyle } from \"./editorStyles\";\nimport RandomGallery from \"./RandomGallery\";\nimport content_type from \"../contentTypes\";\nconst useStyles = imageStyle;\n\nfunction Image({ sectionIndex, contentIndex, data, id }) {\n  const classes = useStyles();\n  const fileInput = useRef(null);\n  const dispatch = useContext(NewSurveyDispatcherContext);\n  const { title, img, randomStatus, randomName } = data;\n  const appRandomNumbers = useContext(RandomNumbersContext);\n  const [randomNumbers, setRandomNumbers] = useState([]);\n\n  /* Every time a random number changes,\n    I need to know if I can still display it. */\n  useEffect(() => {\n    const previousPlaceholders = () => {\n      let previousPhArray = [];\n      appRandomNumbers.forEach((randomNumber) => {\n        if (randomNumber.sectionIndex < sectionIndex) {\n          previousPhArray.push(randomNumber.name);\n        }\n        if (randomNumber.sectionIndex === sectionIndex) {\n          if (randomNumber.contentIndex < contentIndex) {\n            previousPhArray.push(randomNumber.name);\n          }\n        }\n      });\n      return previousPhArray;\n    };\n    const newRandomNames = previousPlaceholders();\n    console.log(\"The new random names from useEffect is: \", newRandomNames);\n    setRandomNumbers(newRandomNames);\n  }, [appRandomNumbers]);\n\n  const onChangeTitle = (e) => {\n    const updates = {\n      title: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const onClickSelectImg = () => {\n    fileInput.current.click();\n  };\n\n  const onChangeImage = (e) => {\n    const myImg = e.target.files[0];\n    const updates = {\n      img: myImg,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const onChangeRandomName = (e) => {\n    const updates = {\n      randomName: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const renderRandomizeSelection = () => {\n    const checkValue = () => {\n      let check = false;\n      if (appRandomNumbers.length !== 0) {\n        randomNumbers.forEach((name) => {\n          if (randomName === name) check = true;\n        });\n      }\n      return check;\n    };\n\n    return (\n      <Fragment>\n        <FormControl className={classes.controlRandomSelector}>\n          <InputLabel shrink>Random Name</InputLabel>\n          {randomNumbers.length !== 0 ? (\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={checkValue() === true ? randomName : \"\"}\n              className={classes.randomNameSelector}\n              onChange={onChangeRandomName}\n              defaultValue=\"\"\n              fullWidth\n            >\n              {randomNumbers.map((rn) => (\n                <MenuItem key={\"selectvalue\" + rn} value={rn}>\n                  {rn}\n                </MenuItem>\n              ))}\n            </Select>\n          ) : null}\n        </FormControl>\n      </Fragment>\n    );\n  };\n\n  const renderDefaultImage = () => {\n    return (\n      <Fragment>\n        {img !== undefined ? (\n          <div className={classes.imgContainer}>\n            <img\n              //src={checkImageType()}\n              src={URL.createObjectURL(img)}\n              alt={\"img\" + id}\n              className={classes.imgContent}\n            />\n          </div>\n        ) : (\n          <Fragment />\n        )}\n        <div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.selectAndChangeImgBtn}\n            onClick={() => {\n              onClickSelectImg();\n            }}\n          >\n            {img === undefined ? \"Select\" : \"Change\"} image\n          </Button>\n          <input\n            style={{\n              display: \"none\",\n              top: \"0px\",\n              right: \"0px\",\n            }}\n            type=\"file\"\n            accept=\"image/*\"\n            ref={fileInput}\n            onChange={onChangeImage}\n            onClick={(event) => {\n              // Used to let the user select the same file if needed\n              event.target.value = null;\n            }}\n          />\n        </div>\n      </Fragment>\n    );\n  };\n\n  return (\n    <Fragment>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n        spacing={0}\n      >\n        <Grid item xs={12} sm={8} lg={8}>\n          <Input\n            placeholder={\"Image title\"}\n            inputProps={{ \"aria-label\": \"imagetitle\" }}\n            className={classes.imageTitle}\n            value={title}\n            onChange={onChangeTitle}\n            fullWidth\n          />\n        </Grid>\n        <Grid item xs={8} sm={3} lg={3}>\n          {randomStatus && renderRandomizeSelection()}\n        </Grid>\n      </Grid>\n      {/* <div className={classes.flexContainer}></div> */}\n      {randomStatus && <RandomGallery randomType={content_type.IMAGE} />}\n      {!randomStatus && renderDefaultImage()}\n    </Fragment>\n  );\n}\n\nexport default Image;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\QuestionTypeSelect.js",["313","314","315"],"import React, { useEffect, useContext } from \"react\";\nimport {\n  Select,\n  ListItemText,\n  FormControl,\n  InputLabel,\n} from \"@material-ui/core\";\nimport { questionTypeSelectStyle } from \"./editorStyles\";\nimport questionTypes from \"../questionTypes\";\nimport QuestionTypeSelectMenuItem from \"./QuestionTypeSelectMenuItem\";\n//Context\nimport {\n  NewSurveyStateContext,\n  NewSurveyDispatcherContext,\n  action_types,\n} from \"./NewSurveyContext\";\n\nconst useStyles = questionTypeSelectStyle;\n\nfunction QuestionTypeSelect({ sectionIndex, contentIndex, type }) {\n  const classes = useStyles();\n\n  const dispatch = useContext(NewSurveyDispatcherContext);\n\n  console.log(\"The type is: \", type);\n\n  useEffect(() => {\n    if (type === undefined) {\n      // Send initial data\n      const updates = {\n        type: questionTypes.SHORT_TEXT,\n      };\n      const payload = {\n        sectionIndex: sectionIndex,\n        contentIndex: contentIndex,\n        updates,\n      };\n      dispatch({\n        type: action_types.UPDATE_CONTENT,\n        payload,\n      });\n    }\n  }, []);\n\n  const onChangeType = (e) => {\n    const updates = {\n      type: e.target.value,\n    };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({\n      type: action_types.UPDATE_CONTENT,\n      payload,\n    });\n  };\n\n  const renderSelectValue = (value) => {\n    return (\n      <ListItemText\n        primary={value}\n        className={classes.questionTypeRenderValue}\n      />\n    );\n  };\n\n  return (\n    <FormControl className={classes.questionType}>\n      <InputLabel shrink>Question Type</InputLabel>\n      <Select\n        labelId={`question-select-${sectionIndex}-${contentIndex}`}\n        id={`question-select-${sectionIndex}-${contentIndex}`}\n        value={type !== undefined ? type : questionTypes.SHORT_TEXT}\n        // renderValue={renderSelectValue}\n        // className={classes.questionType}\n        onChange={onChangeType}\n        fullWidth\n      >\n        {Object.keys(questionTypes).map((typeLoop) => (\n          <QuestionTypeSelectMenuItem\n            value={questionTypes[typeLoop]}\n            key={typeLoop}\n          >\n            {questionTypes[typeLoop]}\n          </QuestionTypeSelectMenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n\nexport default React.memo(QuestionTypeSelect);\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\QuestionTypeSelectMenuItem.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\RandomContentActions.js",["316"],"import React, { useState, useEffect, useContext, Fragment } from \"react\";\n\n// Material\nimport { FormControlLabel, Switch, Divider } from \"@material-ui/core\";\n\n// Context\nimport {\n  NewSurveyDispatcherContext,\n  RandomNumbersContext,\n  action_types,\n} from \"./NewSurveyContext\";\n\n// Style\nimport { contentActionsStyle } from \"./editorStyles\";\nconst useStyles = contentActionsStyle;\n\nfunction RandomContentActions({ sectionIndex, contentIndex, randomStatus }) {\n  const classes = useStyles();\n  const dispatch = useContext(NewSurveyDispatcherContext);\n  const appRandomNumbers = useContext(RandomNumbersContext);\n  const [randomNumbers, setRandomNumbers] = useState([]);\n\n  /* UseEffect to get eligible random numbers */\n  useEffect(() => {\n    const previousPlaceholders = () => {\n      let previousPhArray = [];\n      appRandomNumbers.forEach((randomNumber) => {\n        if (randomNumber.sectionIndex < sectionIndex) {\n          previousPhArray.push(randomNumber.name);\n        }\n        if (randomNumber.sectionIndex === sectionIndex) {\n          if (randomNumber.contentIndex < contentIndex) {\n            previousPhArray.push(randomNumber.name);\n          }\n        }\n      });\n      return previousPhArray;\n    };\n    /* Get randomNumbers only if the content type is a randomizable one */\n    const newRandomNames = previousPlaceholders();\n    console.log(\"The new random names from useEffect is: \", newRandomNames);\n    setRandomNumbers(newRandomNames);\n  }, [appRandomNumbers]);\n\n  const onChangeRandomStatus = () => {\n    const updates = { randomStatus: !randomStatus };\n    const payload = {\n      sectionIndex: sectionIndex,\n      contentIndex: contentIndex,\n      updates,\n    };\n    dispatch({ type: action_types.UPDATE_CONTENT, payload });\n  };\n\n  if (randomNumbers.length !== 0) {\n    return (\n      <Fragment>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={randomStatus !== undefined ? randomStatus : false}\n              onChange={() => {\n                onChangeRandomStatus();\n              }}\n              color=\"primary\"\n            />\n          }\n          label=\"Randomize\"\n          labelPlacement=\"start\"\n        />\n        <Divider\n          orientation=\"vertical\"\n          flexItem\n          className={classes.cardActionsDivider}\n        />\n      </Fragment>\n    );\n  }\n  return null;\n}\n\nexport default React.memo(RandomContentActions);\n// export default RandomContentActions;\n","C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\editor\\editorStyles.js",[],"C:\\Users\\sanna\\WebstormProjects\\reactmaterial01\\client\\src\\components\\view\\viewStyles.js",[],{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":12,"column":10,"nodeType":"323","messageId":"324","endLine":12,"endColumn":24},{"ruleId":"321","severity":1,"message":"325","line":12,"column":26,"nodeType":"323","messageId":"324","endLine":12,"endColumn":34},{"ruleId":"326","severity":1,"message":"327","line":118,"column":5,"nodeType":"328","messageId":"329","endLine":145,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":150,"column":7,"nodeType":"328","messageId":"329","endLine":155,"endColumn":8},{"ruleId":"321","severity":1,"message":"330","line":23,"column":10,"nodeType":"323","messageId":"324","endLine":23,"endColumn":21},{"ruleId":"331","severity":1,"message":"332","line":64,"column":6,"nodeType":"333","endLine":64,"endColumn":13,"suggestions":"334"},{"ruleId":"321","severity":1,"message":"335","line":30,"column":5,"nodeType":"323","messageId":"324","endLine":30,"endColumn":15},{"ruleId":"321","severity":1,"message":"336","line":32,"column":5,"nodeType":"323","messageId":"324","endLine":32,"endColumn":16},{"ruleId":"317","replacedBy":"337"},{"ruleId":"319","replacedBy":"338"},{"ruleId":"321","severity":1,"message":"339","line":1,"column":38,"nodeType":"323","messageId":"324","endLine":1,"endColumn":48},{"ruleId":"321","severity":1,"message":"340","line":32,"column":30,"nodeType":"323","messageId":"324","endLine":32,"endColumn":38},{"ruleId":"341","severity":1,"message":"342","line":45,"column":24,"nodeType":"343","messageId":"344","endLine":45,"endColumn":26},{"ruleId":"341","severity":1,"message":"342","line":53,"column":24,"nodeType":"343","messageId":"344","endLine":53,"endColumn":26},{"ruleId":"321","severity":1,"message":"345","line":86,"column":9,"nodeType":"323","messageId":"324","endLine":86,"endColumn":19},{"ruleId":"331","severity":1,"message":"346","line":156,"column":6,"nodeType":"333","endLine":156,"endColumn":8,"suggestions":"347"},{"ruleId":"331","severity":1,"message":"348","line":213,"column":6,"nodeType":"333","endLine":213,"endColumn":19,"suggestions":"349"},{"ruleId":"326","severity":1,"message":"327","line":283,"column":3,"nodeType":"328","messageId":"329","endLine":289,"endColumn":4},{"ruleId":"321","severity":1,"message":"350","line":63,"column":7,"nodeType":"323","messageId":"324","endLine":63,"endColumn":23},{"ruleId":"331","severity":1,"message":"351","line":31,"column":6,"nodeType":"333","endLine":31,"endColumn":8,"suggestions":"352"},{"ruleId":"321","severity":1,"message":"353","line":13,"column":10,"nodeType":"323","messageId":"324","endLine":13,"endColumn":26},{"ruleId":"331","severity":1,"message":"354","line":23,"column":6,"nodeType":"333","endLine":23,"endColumn":8,"suggestions":"355"},{"ruleId":"321","severity":1,"message":"356","line":53,"column":11,"nodeType":"323","messageId":"324","endLine":53,"endColumn":19},{"ruleId":"357","severity":1,"message":"358","line":108,"column":11,"nodeType":"359","endLine":108,"endColumn":72},{"ruleId":"331","severity":1,"message":"354","line":142,"column":6,"nodeType":"333","endLine":142,"endColumn":8,"suggestions":"360"},{"ruleId":"321","severity":1,"message":"361","line":152,"column":11,"nodeType":"323","messageId":"324","endLine":152,"endColumn":20},{"ruleId":"321","severity":1,"message":"356","line":163,"column":11,"nodeType":"323","messageId":"324","endLine":163,"endColumn":19},{"ruleId":"357","severity":1,"message":"358","line":217,"column":11,"nodeType":"359","endLine":221,"endColumn":13},{"ruleId":"321","severity":1,"message":"362","line":1,"column":28,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"331","severity":1,"message":"363","line":57,"column":6,"nodeType":"333","endLine":57,"endColumn":8,"suggestions":"364"},{"ruleId":"321","severity":1,"message":"365","line":13,"column":9,"nodeType":"323","messageId":"324","endLine":13,"endColumn":16},{"ruleId":"326","severity":1,"message":"327","line":16,"column":5,"nodeType":"328","messageId":"329","endLine":57,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":58,"column":5,"nodeType":"328","messageId":"329","endLine":63,"endColumn":6},{"ruleId":"321","severity":1,"message":"366","line":1,"column":50,"nodeType":"323","messageId":"324","endLine":1,"endColumn":56},{"ruleId":"331","severity":1,"message":"367","line":67,"column":6,"nodeType":"333","endLine":67,"endColumn":19,"suggestions":"368"},{"ruleId":"357","severity":1,"message":"358","line":85,"column":15,"nodeType":"359","endLine":90,"endColumn":17},{"ruleId":"321","severity":1,"message":"369","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"370","line":26,"column":10,"nodeType":"323","messageId":"324","endLine":26,"endColumn":16},{"ruleId":"331","severity":1,"message":"371","line":23,"column":6,"nodeType":"333","endLine":23,"endColumn":8,"suggestions":"372"},{"ruleId":"321","severity":1,"message":"369","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"373","line":6,"column":3,"nodeType":"323","messageId":"324","endLine":6,"endColumn":9},{"ruleId":"321","severity":1,"message":"374","line":7,"column":3,"nodeType":"323","messageId":"324","endLine":7,"endColumn":7},{"ruleId":"321","severity":1,"message":"375","line":8,"column":3,"nodeType":"323","messageId":"324","endLine":8,"endColumn":14},{"ruleId":"321","severity":1,"message":"376","line":9,"column":3,"nodeType":"323","messageId":"324","endLine":9,"endColumn":14},{"ruleId":"321","severity":1,"message":"377","line":10,"column":3,"nodeType":"323","messageId":"324","endLine":10,"endColumn":13},{"ruleId":"321","severity":1,"message":"378","line":11,"column":3,"nodeType":"323","messageId":"324","endLine":11,"endColumn":8},{"ruleId":"321","severity":1,"message":"379","line":12,"column":3,"nodeType":"323","messageId":"324","endLine":12,"endColumn":15},{"ruleId":"321","severity":1,"message":"380","line":13,"column":3,"nodeType":"323","messageId":"324","endLine":13,"endColumn":15},{"ruleId":"321","severity":1,"message":"381","line":14,"column":3,"nodeType":"323","messageId":"324","endLine":14,"endColumn":11},{"ruleId":"321","severity":1,"message":"382","line":15,"column":3,"nodeType":"323","messageId":"324","endLine":15,"endColumn":7},{"ruleId":"321","severity":1,"message":"383","line":16,"column":3,"nodeType":"323","messageId":"324","endLine":16,"endColumn":9},{"ruleId":"321","severity":1,"message":"384","line":17,"column":3,"nodeType":"323","messageId":"324","endLine":17,"endColumn":10},{"ruleId":"321","severity":1,"message":"385","line":19,"column":3,"nodeType":"323","messageId":"324","endLine":19,"endColumn":9},{"ruleId":"321","severity":1,"message":"386","line":20,"column":3,"nodeType":"323","messageId":"324","endLine":20,"endColumn":10},{"ruleId":"321","severity":1,"message":"387","line":22,"column":8,"nodeType":"323","messageId":"324","endLine":22,"endColumn":17},{"ruleId":"321","severity":1,"message":"388","line":28,"column":8,"nodeType":"323","messageId":"324","endLine":28,"endColumn":19},{"ruleId":"321","severity":1,"message":"389","line":29,"column":8,"nodeType":"323","messageId":"324","endLine":29,"endColumn":17},{"ruleId":"321","severity":1,"message":"390","line":30,"column":8,"nodeType":"323","messageId":"324","endLine":30,"endColumn":17},{"ruleId":"321","severity":1,"message":"391","line":31,"column":10,"nodeType":"323","messageId":"324","endLine":31,"endColumn":19},{"ruleId":"321","severity":1,"message":"392","line":31,"column":21,"nodeType":"323","messageId":"324","endLine":31,"endColumn":30},{"ruleId":"321","severity":1,"message":"393","line":31,"column":32,"nodeType":"323","messageId":"324","endLine":31,"endColumn":47},{"ruleId":"321","severity":1,"message":"394","line":32,"column":8,"nodeType":"323","messageId":"324","endLine":32,"endColumn":22},{"ruleId":"321","severity":1,"message":"395","line":43,"column":7,"nodeType":"323","messageId":"324","endLine":43,"endColumn":17},{"ruleId":"321","severity":1,"message":"370","line":44,"column":10,"nodeType":"323","messageId":"324","endLine":44,"endColumn":16},{"ruleId":"396","severity":1,"message":"397","line":77,"column":21,"nodeType":"359","endLine":77,"endColumn":81},{"ruleId":"321","severity":1,"message":"369","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"370","line":16,"column":10,"nodeType":"323","messageId":"324","endLine":16,"endColumn":16},{"ruleId":"331","severity":1,"message":"398","line":35,"column":6,"nodeType":"333","endLine":35,"endColumn":19,"suggestions":"399"},{"ruleId":"400","severity":1,"message":"401","line":54,"column":15,"nodeType":"402","endLine":54,"endColumn":51},{"ruleId":"321","severity":1,"message":"362","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"369","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"339","line":1,"column":38,"nodeType":"323","messageId":"324","endLine":1,"endColumn":48},{"ruleId":"331","severity":1,"message":"403","line":56,"column":6,"nodeType":"333","endLine":56,"endColumn":8,"suggestions":"404"},{"ruleId":"396","severity":1,"message":"397","line":86,"column":21,"nodeType":"359","endLine":86,"endColumn":81},{"ruleId":"321","severity":1,"message":"405","line":150,"column":9,"nodeType":"323","messageId":"324","endLine":150,"endColumn":23},{"ruleId":"321","severity":1,"message":"373","line":4,"column":3,"nodeType":"323","messageId":"324","endLine":4,"endColumn":9},{"ruleId":"321","severity":1,"message":"339","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":27},{"ruleId":"321","severity":1,"message":"406","line":56,"column":10,"nodeType":"323","messageId":"324","endLine":56,"endColumn":22},{"ruleId":"321","severity":1,"message":"362","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"369","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"339","line":1,"column":38,"nodeType":"323","messageId":"324","endLine":1,"endColumn":48},{"ruleId":"321","severity":1,"message":"407","line":4,"column":3,"nodeType":"323","messageId":"324","endLine":4,"endColumn":7},{"ruleId":"321","severity":1,"message":"362","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"339","line":1,"column":27,"nodeType":"323","messageId":"324","endLine":1,"endColumn":37},{"ruleId":"321","severity":1,"message":"408","line":71,"column":9,"nodeType":"323","messageId":"324","endLine":71,"endColumn":31},{"ruleId":"321","severity":1,"message":"409","line":75,"column":9,"nodeType":"323","messageId":"324","endLine":75,"endColumn":32},{"ruleId":"321","severity":1,"message":"410","line":79,"column":9,"nodeType":"323","messageId":"324","endLine":79,"endColumn":19},{"ruleId":"321","severity":1,"message":"362","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"369","line":1,"column":49,"nodeType":"323","messageId":"324","endLine":1,"endColumn":58},{"ruleId":"321","severity":1,"message":"411","line":10,"column":8,"nodeType":"323","messageId":"324","endLine":10,"endColumn":21},{"ruleId":"331","severity":1,"message":"412","line":34,"column":6,"nodeType":"333","endLine":34,"endColumn":8,"suggestions":"413"},{"ruleId":"331","severity":1,"message":"414","line":53,"column":6,"nodeType":"333","endLine":53,"endColumn":8,"suggestions":"415"},{"ruleId":"331","severity":1,"message":"416","line":43,"column":6,"nodeType":"333","endLine":43,"endColumn":24,"suggestions":"417"},{"ruleId":"331","severity":1,"message":"416","line":58,"column":6,"nodeType":"333","endLine":58,"endColumn":24,"suggestions":"418"},{"ruleId":"321","severity":1,"message":"419","line":13,"column":3,"nodeType":"323","messageId":"324","endLine":13,"endColumn":24},{"ruleId":"331","severity":1,"message":"420","line":43,"column":6,"nodeType":"333","endLine":43,"endColumn":8,"suggestions":"421"},{"ruleId":"321","severity":1,"message":"422","line":60,"column":9,"nodeType":"323","messageId":"324","endLine":60,"endColumn":26},{"ruleId":"331","severity":1,"message":"416","line":43,"column":6,"nodeType":"333","endLine":43,"endColumn":24,"suggestions":"423"},"no-native-reassign",["424"],"no-negated-in-lhs",["425"],"no-unused-vars","'mySimpleSurvey' is defined but never used.","Identifier","unusedVar","'mySurvey' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'actionTypes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'templates'. Either include it or remove the dependency array.","ArrayExpression",["426"],"'secondPage' is assigned a value but never used.","'otherSurvey' is assigned a value but never used.",["424"],["425"],"'useContext' is defined but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'saveSurvey' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'jsonData.id' and 'jsonData.pages'. Either include them or remove the dependency array.",["427"],"React Hook useEffect has a missing dependency: 'jsonData.pages'. Either include it or remove the dependency array.",["428"],"'NewImageInputBtn' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'choices', 'contentIndex', 'dispatch', and 'sectionIndex'. Either include them or remove the dependency array.",["429"],"'OldRandomGallery' is defined but never used.","React Hook useEffect has missing dependencies: 'content' and 'getFirstContent'. Either include them or remove the dependency array.",["430"],"'textList' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["431"],"'imageList' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'contentIndex', 'dispatch', 'minValue', and 'sectionIndex'. Either include them or remove the dependency array.",["432"],"'classes' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'props.data.img', 'props.data.randomName', and 'props.data.randomStatus'. Either include them or remove the dependency array. If 'setImage' needs the current value of 'props.data.img', you can also switch to useReducer instead of useState and read 'props.data.img' in the reducer.",["433"],"'useEffect' is defined but never used.","'answer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.contentIndex', 'props.data.choices', 'props.sectionIndex', and 'updateAnswer'. Either include them or remove the dependency array.",["434"],"'Button' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'IconButton' is defined but never used.","'Input' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","'Select' is defined but never used.","'Divider' is defined but never used.","'Switch' is defined but never used.","'Tooltip' is defined but never used.","'Container' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'TextField' is defined but never used.","'Droppable' is defined but never used.","'Draggable' is defined but never used.","'DragDropContext' is defined but never used.","'DragHandleIcon' is defined but never used.","'tempAnswer' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'props.data.description', 'props.data.randomName', and 'props.data.randomStatus'. Either include them or remove the dependency array. If 'setText' needs the current value of 'props.data.description', you can also switch to useReducer instead of useState and read 'props.data.description' in the reducer.",["435"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'calculateArray', 'props.contentIndex', 'props.data.choices', 'props.sectionIndex', and 'updateAnswer'. Either include them or remove the dependency array.",["436"],"'displaySurveys' is assigned a value but never used.","'compareProps' is defined but never used.","'Grid' is defined but never used.","'onOpenEmbedVideoDialog' is assigned a value but never used.","'onCloseEmbedVideoDialog' is assigned a value but never used.","'onAddVideo' is assigned a value but never used.","'VideoCallIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'contentIndex', 'dispatch', 'name', and 'sectionIndex'. Either include them or remove the dependency array.",["437"],"React Hook useEffect has missing dependencies: 'contentIndex', 'dispatch', 'sectionIndex', and 'title'. Either include them or remove the dependency array.",["438"],"React Hook useEffect has missing dependencies: 'contentIndex' and 'sectionIndex'. Either include them or remove the dependency array.",["439"],["440"],"'NewSurveyStateContext' is defined but never used.","React Hook useEffect has missing dependencies: 'contentIndex', 'dispatch', 'sectionIndex', and 'type'. Either include them or remove the dependency array.",["441"],"'renderSelectValue' is assigned a value but never used.",["442"],"no-global-assign","no-unsafe-negation",{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"451","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"468","fix":"470"},{"desc":"471","fix":"472"},{"desc":"468","fix":"473"},"Update the dependencies array to be: [state, templates]",{"range":"474","text":"475"},"Update the dependencies array to be: [jsonData.id, jsonData.pages]",{"range":"476","text":"477"},"Update the dependencies array to be: [jsonData.pages, randomNames]",{"range":"478","text":"479"},"Update the dependencies array to be: [choices, contentIndex, dispatch, sectionIndex]",{"range":"480","text":"481"},"Update the dependencies array to be: [content, getFirstContent]",{"range":"482","text":"483"},{"range":"484","text":"483"},"Update the dependencies array to be: [contentIndex, dispatch, minValue, sectionIndex]",{"range":"485","text":"486"},"Update the dependencies array to be: [props.data.img, props.data.randomName, props.data.randomStatus, randomNames]",{"range":"487","text":"488"},"Update the dependencies array to be: [props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",{"range":"489","text":"490"},"Update the dependencies array to be: [props.data.description, props.data.randomName, props.data.randomStatus, randomNames]",{"range":"491","text":"492"},"Update the dependencies array to be: [calculateArray, props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",{"range":"493","text":"494"},"Update the dependencies array to be: [contentIndex, dispatch, name, sectionIndex]",{"range":"495","text":"496"},"Update the dependencies array to be: [contentIndex, dispatch, sectionIndex, title]",{"range":"497","text":"498"},"Update the dependencies array to be: [appRandomNumbers, contentIndex, sectionIndex]",{"range":"499","text":"500"},{"range":"501","text":"500"},"Update the dependencies array to be: [contentIndex, dispatch, sectionIndex, type]",{"range":"502","text":"503"},{"range":"504","text":"500"},[1873,1880],"[state, templates]",[5546,5548],"[jsonData.id, jsonData.pages]",[7810,7823],"[jsonData.pages, randomNames]",[888,890],"[choices, contentIndex, dispatch, sectionIndex]",[730,732],"[content, getFirstContent]",[4274,4276],[1251,1253],"[contentIndex, dispatch, minValue, sectionIndex]",[2182,2195],"[props.data.img, props.data.randomName, props.data.randomStatus, randomNames]",[966,968],"[props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",[1139,1152],"[props.data.description, props.data.randomName, props.data.randomStatus, randomNames]",[1819,1821],"[calculateArray, props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",[992,994],"[contentIndex, dispatch, name, sectionIndex]",[1455,1457],"[contentIndex, dispatch, sectionIndex, title]",[1451,1469],"[appRandomNumbers, contentIndex, sectionIndex]",[1633,1651],[1054,1056],"[contentIndex, dispatch, sectionIndex, type]",[1464,1482]]