[{"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\index.js":"1","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\App.js":"2","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\tmpSurveys.js":"3","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\editorStyles.js":"4","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\SelectedSurveyContext.js":"5","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\pages.js":"6","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NavBar.js":"7","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\MainPage.js":"8","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewSurvey.js":"9","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\View.js":"10","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\JsonLoader.js":"11","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\viewStyles.js":"12","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\ImageInputBtn.js":"13","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewQuestion.js":"14","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewImage.js":"15","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewTextField.js":"16","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewRandomNumber.js":"17","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\PlaceholdersContext.js":"18","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\contentTypes.js":"19","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\surveys\\Survey.js":"20","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\RandomGallery.js":"21","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\LinearScaleQuestion.js":"22","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\questionTypes.js":"23","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\MultipleChoiceQuestion.js":"24","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\Page.js":"25","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\RandomNamesContext.js":"26","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\Image.js":"27","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\LinearScaleQuestion.js":"28","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\RankingQuestion.js":"29","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\MultipleChoiceQuestion.js":"30","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\TextQuestion.js":"31","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\TextField.js":"32","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\DataCollectorContext.js":"33","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\AnswersSummary.js":"34","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\CheckBoxQuestion.js":"35"},{"size":230,"mtime":1615506654231,"results":"36","hashOfConfig":"37"},{"size":4941,"mtime":1615211308934,"results":"38","hashOfConfig":"37"},{"size":4677,"mtime":1614846956024,"results":"39","hashOfConfig":"37"},{"size":9602,"mtime":1615560442788,"results":"40","hashOfConfig":"37"},{"size":129,"mtime":1614846956003,"results":"41","hashOfConfig":"37"},{"size":148,"mtime":1615572028364,"results":"42","hashOfConfig":"37"},{"size":905,"mtime":1614846956008,"results":"43","hashOfConfig":"37"},{"size":3814,"mtime":1615207634264,"results":"44","hashOfConfig":"37"},{"size":26083,"mtime":1615401735089,"results":"45","hashOfConfig":"37"},{"size":336,"mtime":1615572028498,"results":"46","hashOfConfig":"37"},{"size":9621,"mtime":1615572028470,"results":"47","hashOfConfig":"37"},{"size":2440,"mtime":1615504614308,"results":"48","hashOfConfig":"37"},{"size":1564,"mtime":1614846956004,"results":"49","hashOfConfig":"37"},{"size":12856,"mtime":1615572028336,"results":"50","hashOfConfig":"37"},{"size":7670,"mtime":1614846956008,"results":"51","hashOfConfig":"37"},{"size":5846,"mtime":1615049325956,"results":"52","hashOfConfig":"37"},{"size":3842,"mtime":1614846956011,"results":"53","hashOfConfig":"37"},{"size":125,"mtime":1614846956013,"results":"54","hashOfConfig":"37"},{"size":175,"mtime":1614846956016,"results":"55","hashOfConfig":"37"},{"size":8883,"mtime":1614846956023,"results":"56","hashOfConfig":"37"},{"size":4974,"mtime":1615049325996,"results":"57","hashOfConfig":"37"},{"size":2872,"mtime":1615031002451,"results":"58","hashOfConfig":"37"},{"size":238,"mtime":1614846956014,"results":"59","hashOfConfig":"37"},{"size":1810,"mtime":1614846956007,"results":"60","hashOfConfig":"37"},{"size":2175,"mtime":1615572028495,"results":"61","hashOfConfig":"37"},{"size":123,"mtime":1614989861933,"results":"62","hashOfConfig":"37"},{"size":2124,"mtime":1615068351734,"results":"63","hashOfConfig":"37"},{"size":4446,"mtime":1615109396829,"results":"64","hashOfConfig":"37"},{"size":4753,"mtime":1615196305021,"results":"65","hashOfConfig":"37"},{"size":3547,"mtime":1615543436135,"results":"66","hashOfConfig":"37"},{"size":2466,"mtime":1615141465459,"results":"67","hashOfConfig":"37"},{"size":1948,"mtime":1615050654214,"results":"68","hashOfConfig":"37"},{"size":127,"mtime":1615052995071,"results":"69","hashOfConfig":"37"},{"size":4287,"mtime":1615572247826,"results":"70","hashOfConfig":"37"},{"size":4030,"mtime":1615572028435,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"ofat9x",{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"74"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"74"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\index.js",[],["162","163"],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\App.js",["164","165","166"],"import React, { useState, useEffect } from \"react\";\r\nimport NavBar from \"./components/editor/NavBar\";\r\nimport MainPage from \"./components/editor/MainPage\";\r\nimport NewSurvey from \"./components/editor/NewSurvey\";\r\nimport View from \"./components/view/View\";\r\nimport pages from \"./components/pages\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport { appStyle } from \"./editorStyles\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport { mySimpleSurvey, mySurvey } from \"./tmpSurveys\";\r\nimport SelectedSurveyContext from \"./SelectedSurveyContext\";\r\n\r\nconst useStyles = appStyle;\r\n\r\n// Initial surveys\r\nconst surveyz = [mySurvey, mySimpleSurvey];\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [surveys, setSurveys] = useState([]);\r\n  const [page, setPage] = useState(pages.MAIN);\r\n  const [showDrawer, setShowDrawer] = useState(false);\r\n  const [selectedSurvey, setSelectedSurvey] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    getSurveysFromServer();\r\n  }, []);\r\n\r\n  const switchDrawer = (value) => {\r\n    setShowDrawer(value);\r\n  };\r\n\r\n  const getSurveysFromServer = () => {\r\n    fetch(\"http://localhost:9000/getSurveys\")\r\n      .then((response) => response.json())\r\n      .then((data) => setSurveys(data));\r\n  };\r\n\r\n  const addSurvey = (newSurvey) => {\r\n    if (newSurvey.id) {\r\n      // I'm editing an already existing survey\r\n      fetch(\"http://localhost:9000/editSurvey\", {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newSurvey),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.status === \"saved\") {\r\n            getSurveysFromServer();\r\n          } else console.error(\"FAILED TO INSERT THE SURVEY\");\r\n        });\r\n    } else {\r\n      fetch(\"http://localhost:9000/insertSurvey\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newSurvey),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.status === \"saved\") {\r\n            getSurveysFromServer();\r\n          } else console.error(\"FAILED TO INSERT THE SURVEY\");\r\n        });\r\n    }\r\n  };\r\n\r\n  const deleteSurvey = (survey) => {\r\n    fetch(\"http://localhost:9000/deleteSurvey\", {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(survey),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.status === \"saved\") {\r\n          fetch(\"http://localhost:9000/getSurveys\")\r\n            .then((response) => response.json())\r\n            .then((data) => setSurveys(data));\r\n        } else console.error(\"FAILED TO DELETE THE SURVEY\");\r\n      });\r\n  };\r\n\r\n  const checkPage = () => {\r\n    switch (page) {\r\n      case pages.MAIN:\r\n        return (\r\n          <MainPage\r\n            surveys={surveys}\r\n            setPage={setPage}\r\n            selectSurvey={setSelectedSurvey}\r\n            deleteSurvey={deleteSurvey}\r\n          />\r\n        );\r\n      case pages.NEWSURVEY:\r\n        return (\r\n          <NewSurvey\r\n            json={selectedSurvey}\r\n            setPage={setPage}\r\n            addSurvey={addSurvey}\r\n          />\r\n        );\r\n      case pages.VIEWSURVEY:\r\n        return (\r\n          <SelectedSurveyContext.Provider value={selectedSurvey}>\r\n            <View />\r\n          </SelectedSurveyContext.Provider>\r\n        );\r\n    }\r\n  };\r\n\r\n  const renderDrawer = () => {\r\n    const renderIcon = (index) => {\r\n      switch (index) {\r\n        case 0:\r\n          return <DescriptionIcon />;\r\n        case 1:\r\n          return <TrendingUpIcon />;\r\n      }\r\n    };\r\n    const onItemClick = (index) => {\r\n      switch (index) {\r\n        case 0:\r\n          setPage(pages.MAIN);\r\n          setShowDrawer(false);\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    };\r\n    return (\r\n      <div className={classes.drawer}>\r\n        <List>\r\n          {[\"Surveys\", \"Statistics\"].map((text, index) => (\r\n            <ListItem\r\n              button\r\n              key={text}\r\n              onClick={() => {\r\n                onItemClick(index);\r\n              }}\r\n            >\r\n              <ListItemIcon>{renderIcon(index)}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar setDrawer={switchDrawer} />\r\n      {checkPage()}\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={showDrawer}\r\n        onClose={() => {\r\n          switchDrawer(false);\r\n        }}\r\n      >\r\n        {renderDrawer()}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\tmpSurveys.js",["167","168"],"import {\r\n  ShortAnswer,\r\n  Paragraph,\r\n  MultipleChoice,\r\n  CheckBox,\r\n  Survey,\r\n  SurveyPage,\r\n} from \"./surveys/Survey\";\r\n\r\nlet firstQuestion = new ShortAnswer(\"My Title\", true);\r\nlet secondQuestion = new Paragraph(\"My Paragraph Title\", true);\r\nlet thirdQuestion = new MultipleChoice(\"My MultipleChoice Title\", true, [\r\n  \"firstMCChoice\",\r\n  \"secondMCChoice\",\r\n  \"thirdMCCChoice\",\r\n]);\r\nlet fourthQuestion = new CheckBox(\"My Checkbox Title\", true, [\r\n  \"firstCBChoice\",\r\n  \"secondCBChoice\",\r\n  \"thirdCBChoice\",\r\n  \"fourthCBChoice\",\r\n]);\r\n\r\nlet firstPage = new SurveyPage([\r\n  firstQuestion,\r\n  secondQuestion,\r\n  thirdQuestion,\r\n  fourthQuestion,\r\n]);\r\nlet secondPage = new SurveyPage([firstQuestion]);\r\n\r\nlet otherSurvey = new Survey(\"Prova1\", \"Desc1\", [firstPage]);\r\nlet mySurvey = {\r\n  title: \"Random01\",\r\n  description: \"RandomDesc\",\r\n  pages: [\r\n    {\r\n        \"pageId\" : \"1\",\r\n        \"contents\": [\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Multiple Choice\",\r\n              \"title\": \"The AI must decide: Is 40% or more of the nutrients on then plate fat?\",\r\n              \"description\": \"What will the AI decide?\",\r\n              \"choices\": [\r\n                {\r\n                  \"id\" : \"1\",\r\n                  \"value\": \"No, 30% of the nutrients on this plate is not fat.\"\r\n                },\r\n                {\r\n                  \"id\" : \"2\",\r\n                  \"value\": \"Yes, 30% of the nutrients on this plate is not fat.\"\r\n                }\r\n              ],\r\n              \"images\": [\"image01.png\", \"image02.png\"]\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Short Text\",\r\n              \"title\": \"The AI generated its prediction giving this motivation: it is represented as two curved lines\",\r\n              \"description\": \"What is your decision?\"\r\n            }\r\n          },\r\n          {\r\n            \"type\": \"Question\",\r\n            \"data\": {\r\n              \"type\": \"Ranking\",\r\n              \"title\": \"Employee Performance review\",\r\n              \"description\": \"Rank these elements sorting them by importance to you\",\r\n              \"choices\": [\r\n                {\r\n                  \"id\": \"1\",\r\n                  \"value\": \"Job Knowledge\"\r\n                },\r\n                {\r\n                  \"id\": \"2\",\r\n                  \"value\": \"Work Quality\"\r\n                },\r\n                {\r\n                  \"id\": \"3\",\r\n                  \"value\": \"Attendance/punctuality\"\r\n                },\r\n                {\r\n                  \"id\": \"4\",\r\n                  \"value\": \"Productivity\"\r\n                },\r\n                {\r\n                  \"id\": \"5\",\r\n                  \"value\": \"Communication Skills\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        pageId: 2,\r\n        contents: [\r\n          {\r\n            contentId: 1,\r\n            type: \"Image\",\r\n            data: {\r\n              title: \"ImagetitleProva\",\r\n              randomName: \"Pippo\",\r\n              randomStatus: true,\r\n            },\r\n          },\r\n          {\r\n            contentId: 2,\r\n            type: \"Random Number\",\r\n            data: { name: \"Pippo\", minRange: 0, maxRange: 100 },\r\n          },\r\n          {\r\n            contentId: 3,\r\n            type: \"Random Number\",\r\n            data: { name: \"Gatto\", minRange: 0, maxRange: 100 },\r\n          },        \r\n        ],\r\n      },\r\n    {\r\n      pageId: 3,\r\n      contents: [\r\n        \r\n        {\r\n          contentId: 1,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Cane\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n        {\r\n          contentId: 2,\r\n          type: \"Random Number\",\r\n          data: { name: \"Cane\", minRange: 0, maxRange: 100 },\r\n        }, \r\n        {\r\n          contentId: 3,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Gatto\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nlet mySimpleSurvey = {\r\n  title: \"Random01\",\r\n  description: \"RandomDesc\",\r\n  pages: [\r\n    {\r\n      pageId: 1,\r\n      contents: [\r\n        {\r\n          contentId: 1,\r\n          type: \"Random Number\",\r\n          data: { name: \"Pippo\", minRange: 0, maxRange: 100 },\r\n        },\r\n        {\r\n          contentId: 2,\r\n          type: \"Image\",\r\n          data: {\r\n            title: \"ImagetitleProva\",\r\n            randomName: \"Pippo\",\r\n            randomStatus: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport { mySimpleSurvey, mySurvey };\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\editorStyles.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\SelectedSurveyContext.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\pages.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NavBar.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\MainPage.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewSurvey.js",["169","170","171","172","173","174","175","176","177"],"/* eslint-disable default-case */\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\n// Dialog\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Grid,\r\n  IconButton,\r\n  Input,\r\n  TextField,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport NewQuestion from \"./NewQuestion\";\r\nimport ImageInputBtn from \"./ImageInputBtn\";\r\nimport pages from \"../pages\";\r\n// DragAndDrop\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\n// Styles\r\nimport { newSurveyStyle } from \"../../editorStyles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VideoCallIcon from \"@material-ui/icons/VideoCall\";\r\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\r\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\r\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\r\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\r\nimport NewImage from \"./NewImage\";\r\nimport NewTextField from \"./NewTextField\";\r\nimport NewRandomNumber from \"./NewRandomNumber\";\r\nimport InsertPhotoIcon from \"@material-ui/icons/InsertPhoto\";\r\nimport PlaceholdersContext from \"./PlaceholdersContext\";\r\n\r\nimport content_type from \"../../contentTypes\";\r\n\r\nconst initialData = [\r\n  {\r\n    pageId: 1,\r\n    contents: [\r\n      { contentId: 1, type: content_type.QUESTION, data: {} },\r\n      { contentId: 2, type: content_type.QUESTION, data: {} },\r\n    ],\r\n  },\r\n];\r\n\r\nconst useStyles = newSurveyStyle;\r\n\r\nfunction NewSurvey(props) {\r\n  const classes = useStyles();\r\n  const [surveyData, setSurveyData] = useState({\r\n    title: props.json ? props.json.title : \"\",\r\n    description: props.json ? props.json.description : \"\",\r\n  });\r\n  const [sections, setSections] = useState(\r\n    props.json ? props.json.pages : initialData\r\n  );\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [sectionIdCounter, setSectionIdCounter] = useState(\r\n    props.json ? props.json.pages.length : 2\r\n  );\r\n  const [contentIdCounter, setContentIdCounter] = useState(3);\r\n  const [randomNumbers, setRandomNumbers] = useState([\r\n    { pageId: 1, placeholders: [] },\r\n  ]);\r\n\r\n  const getMaxContentId = () => {\r\n    let maxContentId = -1;\r\n    props.json.pages.forEach((page) => {\r\n      page.contents.forEach((cont) => {\r\n        if (cont.contentId > maxContentId) maxContentId = cont.contentId;\r\n      });\r\n    });\r\n    return maxContentId + 1;\r\n  };\r\n\r\n  /*Initializes contentId counter*/\r\n  useEffect(() => {\r\n    if (props.json) {\r\n      const maxContent = getMaxContentId();\r\n      setContentIdCounter(maxContent);\r\n      updateRandomNumbers(true);\r\n    }\r\n  }, []);\r\n\r\n  /*  Updates the state when the drag ends */\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n    console.log(\"The destination is \", destination);\r\n    console.log(\"The source is \", source);\r\n    console.log(\"The draggableId is \", draggableId);\r\n    if (!destination) return;\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    )\r\n      return;\r\n\r\n    let newSections = [...sections]; // array of sections\r\n    let sourcePage = sections.find(\r\n      (c) => c.contentId.toString() === source.droppableId\r\n    ); // section with ID and content\r\n    const sourcePageIndex = sections.indexOf(sourcePage);\r\n    /* Alternative sourcePageIndex -->\r\n    const sourcePageIndex = sections.findIndex(\r\n      (c) => c.id.toString() === source.droppableId\r\n    );\r\n    */\r\n    const movedContent = sourcePage.contents.find(\r\n      (c) => c.contentId.toString() === draggableId\r\n    ); // content that has to be moved\r\n\r\n    // Remove the content from the source page\r\n    sourcePage.contents.splice(source.index, 1);\r\n\r\n    // If the content is moved in the same section that it was before\r\n    if (source.droppableId === destination.droppableId) {\r\n      // Insert the content in the new position of the same section\r\n      sourcePage.contents.splice(destination.index, 0, movedContent);\r\n      // Update\r\n      newSections[sourcePageIndex] = sourcePage;\r\n      setSections(newSections);\r\n      return;\r\n    }\r\n\r\n    let destinationPage = sections.find(\r\n      (c) => c.pageId.toString() === destination.droppableId\r\n    );\r\n    const destinationPageIndex = sections.indexOf(destinationPage);\r\n    destinationPage.contents.splice(destination.index, 0, movedContent);\r\n    // If the source section has no more content, remove it\r\n    newSections[destinationPageIndex] = destinationPage;\r\n    if (sourcePage.contents.length === 0) {\r\n      newSections.splice(sourcePageIndex, 1);\r\n      let counter = sourcePage.pageId;\r\n      for (let s of newSections) {\r\n        if (s.pageId > sourcePage.pageId) {\r\n          s.pageId = counter;\r\n          counter++;\r\n        }\r\n      }\r\n    } else {\r\n      newSections[sourcePageIndex] = sourcePage;\r\n    }\r\n    setSections(newSections);\r\n\r\n    /* OLD\r\n    let newState = content;\r\n    const movedContent = content.find((c) => c.id.toString() === draggableId);\r\n\r\n    newState.splice(source.index, 1);\r\n    newState.splice(destination.index, 0, movedContent);\r\n    setContent(newState);*/\r\n  };\r\n\r\n  const onSaveSurvey = () => {\r\n    const changeImages = (json) => {\r\n      json.pages.forEach((page) => {\r\n        page.contents.forEach((cont) => {\r\n          if (cont.type === content_type.QUESTION) {\r\n            if (\r\n              cont.data.images &&\r\n              Array.isArray(cont.data.images) &&\r\n              cont.data.images.length !== 0\r\n            ) {\r\n              cont.data.images.map((img) => {\r\n                return img.name;\r\n              });\r\n            }\r\n          }\r\n          if (cont.type === content_type.IMAGE) {\r\n            if (!cont.data.randomStatus || cont.data.randomStatus === false) {\r\n              cont.data.img = cont.data.img.name;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      // Restoring sections to their initial state\r\n      setSections(initialData);\r\n      return json;\r\n    };\r\n\r\n    /*  TODO: save survey data */\r\n    console.log(\"The content is\");\r\n    console.log(sections);\r\n    let finalJSON = {\r\n      title: surveyData.title,\r\n      description: surveyData.description,\r\n      pages: sections,\r\n    };\r\n    console.log(finalJSON);\r\n    if (props.json) finalJSON.id = props.json.id;\r\n    props.addSurvey(changeImages(finalJSON));\r\n    props.setPage(pages.MAIN);\r\n  };\r\n\r\n  const onChangeSurveyTitle = (e) => {\r\n    setSurveyData({ ...surveyData, title: e.target.value });\r\n  };\r\n\r\n  const onChangeSurveyDescription = (e) => {\r\n    setSurveyData({ ...surveyData, description: e.target.value });\r\n  };\r\n\r\n  const increaseSectionCounter = () => {\r\n    const newSectionId = sectionIdCounter;\r\n    setSectionIdCounter(newSectionId + 1);\r\n    return newSectionId;\r\n  };\r\n\r\n  const increaseContentCounter = () => {\r\n    const newContentId = contentIdCounter;\r\n    setContentIdCounter(newContentId + 1);\r\n    return newContentId;\r\n  };\r\n\r\n  const updateRandomNumbers = (propsBool) => {\r\n    let newRandomNumbers = [];\r\n    const tempSections =\r\n      propsBool && propsBool === true ? props.json.pages : sections;\r\n    tempSections.forEach((sec) => {\r\n      let phs = [];\r\n      sec.contents.forEach((c, cix) => {\r\n        if (c.type === content_type.RANDOM_NUMBER)\r\n          phs.push({ index: cix, name: c.data.name });\r\n      });\r\n      newRandomNumbers.push({ pageId: sec.pageId, placeholders: phs });\r\n    });\r\n    setRandomNumbers(newRandomNumbers);\r\n  };\r\n\r\n  const renderSections = () => {\r\n    return sections.map((section, sectionIndex) => {\r\n      const addContent = (newContent) => {\r\n        let newSections = [...sections];\r\n        newSections[sectionIndex].contents = [\r\n          ...newSections[sectionIndex].contents,\r\n          newContent,\r\n        ];\r\n        setSections(newSections);\r\n      };\r\n\r\n      const onAddQuestion = () => {\r\n        const newContentId = increaseContentCounter();\r\n        const newQuestion = {\r\n          contentId: newContentId,\r\n          type: content_type.QUESTION,\r\n          data: {},\r\n        };\r\n        addContent(newQuestion);\r\n      };\r\n\r\n      const onAddImage = () => {\r\n        const newContentId = increaseContentCounter();\r\n        const newImage = {\r\n          contentId: newContentId,\r\n          type: content_type.IMAGE,\r\n          data: {},\r\n        };\r\n        addContent(newImage);\r\n      };\r\n\r\n      const onAddTextField = () => {\r\n        const newContentId = increaseContentCounter();\r\n        const newTextField = {\r\n          contentId: newContentId,\r\n          type: content_type.TEXT,\r\n          data: {},\r\n        };\r\n        addContent(newTextField);\r\n      };\r\n\r\n      const onAddRandomNumber = () => {\r\n        const newContentId = increaseContentCounter();\r\n        const newRandomNumber = {\r\n          contentId: newContentId,\r\n          type: content_type.RANDOM_NUMBER,\r\n          data: {},\r\n        };\r\n        addContent(newRandomNumber);\r\n        updateRandomNumbers();\r\n      };\r\n\r\n      const onOpenEmbedVideoDialog = () => {\r\n        setOpenDialog(true);\r\n      };\r\n\r\n      const onCloseEmbedVideoDialog = () => {\r\n        setOpenDialog(false);\r\n      };\r\n\r\n      const onAddVideo = (url) => {\r\n        const newContentId = increaseContentCounter();\r\n        const newVideo = {\r\n          contentId: newContentId,\r\n          type: content_type.VIDEO,\r\n          data: { url: url },\r\n        };\r\n        addContent(newVideo);\r\n      };\r\n\r\n      const onAddSection = () => {\r\n        const newContentId = increaseContentCounter();\r\n\r\n        const newSectionId = increaseSectionCounter();\r\n\r\n        const newSection = {\r\n          pageId: newSectionId,\r\n          contents: [\r\n            {\r\n              contentId: newContentId,\r\n              type: content_type.QUESTION,\r\n              data: {\r\n                title: \"\",\r\n              },\r\n            },\r\n          ],\r\n        };\r\n        let newSections = [...sections];\r\n        /*let counter = section.id + 1;\r\n        for (let s of newSections) {\r\n          if (s.id >= section.id) {\r\n            s.id = counter;\r\n            counter++;\r\n          }\r\n        }*/\r\n        newSections.splice(sectionIndex, 0, newSection);\r\n        console.log(\"Added a new section, the sections now are: \", newSections);\r\n        setSections(newSections);\r\n      };\r\n\r\n      const onRemoveSection = () => {\r\n        let newSections = sections.filter((s, i) => i !== sectionIndex);\r\n        /*let counter = section.id;\r\n        for (let s of newSections) {\r\n          if (s.id > section.id) {\r\n            s.id = counter;\r\n            counter++;\r\n          }\r\n        }*/\r\n        console.log(\"The new sectins are\", newSections);\r\n        setSections(newSections);\r\n        updateRandomNumbers();\r\n      };\r\n\r\n      const renderContent = (pageContent) => {\r\n        /* TODO: consider move video parsing into a specific component */\r\n        const parseVideoID = (url) => {\r\n          const regexResult = url.match(/^[\\s\\S]*watch\\?v=([\\s\\S]*)[\\s\\S]*$/);\r\n          const separatorIndex = regexResult[1].indexOf(\"&\");\r\n          if (separatorIndex !== -1)\r\n            return regexResult[1].substring(0, separatorIndex);\r\n          return regexResult[1];\r\n        };\r\n\r\n        const getVideoThumbnail = (videoID) => {\r\n          return `http://img.youtube.com/vi/${videoID}/0.jpg`;\r\n        };\r\n\r\n        return pageContent.map((cont, contentIndex) => {\r\n          const removeContent = () => {\r\n            if (sections.length === 1 && section.contents.length === 1) {\r\n              alert(\"You must have at least one content in your survey!\");\r\n              return;\r\n            }\r\n            let newContent = section.contents.filter(\r\n              (item, itemIndex) => contentIndex !== itemIndex\r\n            );\r\n            if (newContent.length !== 0) {\r\n              /*let counter = 1;\r\n              for (let c of newContent) {\r\n                c.id = counter;\r\n                counter++;\r\n              }*/\r\n              let newSections = [...sections];\r\n              newSections[sectionIndex].contents = newContent;\r\n              setSections(newSections);\r\n            } else {\r\n              onRemoveSection();\r\n            }\r\n            updateRandomNumbers();\r\n          };\r\n\r\n          const updateContent = (updates) => {\r\n            let newContent = { ...cont };\r\n            newContent.data = { ...cont.data, ...updates };\r\n            // console.log(\"The new content is now: \", newContent);\r\n            let newSections = [...sections];\r\n            newSections[sectionIndex].contents[contentIndex] = newContent;\r\n            // Use a promise to make the state updates not batch together\r\n            Promise.resolve().then(() => {\r\n              setSections(newSections);\r\n              updateRandomNumbers();\r\n            });\r\n          };\r\n\r\n          const moveContentUp = () => {\r\n            if (contentIndex === 0) {\r\n              if (sectionIndex !== 0) {\r\n                // Move to the section before the current one\r\n                let destContent = sections[sectionIndex - 1].contents;\r\n                //cont.id = destContent.length + 1;\r\n                destContent = [...destContent, cont];\r\n                section.contents.splice(contentIndex, 1);\r\n                let newSections = [...sections];\r\n                newSections[sectionIndex].contents = section.contents;\r\n                newSections[sectionIndex - 1].contents = destContent;\r\n                setSections(newSections);\r\n                updateRandomNumbers();\r\n                if (section.contents.length === 0) onRemoveSection();\r\n              }\r\n            } else {\r\n              // Move up on the same section\r\n              let newContent = [...sections[sectionIndex].contents];\r\n              newContent.splice(contentIndex, 1);\r\n              newContent.splice(contentIndex - 1, 0, cont);\r\n              let newSections = [...sections];\r\n              newSections[sectionIndex].contents = newContent;\r\n              setSections(newSections);\r\n              updateRandomNumbers();\r\n            }\r\n          };\r\n\r\n          const moveContentDown = () => {\r\n            if (contentIndex === section.contents.length - 1) {\r\n              if (sectionIndex !== sections.length - 1) {\r\n                // Move to the section after the current one\r\n                let destContent = sections[sectionIndex + 1].contents;\r\n                destContent = [cont, ...destContent];\r\n                section.contents.splice(contentIndex, 1);\r\n                let newSections = [...sections];\r\n                newSections[sectionIndex].contents = section.contents;\r\n                newSections[sectionIndex + 1].contents = destContent;\r\n                setSections(newSections);\r\n                updateRandomNumbers();\r\n                if (section.contents.length === 0) onRemoveSection();\r\n              }\r\n            } else {\r\n              // Move down on the same section\r\n              let newContent = [...sections[sectionIndex].contents];\r\n              newContent.splice(contentIndex, 1);\r\n              newContent.splice(contentIndex + 1, 0, cont);\r\n              let newSections = [...sections];\r\n              newSections[sectionIndex].contents = newContent;\r\n              setSections(newSections);\r\n              updateRandomNumbers();\r\n            }\r\n          };\r\n\r\n          const previousPlaceholders = () => {\r\n            let previousPhArray = [];\r\n            randomNumbers.forEach((sec, secIx) => {\r\n              if (secIx < sectionIndex) {\r\n                sec.placeholders.forEach((ph) => previousPhArray.push(ph.name));\r\n              }\r\n              if (secIx === sectionIndex) {\r\n                sec.placeholders.forEach((ph) => {\r\n                  if (ph.index < contentIndex) {\r\n                    previousPhArray.push(ph.name);\r\n                  }\r\n                });\r\n              }\r\n            });\r\n            return previousPhArray;\r\n          };\r\n\r\n          const move = { up: moveContentUp, down: moveContentDown };\r\n\r\n          switch (cont.type) {\r\n            case content_type.QUESTION:\r\n              return (\r\n                <NewQuestion\r\n                  key={cont.contentId}\r\n                  content={cont.data}\r\n                  id={cont.contentId}\r\n                  index={contentIndex}\r\n                  section={sectionIndex}\r\n                  removeQuestion={removeContent}\r\n                  move={move}\r\n                  update={updateContent}\r\n                />\r\n              );\r\n            case content_type.IMAGE:\r\n              return (\r\n                <NewImage\r\n                  key={cont.contentId}\r\n                  id={cont.contentId}\r\n                  index={contentIndex}\r\n                  image={cont.data.img}\r\n                  data={cont.data}\r\n                  removeImage={removeContent}\r\n                  move={move}\r\n                  update={updateContent}\r\n                  randomNumbers={previousPlaceholders()}\r\n                />\r\n              );\r\n            case content_type.VIDEO:\r\n              /* NOTE: there's no meaning in showing the embedded video in\r\n                 the survey editor, therefore we get the video thumbnail and\r\n                 show that as an image. */\r\n              const thumbnail = getVideoThumbnail(parseVideoID(cont.data.url));\r\n              return (\r\n                <NewImage\r\n                  key={cont.contentId}\r\n                  id={cont.contentId}\r\n                  index={contentIndex}\r\n                  url={thumbnail}\r\n                  videoUrl={cont.data.url}\r\n                  removeImage={removeContent}\r\n                  move={move}\r\n                  update={updateContent}\r\n                />\r\n              );\r\n            case content_type.TEXT:\r\n              return (\r\n                <NewTextField\r\n                  key={cont.contentId}\r\n                  id={cont.contentId}\r\n                  index={contentIndex}\r\n                  removeTextField={removeContent}\r\n                  move={move}\r\n                  update={updateContent}\r\n                  data={cont.data}\r\n                  randomNumbers={previousPlaceholders()}\r\n                />\r\n              );\r\n            case content_type.RANDOM_NUMBER:\r\n              return (\r\n                <NewRandomNumber\r\n                  key={cont.contentId}\r\n                  id={cont.contentId}\r\n                  data={cont.data}\r\n                  index={contentIndex}\r\n                  removeRandomNumber={removeContent}\r\n                  move={move}\r\n                  update={updateContent}\r\n                />\r\n              );\r\n          }\r\n        });\r\n      };\r\n\r\n      // const sectionPlaceholders = randomNumbers[sectionIndex].placeholders;\r\n\r\n      return (\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          id={\"droppablegridcontainer-\" + section.pageId}\r\n          className={\r\n            sections.length === 1\r\n              ? classes.questionsContainerGridHidden\r\n              : classes.questionsContainerGrid\r\n          }\r\n          key={\"droppablegridcontainer-\" + section.pageId}\r\n        >\r\n          {sections.length === 1 ? (\r\n            <Fragment />\r\n          ) : (\r\n            <Box className={classes.sectionNameContainer}>\r\n              <Typography variant=\"h6\">\r\n                {\"Section \" + (sectionIndex + 1)}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          {renderContent(section.contents)}\r\n          <Box\r\n            component=\"span\"\r\n            id={\"managesurveybox-\" + section.pageId}\r\n            className={\r\n              sections.length === 1\r\n                ? classes.manageSurveyBox\r\n                : classes.manageSurveyBoxSection\r\n            }\r\n          >\r\n            <Tooltip title=\"Add question\">\r\n              <IconButton\r\n                className={classes.manageSurveyBoxIcon}\r\n                onClick={() => {\r\n                  onAddQuestion();\r\n                }}\r\n              >\r\n                <AddIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Insert image\">\r\n              {/* OLD <ImageInputBtn changeImage={onAddImage} />*/}\r\n              <IconButton\r\n                className={classes.manageSurveyBoxIcon}\r\n                onClick={() => {\r\n                  onAddImage();\r\n                }}\r\n              >\r\n                <InsertPhotoIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            {/* ADD LATER\r\n            <Tooltip title=\"Embed video\">\r\n              <IconButton\r\n                className={classes.manageSurveyBoxIcon}\r\n                onClick={onOpenEmbedVideoDialog}\r\n              >\r\n                <VideoCallIcon />\r\n              </IconButton>\r\n            </Tooltip>*/}\r\n            <Tooltip title=\"Add text field\">\r\n              <IconButton\r\n                className={classes.manageSurveyBoxIcon}\r\n                onClick={onAddTextField}\r\n              >\r\n                <TextFieldsIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Add random number\">\r\n              <IconButton\r\n                className={classes.manageSurveyBoxIcon}\r\n                onClick={onAddRandomNumber}\r\n              >\r\n                <BookmarkIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Add section\">\r\n              <IconButton\r\n                className={classes.manageSurveyBoxIcon}\r\n                onClick={onAddSection}\r\n              >\r\n                <PostAddIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            {sections.length !== 1 ? (\r\n              <Tooltip title=\"Remove section\">\r\n                <IconButton\r\n                  className={classes.manageSurveyBoxIcon}\r\n                  onClick={onRemoveSection}\r\n                >\r\n                  <DeleteSweepIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            ) : (\r\n              <Fragment />\r\n            )}\r\n          </Box>\r\n          {openDialog === true ? (\r\n            <EmbedVideoDialog\r\n              open={openDialog}\r\n              handleClose={onCloseEmbedVideoDialog}\r\n              handleSubmit={onAddVideo}\r\n            />\r\n          ) : (\r\n            <Fragment />\r\n          )}\r\n        </Grid>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      id=\"newsurveycontainer\"\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      className={classes.surveyGrid}\r\n    >\r\n      <Box width=\"60%\" className={classes.surveyForm} id=\"firstboxcontainer\">\r\n        <Box width=\"100%\">\r\n          <form style={{ width: \"100%\" }}>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              id=\"secondgridcontainer\"\r\n            >\r\n              <Box width=\"70%\" className={classes.titleInputBox}>\r\n                <Input\r\n                  placeholder=\"Your survey title\"\r\n                  inputProps={{ \"aria-label\": \"description\" }}\r\n                  className={classes.titleInput}\r\n                  fullWidth\r\n                  value={surveyData.title}\r\n                  onChange={onChangeSurveyTitle}\r\n                />\r\n              </Box>\r\n              <Box width=\"50%\" className={classes.titleInputBox}>\r\n                <Input\r\n                  placeholder=\"Your survey description\"\r\n                  inputProps={{ \"aria-label\": \"description\" }}\r\n                  className={classes.descInput}\r\n                  fullWidth\r\n                  value={surveyData.description}\r\n                  onChange={onChangeSurveyDescription}\r\n                />\r\n              </Box>\r\n            </Grid>\r\n            {renderSections()}\r\n          </form>\r\n          <Grid item className={classes.bottomButtonsContainer}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.bottomButton}\r\n              onClick={() => {\r\n                props.setPage(pages.MAIN);\r\n              }}\r\n            >\r\n              Back to home page\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.bottomButton}\r\n              onClick={() => {\r\n                onSaveSurvey();\r\n              }}\r\n            >\r\n              Save survey\r\n            </Button>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n      {/*{openDialog === true ? (\r\n        <EmbedVideoDialog\r\n          open={openDialog}\r\n          handleClose={onCloseEmbedVideoDialog}\r\n          handleSubmit={onAddVideo}\r\n        />\r\n      ) : (\r\n        <Fragment />\r\n      )}*/}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction EmbedVideoDialog(props) {\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setUrl(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.open}\r\n      onClose={props.handleClose}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">Embed video</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          To embed a YouTube video into the survey, please insert its URL.\r\n        </DialogContentText>\r\n        <TextField\r\n          autoFocus\r\n          margin=\"dense\"\r\n          id=\"embedvideourlfield\"\r\n          label=\"URL\"\r\n          type=\"url\"\r\n          fullWidth\r\n          onChange={handleChange}\r\n          value={url}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={() => {\r\n            props.handleClose();\r\n          }}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            props.handleSubmit(url);\r\n            props.handleClose();\r\n          }}\r\n          color=\"primary\"\r\n        >\r\n          Embed\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default NewSurvey;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\View.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\JsonLoader.js",["178","179","180","181","182","183"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport { Box, Button } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport SelectedSurveyContext from \"../../SelectedSurveyContext\";\r\nimport Page from \"./Page.js\";\r\nimport RandomNamesContext from \"./RandomNamesContext\";\r\nimport DataCollectorContext from \"./DataCollectorContext.js\";\r\nimport AnswersSummary from \"./AnswersSummary.js\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\n//Componente che si occupa di prelevare i dati dal Json che descrive il questionario e tutti gli elementi di cui è composto,\r\n//divisi per pagine. per ogni tipo di domanda prende le informazioni presenti e le formatta in modo che siano\r\n//pronte alla visualizzazione (che avverrà passando il componente a View e usandolo come <JsonLoader />)\r\n\r\nfunction JsonLoader(props) {\r\n  const classes = useStyles();\r\n  const jsonData = useContext(SelectedSurveyContext);\r\n  const [currentPage, setCurrentPage] = useState(0); //Stato usato per conoscere la pagina corrente del questionario\r\n  const [vPages, setVPages] = useState([0]); //Stato che tiene traccia di tutte le pagine visitate dall'utente\r\n  const [randomNames, setRandomNames] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [showAnswers, setShowAnswers] = useState(false);\r\n\r\n  /*---GESTIONE DELLE PAGINE DEL QUESTIONARIO---*/\r\n  /*[ES6] action è il parametro passato (indica se l'utente vuole andare alla prossima pagina (1) o quella precedente (0)), \r\n\t'e' è l'event object ritornato*/\r\n  const handlePaging = (action) => (e) => {\r\n    let visitedPages = [...vPages]; //Array ausiliario usato per settare lo state di vPages\r\n\r\n    //In base all'azione scelta (Next o Back) viene settato la pagina corrente\r\n    if (action) {\r\n      setCurrentPage(currentPage + 1);\r\n\r\n      if (visitedPages == undefined) {\r\n        //se non ci sono pagine visitate allora imposta la pagina 0\r\n        visitedPages.push(currentPage);\r\n      } else if (!visitedPages.includes(currentPage)) {\r\n        visitedPages.push(currentPage);\r\n      }\r\n    } else {\r\n      setCurrentPage(currentPage - 1);\r\n      if (visitedPages == undefined) {\r\n        visitedPages.push(currentPage);\r\n      } else if (!visitedPages.includes(currentPage)) {\r\n        visitedPages.push(currentPage);\r\n      }\r\n    }\r\n    setVPages(visitedPages);\r\n  };\r\n\r\n  const newRenderHeader = () => {\r\n    const { title, description } = jsonData;\r\n\r\n    return (\r\n      <Typography component=\"div\" color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.questionnaireTitleContainer}>\r\n              {title}\r\n            </Box>\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {description}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  const saveSurvey = () => {\r\n    console.log(\"The answers are: \", answers);\r\n  };\r\n\r\n  const onClickShowAnswers = () => {\r\n    setShowAnswers(true);\r\n  };\r\n\r\n  /* Funzione di callback per le domande */\r\n  const updateAnswer = (sectionIndex, contentIndex, answer) => {\r\n    // Update the answer at sectionIndex and contentIndex\r\n    console.log(\"The section index is \", sectionIndex);\r\n    console.log(\"The content index is \", contentIndex);\r\n\r\n    if (answers.length > 0) {\r\n      let newAnswers = [...answers];\r\n      newAnswers[sectionIndex][contentIndex].answer = answer;\r\n      setAnswers(newAnswers);\r\n      console.log(\"The answer is \", newAnswers);\r\n    }\r\n  };\r\n\r\n  /* Usiamo questo useEffect per impostare da subito la struttura delle risposte\r\n  in base alla struttura del JSON passato dal MainPage.\r\n  Lo vado a runnare dopo che setto randomNames in modo tale da avere anche le informazioni\r\n  riguardante i valori random */\r\n  useEffect(() => {\r\n    if (randomNames.length > 0) {\r\n      console.log(\"Running useEffect for answer setting\");\r\n      let initialAnswers = [];\r\n      jsonData.pages.forEach((page) => {\r\n        let pageArray = [];\r\n        page.contents.forEach((content) => {\r\n          if (content.type === \"Question\") {\r\n            if (content.data.type === \"Ranking\") {\r\n              pageArray.push({\r\n                contentType: content.type,\r\n                answer: content.data.choices,\r\n              });\r\n            } else {\r\n              pageArray.push({ contentType: content.type, answer: null });\r\n            }\r\n          } else {\r\n            if (\r\n              content.data.randomStatus &&\r\n              content.data.randomStatus === true\r\n            ) {\r\n              console.log(\"The item randomName is \", content.data.randomName);\r\n              console.log(\"The randomNames are \", randomNames);\r\n              const foundValue = randomNames.find(\r\n                (rn) => rn.randomName === content.data.randomName\r\n              );\r\n              const randomValue = foundValue[\"generatedNumber\"];\r\n              pageArray.push({ contentType: content.type, randomValue });\r\n            } else {\r\n              pageArray.push({ contentType: content.type });\r\n            }\r\n          }\r\n        });\r\n        initialAnswers.push(pageArray);\r\n      });\r\n      setAnswers(initialAnswers);\r\n    } else {\r\n      console.log(\"Use effect answer: answers length not > 0\");\r\n    }\r\n  }, [randomNames]);\r\n\r\n  useEffect(() => {\r\n    const savedRandomNames = sessionStorage.getItem(\r\n      \"randomNames\" + jsonData.id\r\n    );\r\n    if (savedRandomNames !== null) {\r\n      const parsedNames = JSON.parse(savedRandomNames);\r\n      setRandomNames(parsedNames);\r\n    } else {\r\n      let randomNamesArray = [];\r\n      jsonData.pages.forEach((page) => {\r\n        page.contents.forEach((content) => {\r\n          if (content.type === \"Random Number\")\r\n            randomNamesArray.push(content.data);\r\n        });\r\n      });\r\n      if (randomNamesArray.length > 0) {\r\n        let totalNumbers;\r\n        let randomObjs = [];\r\n        fetch(\"http://localhost:9000/getImageNumbers\")\r\n          .then((response) => response.json())\r\n          .then((data) => (\r\n            totalNumbers = data.length - 1))\r\n          .then(() => {\r\n            randomNamesArray.forEach((name) => {\r\n             \r\n              let rand = Math.floor(\r\n                name.minRange + Math.random() * (name.maxRange - name.minRange)\r\n              );\r\n              let randInRange = rand % totalNumbers;\r\n              //if(randomObjs.length)\r\n              randomObjs.push({\r\n                randomName: name.name,\r\n                generatedNumber: randInRange,\r\n              });\r\n            });\r\n          })\r\n          .then(() => {\r\n            sessionStorage.setItem(\r\n              \"randomNames\" + jsonData.id,\r\n              JSON.stringify(randomObjs)\r\n            );\r\n            setRandomNames(randomObjs);\r\n          });\r\n      } else {\r\n        const newRandomNames = [\"noNames\"];\r\n        setRandomNames(newRandomNames);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const renderPages = () => {\r\n    console.log(\"Rendering the pages, the randomNames are: \", randomNames);\r\n    return (\r\n      <RandomNamesContext.Provider value={randomNames}>\r\n        <DataCollectorContext.Provider value={updateAnswer}>\r\n          <Page\r\n            sectionIndex={currentPage}\r\n            contents={jsonData.pages[currentPage].contents}\r\n          />\r\n        </DataCollectorContext.Provider>\r\n      </RandomNamesContext.Provider>\r\n    );\r\n  };\r\n\r\n  const newReturn = () => {\r\n    return (\r\n      <div>\r\n        {newRenderHeader()}\r\n        {renderPages()}\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"flex-end\"\r\n          className={classes.pagesSwitchButtonContainer}\r\n        >\r\n          {currentPage > 0 ? (\r\n            <Button\r\n              className={classes.pagesSwitchButton}\r\n              variant=\"contained\"\r\n              onClick={handlePaging(false)}\r\n              color=\"primary\"\r\n            >\r\n              Back\r\n            </Button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {currentPage === jsonData.pages.length - 1 ? (\r\n            <Button\r\n              className={classes.pagesSwitchButton}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={onClickShowAnswers}\r\n            >\r\n              Save\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              className={classes.pagesSwitchButton}\r\n              variant=\"contained\"\r\n              onClick={handlePaging(true)}\r\n              color=\"primary\"\r\n            >\r\n              Next\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const showAnswersOnClick = () => {\r\n    return (\r\n      <div>\r\n        <AnswersSummary answers={answers} jsonData={jsonData} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  switch (showAnswers) {\r\n    case true:\r\n      return showAnswersOnClick();\r\n\r\n    case false:\r\n      return newReturn();\r\n  }\r\n}\r\n\r\nexport default JsonLoader;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\viewStyles.js",["184","185"],"import { BottomNavigation } from \"@material-ui/core\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const questionStyle = makeStyles((theme) => ({\r\n\r\n\r\nroot: {\r\n\tflexGrow: 1,\r\n    paddingTop: \"50px\",\r\n    marginBotton: 0,\r\n    height: \"100%\",\r\n    overflow: \"hidden\",\r\n\r\n},\r\n\r\nwrapper: {\r\n\r\n\t    marginLeft: 'auto',\r\n     \tmarginRight: 'auto',\r\n     \tmarginBottom: \"20px\",\r\n\t\tpaddingBottom: \"10px\",\r\n     \twidth: 600,\r\n\t\theight: \"auto\",\r\n\t\tbackground: \"#fbffff\",\r\n\t\tborderRadius: \"2%\",\r\n},\r\n\r\ntitleContainer: {\r\n\r\n\tmarginTop: theme.spacing(4),\r\n\tmarginLeft: theme.spacing(4),\r\n\tmarginRight: theme.spacing(4),\r\n\tmarginBottom: 10,\r\n},\r\n\r\nelementContainer: {\r\n\r\n\tpaddingTop: theme.spacing(2),\r\n\tmarginLeft: theme.spacing(4),\r\n\tmarginRight: theme.spacing(4),\r\n\tmarginBottom: 10,\r\n},\r\n\r\nchoicesContainer: {\r\n\r\n\tmarginLeft: theme.spacing(4),\r\n\tmarginRight: theme.spacing(4),\r\n\t\r\n},\r\n\r\ngrid: {\r\n\r\n\tmarginLeft: theme.spacing(2),\r\n\tmarginBottom: theme.spacing(4),\r\n},\r\n\r\nimagePaperContainer: {\r\n\r\n\tmarginTop: 20,\r\n\tmarginLeft: 5,\r\n\tmarginRight: 90,\r\n\twidth: 200,\r\n\theight: 200,\r\n\tdisplay: \"inline-block\"\r\n},\r\n\r\nrankingElement: {\r\n\r\n\tmarginBottom: 30,\r\n},\r\n\r\nsingleImageContainer: {\r\n\r\n\tdisplay: 'flex',\r\n\tmarginLeft: theme.spacing(4),\r\n\tmarginRight: theme.spacing(4),\r\n\talignItems: 'center',\r\n\tjustifyContent: 'center',\r\n\twidth: 500,\r\n},\r\n\r\ntextField: {\r\n\r\n\tmarginLeft: theme.spacing(-4),\r\n\tmarginBottom: 30,\r\n\twidth: 500,\r\n},\r\n\r\nrankingContainer: {\r\n\r\n\t/*impostando la width del div si possono spostare gli elementi*/\r\n\tmarginLeft: 25,\r\n\tmarginRight: 30,\r\n\tpaddingTop: 20,\r\n\r\n},\r\n\r\nrankingValues: {\r\n\r\n\tpaddingTop: \"20px\",\r\n\r\n\r\n},\r\n\r\ndragndropItem: {\r\n\r\n\twidth: 250,\r\n\tmargin: 10,\r\n\r\n},\r\n\r\ndragHandleIcon: {\r\n\r\n\tleft: \"100%\",\r\n},\r\n\r\nrankingCardContent: {\r\n\r\n\tmargin: \"auto\",\r\n\t\r\n},\r\n\r\npagesSwitchButtonContainer: {\r\n\r\n\tmarginLeft: 'auto',\r\n \tmarginRight: 'auto',\r\n \tmarginBottom: \"20px\",\r\n\tpaddingBottom: \"10px\",\r\n \twidth: 600,\r\n},\r\n\r\npagesSwitchButton: {\r\n\r\n\tmarginRight: \"10px\",\r\n\r\n},\r\n\r\nquestionnaireTitleContainer: {\r\n\r\n\tmarginLeft: theme.spacing(4),\r\n\tmarginRight: theme.spacing(4),\r\n\tmarginTop: theme.spacing(4),\r\n\tfontSize: 26,\r\n},\r\n\r\nlabelContainer: {\r\n\r\n\tmarginLeft: theme.spacing(4),\r\n\tmarginRight: theme.spacing(4),\r\n\tpaddingTop: '30px',\r\n\tmarginBottom: 30,\r\n},\r\n\r\nimageFormat: {\r\n\r\n\twidth: \"100%\",\r\n\theight: \"100%\",\r\n},\r\n\r\nspacer: {\r\n\r\n\tmarginBottom: 30,\r\n}\r\n\r\n\r\n}));","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\ImageInputBtn.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewQuestion.js",["186","187","188","189"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport QuestionTypes from \"../questionTypes\";\r\n// Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\n// Icons\r\nimport ShortTextIcon from \"@material-ui/icons/ShortText\";\r\nimport SubjectIcon from \"@material-ui/icons/Subject\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\n// DragAndDrop\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n//Style\r\nimport { newQuestionStyle } from \"../../editorStyles\";\r\nimport ImageInputBtn from \"./ImageInputBtn\";\r\nimport questionTypes from \"../questionTypes\";\r\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion\";\r\nimport LinearScaleQuestion from \"./LinearScaleQuestion\";\r\nconst useStyles = newQuestionStyle;\r\n\r\nconst initialData = {\r\n  choices: [\r\n    { id: 1, value: \"\" },\r\n    { id: 2, value: \"\" },\r\n  ],\r\n  minValue: 1,\r\n  maxValue: 5,\r\n  minValueLabel: \"\",\r\n  maxValueLabel: \"\",\r\n};\r\n\r\nfunction NewQuestion(props) {\r\n  const classes = useStyles();\r\n  const [mandatory, setMandatory] = useState(false);\r\n\r\n  // TODO: use props to get values for the state\r\n  const [question, setQuestion] = useState({\r\n    title: props.content && props.content.title ? props.content.title : \"\",\r\n    type:\r\n      props.content && props.content.type && props.content.type !== \"QUESTION\"\r\n        ? props.content.type\r\n        : QuestionTypes.SHORT_TEXT,\r\n    description: props.content.description ? props.content.description : \"\",\r\n    choices: props.content.choices\r\n      ? props.content.choices\r\n      : [\r\n          { id: 1, value: \"\" },\r\n          { id: 2, value: \"\" },\r\n        ],\r\n    minValue: props.content.minValue ? props.content.minValue : 1,\r\n    maxValue: props.content.maxValue ? props.content.maxValue : 5,\r\n    minValueLabel: props.content.minValueLabel\r\n      ? props.content.minValueLabel\r\n      : \"\",\r\n    maxValueLabel: props.content.maxValueLabel\r\n      ? props.content.maxValueLabel\r\n      : \"\",\r\n  });\r\n  const [images, setImages] = useState([]);\r\n  const [desc, setDesc] = useState({\r\n    descText: \"\",\r\n    descStatus: false,\r\n  });\r\n\r\n  const updateQuestion = props.update;\r\n\r\n  /* Used to send the title, the type and the mandatory value to the parent */\r\n  useEffect(() => {\r\n    updateQuestion({\r\n      title: question.title,\r\n      type: question.type,\r\n      isMandatory: mandatory,\r\n    });\r\n  }, []);\r\n\r\n  const handleMandatory = () => {\r\n    setMandatory(!mandatory);\r\n    props.update({ isMandatory: !mandatory });\r\n  };\r\n\r\n  const onChangeTitle = (e) => {\r\n    setQuestion({ ...question, title: e.target.value });\r\n    props.update({ title: e.target.value });\r\n  };\r\n\r\n  const onChangeType = (e) => {\r\n    const newType = e.target.value;\r\n    setQuestion({ ...question, type: newType });\r\n    if (newType === questionTypes.LINEAR_SCALE) {\r\n      props.update({\r\n        type: newType,\r\n        minValue: question.minValue,\r\n        maxValue: question.maxValue,\r\n        minValueLabel: question.minValueLabel,\r\n        maxValueLabel: question.maxValueLabel,\r\n      });\r\n    } else props.update({ type: newType });\r\n  };\r\n\r\n  const onToggleDescription = () => {\r\n    setDesc({ ...desc, descStatus: !desc.descStatus });\r\n  };\r\n\r\n  const onChangeDescription = (e) => {\r\n    setQuestion({ ...question, description: e.target.value });\r\n    props.update({ description: e.target.value });\r\n  };\r\n\r\n  const renderSelectValue = (value) => {\r\n    return (\r\n      <ListItemText\r\n        primary={value}\r\n        className={classes.questionTypeRenderValue}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderDescription = () => {\r\n    if (!desc.descStatus) return;\r\n    return (\r\n      <Input\r\n        placeholder=\"Question description\"\r\n        inputProps={{ \"aria-label\": \"description\" }}\r\n        className={classes.questionDescription}\r\n        value={question.description}\r\n        onChange={onChangeDescription}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderImages = () => {\r\n    const onRemoveImg = (index) => {\r\n      let newImages = [...images];\r\n      newImages = newImages.filter((el, ix) => ix !== index);\r\n      setImages(newImages);\r\n      props.update({ images: newImages });\r\n    };\r\n\r\n    if (!Array.isArray(images)) {\r\n      return;\r\n    }\r\n    return (\r\n      <div>\r\n        {images.map((image, index) => (\r\n          <div className={classes.imgContainer}>\r\n            <img\r\n              src={URL.createObjectURL(image)}\r\n              alt={\"image-\" + index}\r\n              key={index}\r\n              className={classes.imgContent}\r\n            />\r\n            <Button\r\n              className={classes.removeImgBtn}\r\n              onClick={() => {\r\n                onRemoveImg(index);\r\n              }}\r\n            >\r\n              Remove image\r\n            </Button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const onRemoveQuestion = () => {\r\n    props.removeQuestion(props.index);\r\n  };\r\n\r\n  const onAddImage = (img) => {\r\n    console.log(\"Adding image\");\r\n    const newImages = [...images, img];\r\n    setImages(newImages);\r\n    props.update({ images: newImages });\r\n    // forceUpdate();\r\n  };\r\n\r\n  const onUpdateChoices = (choices) => {\r\n    setQuestion({ ...question, choices: choices });\r\n    props.update({ choices: choices });\r\n  };\r\n\r\n  const onUpdateMinLinearValue = (value) => {\r\n    setQuestion({ ...question, minValue: value });\r\n    props.update({ minValue: value });\r\n  };\r\n\r\n  const onUpdateMaxLinearValue = (value) => {\r\n    setQuestion({ ...question, maxValue: value });\r\n    props.update({ maxValue: value });\r\n  };\r\n\r\n  const onUpdateMinLinearLabel = (label) => {\r\n    setQuestion({ ...question, minValueLabel: label });\r\n    props.update({ minValueLabel: label });\r\n  };\r\n\r\n  const onUpdateMaxLinearLabel = (label) => {\r\n    setQuestion({ ...question, maxValueLabel: label });\r\n    props.update({ maxValueLabel: label });\r\n  };\r\n\r\n  const renderQuestion = () => {\r\n    switch (question.type) {\r\n      case questionTypes.MULTIPLE_CHOICE:\r\n        return (\r\n          <MultipleChoiceQuestion\r\n            update={onUpdateChoices}\r\n            choices={question.choices}\r\n          />\r\n        );\r\n      case questionTypes.LINEAR_SCALE:\r\n        const updateAll = (updates) => {\r\n          setTimeout(() => {\r\n            props.update(updates);\r\n          }, 1000);\r\n        };\r\n\r\n        /*props.update({\r\n          minValue: question.minValue,\r\n          maxValue: question.maxValue,\r\n          minValueLabel: question.minValueLabel,\r\n          maxValueLabel: question.maxValueLabel,\r\n        });*/\r\n        return (\r\n          <LinearScaleQuestion\r\n            minValue={question.minValue}\r\n            maxValue={question.maxValue}\r\n            minValueLabel={question.minValueLabel}\r\n            maxValueLabel={question.maxValueLabel}\r\n            updateMinValue={onUpdateMinLinearValue}\r\n            updateMaxValue={onUpdateMaxLinearValue}\r\n            updateMinValueLabel={onUpdateMinLinearLabel}\r\n            updateMaxValueLabel={onUpdateMaxLinearLabel}\r\n            updateAll={updateAll}\r\n          />\r\n        );\r\n      case questionTypes.RANKING:\r\n        return (\r\n          <MultipleChoiceQuestion\r\n            update={onUpdateChoices}\r\n            choices={question.choices}\r\n          />\r\n        );\r\n      default:\r\n        return <Fragment />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box width={800} className={classes.boxCardRoot}>\r\n      <Card className={classes.cardRoot} variant=\"outlined\">\r\n        <CardContent className={classes.cardContent}>\r\n          <Input\r\n            placeholder=\"Question title\"\r\n            inputProps={{ \"aria-label\": \"description\" }}\r\n            className={classes.questionTitle}\r\n            onChange={onChangeTitle}\r\n            value={question.title}\r\n          />\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={question.type}\r\n            renderValue={renderSelectValue}\r\n            className={classes.questionType}\r\n            onChange={onChangeType}\r\n          >\r\n            <MenuItem value={QuestionTypes.SHORT_TEXT}>\r\n              <ListItemIcon>\r\n                <ShortTextIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={QuestionTypes.SHORT_TEXT} />\r\n            </MenuItem>\r\n            <MenuItem value={QuestionTypes.PARAGRAPH}>\r\n              <ListItemIcon>\r\n                <SubjectIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={QuestionTypes.PARAGRAPH} />\r\n            </MenuItem>\r\n            <MenuItem value={QuestionTypes.MULTIPLE_CHOICE}>\r\n              <ListItemIcon>\r\n                <RadioButtonCheckedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={QuestionTypes.MULTIPLE_CHOICE} />\r\n            </MenuItem>\r\n            <MenuItem value={QuestionTypes.CHECKBOX}>\r\n              <ListItemIcon>\r\n                <CheckBoxIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={QuestionTypes.CHECKBOX} />\r\n            </MenuItem>\r\n            <MenuItem value={QuestionTypes.LINEAR_SCALE}>\r\n              <ListItemIcon>\r\n                <LinearScaleIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={QuestionTypes.LINEAR_SCALE} />\r\n            </MenuItem>\r\n            <MenuItem value={QuestionTypes.RANKING}>\r\n              <ListItemIcon>\r\n                <ImportExportIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={QuestionTypes.RANKING} />\r\n            </MenuItem>\r\n          </Select>\r\n          {renderDescription()}\r\n          {renderImages()}\r\n          {renderQuestion()}\r\n        </CardContent>\r\n        <Divider variant=\"middle\" />\r\n        <CardActions className={classes.cardActions}>\r\n          <div\r\n            id={\"left-side-actions\" + props.id + props.index}\r\n            className={classes.cardActionsLeft}\r\n          >\r\n            <Tooltip title=\"Move up\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.up();\r\n                }}\r\n              >\r\n                <ArrowUpward />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Move down\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.down();\r\n                }}\r\n              >\r\n                <ArrowDownward />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n          <div className={classes.cardActionsRight}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={mandatory}\r\n                  onChange={handleMandatory}\r\n                  name=\"checkedA\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Mandatory\"\r\n              labelPlacement=\"start\"\r\n            />\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              flexItem\r\n              className={classes.cardActionsDivider}\r\n            />\r\n            <Tooltip\r\n              title={(desc.descStatus ? \"Hide\" : \"Show\") + \" description\"}\r\n              placement=\"bottom\"\r\n            >\r\n              <IconButton\r\n                onClick={() => {\r\n                  onToggleDescription();\r\n                }}\r\n              >\r\n                <ShortTextIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Attach image\" placement=\"bottom\">\r\n              <ImageInputBtn changeImage={onAddImage} />\r\n            </Tooltip>\r\n            <Tooltip title=\"Delete question\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  onRemoveQuestion();\r\n                }}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        </CardActions>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewQuestion;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewImage.js",["190","191","192","193","194","195","196","197","198","199","200","201"],"import React, { useState, useRef, Fragment, useEffect } from \"react\";\r\n// Material\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  Divider,\r\n  Tooltip,\r\n  FormControlLabel,\r\n  Switch,\r\n  Button,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Select,\r\n} from \"@material-ui/core\";\r\n// Draggable\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n// Icons\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\n// Style\r\nimport { newImageStyle } from \"../../editorStyles\";\r\nimport QuestionTypes from \"../questionTypes\";\r\nimport ShortTextIcon from \"@material-ui/icons/ShortText\";\r\nimport SubjectIcon from \"@material-ui/icons/Subject\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\nimport RandomGallery from \"./RandomGallery\";\r\nimport content_type from \"../../contentTypes\";\r\nconst useStyles = newImageStyle;\r\n\r\nfunction NewImage(props) {\r\n  const classes = useStyles();\r\n  const fileInput = useRef(null);\r\n  const randomNumbersNames = props.randomNumbers;\r\n\r\n  const [title, setTitle] = useState(\r\n    props.data && props.data.title ? props.data.title : \"\"\r\n  );\r\n  const [img, setImg] = useState(\r\n    props.data && props.data.img ? props.data.img : undefined\r\n  );\r\n  const [randomize, setRandomize] = useState({\r\n    randomStatus:\r\n      props.data && props.data.randomStatus ? props.data.randomStatus : false,\r\n    randomName:\r\n      props.data && props.data.randomName ? props.data.randomName : \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"The random numbers in NewImage are: \", randomNumbersNames);\r\n  }, []);\r\n\r\n  const onRemoveContent = () => {\r\n    props.removeImage(props.index);\r\n  };\r\n\r\n  const onChangeTitle = (e) => {\r\n    setTitle(e.target.value);\r\n    props.update({ title: e.target.value });\r\n  };\r\n\r\n  const onClickSelectImg = () => {\r\n    fileInput.current.click();\r\n  };\r\n\r\n  const onChangeImage = (e) => {\r\n    const myImg = e.target.files[0];\r\n    setImg(myImg);\r\n    props.update({ img: myImg });\r\n  };\r\n\r\n  const onChangeRandomStatus = () => {\r\n    setRandomize({ ...randomize, randomStatus: !randomize.randomStatus });\r\n    props.update({ randomStatus: !randomize.randomStatus });\r\n  };\r\n\r\n  const onChangeRandomName = (e) => {\r\n    setRandomize({ ...randomize, randomName: e.target.value });\r\n    props.update({ randomName: e.target.value });\r\n  };\r\n\r\n  /* const checkImageType = () => {\r\n    if (props.url) {\r\n      return props.url;\r\n    } else if (props.image) {\r\n      return URL.createObjectURL(props.image);\r\n    } else {\r\n      console.log(props);\r\n      return props.url;\r\n    }\r\n  };*/\r\n\r\n  const renderRandomizeSelection = () => {\r\n    const checkValue = () => {\r\n      let check = false;\r\n      if (randomNumbersNames.length !== 0) {\r\n        randomNumbersNames.forEach((name) => {\r\n          if (randomize.randomName === name) check = true;\r\n        });\r\n      }\r\n      return check;\r\n    };\r\n\r\n    return (\r\n      <Fragment>\r\n        {randomNumbersNames.length !== 0 ? (\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={checkValue() === true ? randomize.randomName : \"\"}\r\n            className={classes.randomNameSelector}\r\n            onChange={onChangeRandomName}\r\n            defaultValue=\"\"\r\n          >\r\n            {randomNumbersNames.map((rn) => (\r\n              <MenuItem key={\"selectvalue\" + rn} value={rn}>\r\n                {rn}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        ) : null}\r\n        <RandomGallery randomType={content_type.IMAGE} />\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const renderDefaultImage = () => {\r\n    return (\r\n      <Fragment>\r\n        {img !== undefined ? (\r\n          <img\r\n            //src={checkImageType()}\r\n            src={URL.createObjectURL(img)}\r\n            alt={\"img\" + props.id}\r\n            className={classes.imgContent}\r\n          />\r\n        ) : (\r\n          <Fragment />\r\n        )}\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.selectAndChangeImgBtn}\r\n            onClick={() => {\r\n              onClickSelectImg();\r\n            }}\r\n          >\r\n            {img === undefined ? \"Select\" : \"Change\"} image\r\n          </Button>\r\n          <input\r\n            style={{\r\n              display: \"none\",\r\n              top: \"0px\",\r\n              right: \"0px\",\r\n            }}\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            ref={fileInput}\r\n            onChange={onChangeImage}\r\n            onClick={(event) => {\r\n              // Used to let the user select the same file if needed\r\n              event.target.value = null;\r\n            }}\r\n          />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box width={800} className={classes.boxCardRoot}>\r\n      <Card className={classes.cardRoot} variant=\"outlined\">\r\n        <CardContent className={classes.cardContent}>\r\n          <Input\r\n            placeholder={props.url ? \"Video title\" : \"Image title\"}\r\n            inputProps={{ \"aria-label\": \"description\" }}\r\n            className={classes.imageTitle}\r\n            value={title}\r\n            onChange={onChangeTitle}\r\n          />\r\n          {randomize.randomStatus\r\n            ? renderRandomizeSelection()\r\n            : renderDefaultImage()}\r\n        </CardContent>\r\n        <Divider variant=\"middle\" />\r\n        <CardActions className={classes.cardActions}>\r\n          <div\r\n            id={\"left-side-actions\" + props.index}\r\n            className={classes.cardActionsLeft}\r\n          >\r\n            <Tooltip title=\"Move up\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.up();\r\n                }}\r\n              >\r\n                <ArrowUpward />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Move down\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.down();\r\n                }}\r\n              >\r\n                <ArrowDownward />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n          <div className={classes.cardActionsRight}>\r\n            {props.randomNumbers.length !== 0 ? (\r\n              <Fragment>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={randomize.randomStatus}\r\n                      onChange={onChangeRandomStatus}\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label=\"Randomize\"\r\n                  labelPlacement=\"start\"\r\n                />\r\n                <Divider\r\n                  orientation=\"vertical\"\r\n                  flexItem\r\n                  className={classes.cardActionsDivider}\r\n                />\r\n              </Fragment>\r\n            ) : null}\r\n            <Tooltip title=\"Delete question\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  onRemoveContent();\r\n                }}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        </CardActions>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewImage;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewTextField.js",["202","203","204","205","206","207","208"],"import React, { Fragment, useState } from \"react\";\r\n// Material\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  Divider,\r\n  Tooltip,\r\n  FormControlLabel,\r\n  Switch,\r\n} from \"@material-ui/core\";\r\n// Draggable\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n// Icons\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n// Style\r\nimport { newTextFieldStyle } from \"../../editorStyles\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport ShortTextIcon from \"@material-ui/icons/ShortText\";\r\nimport ImageInputBtn from \"./ImageInputBtn\";\r\nconst useStyles = newTextFieldStyle;\r\n\r\nfunction NewTextField(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const onRemoveContent = () => {\r\n    props.removeTextField(props.index);\r\n  };\r\n\r\n  const onChangeTitle = (e) => {\r\n    setState({ ...state, title: e.target.value });\r\n    props.update({ title: e.target.value });\r\n  };\r\n\r\n  const onChangeDescription = (e) => {\r\n    setState({ ...state, description: e.target.value });\r\n    props.update({ description: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <Box width={800} className={classes.boxCardRoot}>\r\n      <Card className={classes.cardRoot} variant=\"outlined\">\r\n        <CardContent className={classes.cardContent}>\r\n          <Input\r\n            placeholder=\"Title\"\r\n            inputProps={{ \"aria-label\": \"title\" }}\r\n            className={classes.textTitle}\r\n            value={state.title}\r\n            onChange={onChangeTitle}\r\n          />\r\n          <Input\r\n            placeholder=\"Description\"\r\n            inputProps={{ \"aria-label\": \"description\" }}\r\n            className={classes.textDescription}\r\n            value={state.description}\r\n            onChange={onChangeDescription}\r\n          />\r\n        </CardContent>\r\n        <Divider variant=\"middle\" />\r\n        <CardActions className={classes.cardActions}>\r\n          <div\r\n            id={\"left-side-actions\" + props.index}\r\n            className={classes.cardActionsLeft}\r\n          >\r\n            <Tooltip title=\"Move up\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.up();\r\n                }}\r\n              >\r\n                <ArrowUpward />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Move down\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.down();\r\n                }}\r\n              >\r\n                <ArrowDownward />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n          <div className={classes.cardActionsRight}>\r\n            <Tooltip title=\"Delete question\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  onRemoveContent();\r\n                }}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        </CardActions>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewTextField;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\NewRandomNumber.js",["209","210"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Input,\r\n  Divider,\r\n  CardActions,\r\n  Tooltip,\r\n  IconButton,\r\n  InputLabel,\r\n  Select,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { newRandomNumberStyle } from \"../../editorStyles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nconst useStyles = newRandomNumberStyle;\r\n\r\nfunction NewRandomNumber(props) {\r\n  const [name, setName] = useState(\r\n    props.data && props.data.name ? props.data.name : \"\"\r\n  );\r\n  const [minRange, setMinRange] = useState(\r\n    props.data && props.data.minRange ? props.data.minRange : 0\r\n  );\r\n  const [maxRange, setMaxRange] = useState(\r\n    props.data && props.data.maxRange ? props.data.maxRange : 100\r\n  );\r\n\r\n  useEffect(() => {\r\n    props.update({ name, minRange, maxRange });\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  const onChangeName = (e) => {\r\n    setName(e.target.value);\r\n    props.update({ name: e.target.value });\r\n  };\r\n\r\n  const onChangeMinRange = (e) => {\r\n    setMinRange(e.target.value);\r\n    props.update({ minRange: e.target.value });\r\n  };\r\n\r\n  const onChangeMaxRange = (e) => {\r\n    setMaxRange(e.target.value);\r\n    props.update({ maxRange: e.target.value });\r\n  };\r\n\r\n  const onRemoveContent = () => {\r\n    props.removeRandomNumber(props.index);\r\n  };\r\n\r\n  return (\r\n    <Box width={800} className={classes.boxCardRoot}>\r\n      <Card className={classes.cardRoot} variant=\"outlined\">\r\n        <CardContent className={classes.cardContent}>\r\n          <Input\r\n            placeholder=\"Name for your random number\"\r\n            inputProps={{ \"aria-label\": \"description\" }}\r\n            className={classes.placeholderTitle}\r\n            value={name}\r\n            onChange={onChangeName}\r\n          />\r\n          <Typography variant=\"body1\" className={classes.rangeText}>\r\n            Insert the values for the random generation range\r\n          </Typography>\r\n          <FormControl className={classes.rangeInput}>\r\n            <InputLabel>Minimum range value</InputLabel>\r\n            <Input type=\"number\" value={minRange} onChange={onChangeMinRange} />\r\n          </FormControl>\r\n          <FormControl className={classes.rangeInput}>\r\n            <InputLabel>Maximum range value</InputLabel>\r\n            <Input type=\"number\" value={maxRange} onChange={onChangeMaxRange} />\r\n          </FormControl>\r\n        </CardContent>\r\n        <Divider variant=\"middle\" />\r\n        <CardActions className={classes.cardActions}>\r\n          <div\r\n            id={\"left-side-actions\" + props.index}\r\n            className={classes.cardActionsLeft}\r\n          >\r\n            <Tooltip title=\"Move up\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.up();\r\n                }}\r\n              >\r\n                <ArrowUpward />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Move down\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  props.move.down();\r\n                }}\r\n              >\r\n                <ArrowDownward />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n          <div className={classes.cardActionsRight}>\r\n            <Tooltip title=\"Delete question\" placement=\"bottom\">\r\n              <IconButton\r\n                onClick={() => {\r\n                  onRemoveContent();\r\n                }}\r\n              >\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        </CardActions>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewRandomNumber;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\PlaceholdersContext.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\contentTypes.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\surveys\\Survey.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\RandomGallery.js",["211","212"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport content_type from \"../../contentTypes\";\r\nimport { randomGalleryStyle } from \"../../editorStyles\";\r\nconst useStyles = randomGalleryStyle;\r\n\r\nfunction RandomGallery(props) {\r\n  const [content, setContent] = useState(undefined);\r\n  const [contentIndex, setContentIndex] = useState(0);\r\n  const [contentList, setContentList] = useState([]);\r\n  const randomType = props.randomType;\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (content === undefined) {\r\n      getFirstContent();\r\n    }\r\n  }, []);\r\n\r\n  const getFirstContent = () => {\r\n    // TODO generalize for any type of content\r\n    let imageList;\r\n    fetch(\"http://localhost:9000/getImageList\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setContentList(data);\r\n        imageList = data;\r\n      })\r\n      .then(() => {\r\n        let url = new URL(\"http://localhost:9000/getImage\");\r\n        url.search = new URLSearchParams({\r\n          imageName: imageList[\"Question Images\"][0],\r\n          folder: \"question\",\r\n        });\r\n        fetch(url)\r\n          .then((response) => response.blob())\r\n          .then((data) => setContent(data));\r\n      });\r\n  };\r\n\r\n  const getPreviousContent = () => {\r\n    let newIndex;\r\n    if (contentIndex !== 0) {\r\n      console.log(\"Content index is not zero\");\r\n      newIndex = contentIndex - 1;\r\n      setContentIndex(contentIndex - 1);\r\n    } else {\r\n      console.log(\"Content index is zero\");\r\n      newIndex = contentList[\"Question Images\"].length - 1;\r\n      setContentIndex(contentList[\"Question Images\"].length - 1);\r\n    }\r\n    console.log(\"The new index is\", newIndex);\r\n    console.log(\"The list is: \", contentList);\r\n    console.log(\r\n      \"The value at the list is :\",\r\n      contentList[\"Question Images\"][newIndex]\r\n    );\r\n    let url = new URL(\"http://localhost:9000/getImage\");\r\n    url.search = new URLSearchParams({\r\n      imageName: contentList[\"Question Images\"][newIndex],\r\n      folder: \"question\",\r\n    });\r\n    fetch(url)\r\n      .then((response) => response.blob())\r\n      .then((data) => setContent(data));\r\n  };\r\n\r\n  const getNextContent = () => {\r\n    let newIndex;\r\n    if (contentIndex !== contentList[\"Question Images\"].length - 1) {\r\n      newIndex = contentIndex + 1;\r\n      setContentIndex(contentIndex + 1);\r\n    } else {\r\n      newIndex = 0;\r\n      setContentIndex(0);\r\n    }\r\n    let url = new URL(\"http://localhost:9000/getImage\");\r\n    url.search = new URLSearchParams({\r\n      imageName: contentList[\"Question Images\"][newIndex],\r\n      folder: \"question\",\r\n    });\r\n    fetch(url)\r\n      .then((response) => response.blob())\r\n      .then((data) => setContent(data));\r\n  };\r\n\r\n  const renderRandomComponent = () => {\r\n    switch (randomType) {\r\n      case content_type.IMAGE: {\r\n        return content !== undefined ? (\r\n          <img\r\n            src={URL.createObjectURL(content)}\r\n            alt=\"Random image\"\r\n            className={classes.imgContent}\r\n          />\r\n        ) : (\r\n          <Fragment />\r\n        );\r\n      }\r\n      default: {\r\n        return <Fragment />;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"body1\">Overview of your random component</Typography>\r\n      {renderRandomComponent()}\r\n      <Button onClick={getPreviousContent}>Previous Content</Button>\r\n      <Button onClick={getNextContent}>Next Content</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomGallery;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\LinearScaleQuestion.js",["213"],"import React, { useEffect } from \"react\";\r\nimport { linearScaleQuestionStyle } from \"../../editorStyles\";\r\nimport {\r\n  Typography,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nconst useStyles = linearScaleQuestionStyle;\r\n\r\nfunction LinearScaleQuestion(props) {\r\n  const classes = useStyles();\r\n  let minValue = props.minValue;\r\n  let maxValue = props.maxValue;\r\n  let minValueLabel = props.minValueLabel;\r\n  let maxValueLabel = props.maxValueLabel;\r\n\r\n  /*useEffect(() => {\r\n    props.updateAll({ minValue, maxValue, minValueLabel, maxValueLabel });\r\n  }, []);*/\r\n\r\n  const onChangeMinValue = (e) => {\r\n    props.updateMinValue(e.target.value);\r\n  };\r\n\r\n  const onChangeMaxValue = (e) => {\r\n    props.updateMaxValue(e.target.value);\r\n  };\r\n\r\n  const onChangeMinValueLabel = (e) => {\r\n    props.updateMinValueLabel(e.target.value);\r\n  };\r\n\r\n  const onChangeMaxValueLabel = (e) => {\r\n    props.updateMaxValueLabel(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.fieldContainer}>\r\n      <Box component=\"div\" className={classes.rangeSelectContainer}>\r\n        <Typography variant=\"body1\" className={classes.rangeSelectItem}>\r\n          Da{\" \"}\r\n        </Typography>\r\n        <FormControl className={classes.rangeSelectItem}>\r\n          <Select value={minValue} onChange={onChangeMinValue}>\r\n            <MenuItem value={0}>0</MenuItem>\r\n            <MenuItem value={1}>1</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <Typography variant=\"body1\" className={classes.rangeSelectItem}>\r\n          {\" \"}\r\n          a{\" \"}\r\n        </Typography>\r\n        <FormControl className={classes.rangeSelectItem}>\r\n          <Select value={maxValue} onChange={onChangeMaxValue}>\r\n            <MenuItem value={2}>2</MenuItem>\r\n            <MenuItem value={3}>3</MenuItem>\r\n            <MenuItem value={4}>4</MenuItem>\r\n            <MenuItem value={5}>5</MenuItem>\r\n            <MenuItem value={6}>6</MenuItem>\r\n            <MenuItem value={7}>7</MenuItem>\r\n            <MenuItem value={8}>8</MenuItem>\r\n            <MenuItem value={9}>9</MenuItem>\r\n            <MenuItem value={10}>10</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      <Box component=\"div\">\r\n        <FormControl className={classes.labelChangeContainer}>\r\n          <TextField\r\n            label={\"Minimum value label\"}\r\n            value={minValueLabel}\r\n            className={classes.textField && classes.labelChangeItem}\r\n            onChange={onChangeMinValueLabel}\r\n          />\r\n          <TextField\r\n            label={\"Maximum value label\"}\r\n            value={maxValueLabel}\r\n            className={classes.textField && classes.labelChangeItem}\r\n            onChange={onChangeMaxValueLabel}\r\n          />\r\n        </FormControl>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LinearScaleQuestion;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\questionTypes.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\editor\\MultipleChoiceQuestion.js",["214"],"import React, { useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { multipleChoiceQuestionStyle } from \"../../editorStyles\";\r\nconst useStyles = multipleChoiceQuestionStyle;\r\n\r\nfunction MultipleChoiceQuestion(props) {\r\n  const classes = useStyles();\r\n  let choices = [...props.choices];\r\n\r\n  const onChangeValue = (e, index) => {\r\n    choices[index].value = e.target.value;\r\n    props.update(choices);\r\n  };\r\n\r\n  const onRemoveOption = (index) => {\r\n    choices = choices.filter((el, ix) => ix !== index);\r\n    props.update(choices);\r\n  };\r\n\r\n  const onAddOption = () => {\r\n    choices = [...choices, { id: choices.length + 1, value: \"\" }];\r\n    props.update(choices);\r\n  };\r\n\r\n  const renderOptions = () => {\r\n    return props.choices.map((choice, index) => {\r\n      return (\r\n        <div key={\"choice-\" + choice.id}>\r\n          <TextField\r\n            label={\"Option \" + (index + 1)}\r\n            value={choice.value}\r\n            className={classes.textField}\r\n            onChange={(e) => {\r\n              onChangeValue(e, index);\r\n            }}\r\n          />\r\n          {index !== 0 && index !== 1 ? (\r\n            <Button\r\n              color=\"#FF0000\"\r\n              className={classes.removeOptionBtn}\r\n              onClick={() => {\r\n                onRemoveOption(index);\r\n              }}\r\n            >\r\n              Remove option\r\n            </Button>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.fieldContainer}>\r\n      {renderOptions()}\r\n      <Button\r\n        color=\"primary\"\r\n        className={classes.addOptionBtn}\r\n        onClick={() => {\r\n          onAddOption();\r\n        }}\r\n      >\r\n        Add option\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultipleChoiceQuestion;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\Page.js",["215","216","217","218","219","220","221"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\nimport TextQuestion from \"./TextQuestion.js\";\r\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion.js\";\r\nimport RankingQuestion from \"./RankingQuestion.js\";\r\nimport LinearScaleQuestion from \"./LinearScaleQuestion.js\";\r\nimport TextField from \"./TextField\";\r\nimport Image from \"./Image.js\";\r\nimport CheckBoxQuestion from \"./CheckBoxQuestion\";\r\nconst useStyles = questionStyle;\r\n\r\nfunction Page(props) {\r\n  const classes = useStyles();\r\n\r\n  const newContentSorter = (item, i) => {\r\n    switch (item.data.type) {\r\n      case \"Multiple Choice\":\r\n        return (\r\n          <MultipleChoiceQuestion\r\n            data={item.data}\r\n            contentIndex={i}\r\n            sectionIndex={props.sectionIndex}\r\n          />\r\n        );\r\n      case \"Short Text\":\r\n        return (\r\n          <TextQuestion\r\n            data={item.data}\r\n            contentIndex={i}\r\n            sectionIndex={props.sectionIndex}\r\n          />\r\n        );\r\n      case \"CheckBox\":\r\n        return (\r\n          <CheckBoxQuestion\r\n            data={item.data}\r\n            contentIndex={i}\r\n            sectionIndex={props.sectionIndex}\r\n          />\r\n        );\r\n      case \"Linear Scale\":\r\n        return (\r\n          <LinearScaleQuestion\r\n            data={item.data}\r\n            contentIndex={i}\r\n            sectionIndex={props.sectionIndex}\r\n          />\r\n        );\r\n      case \"Ranking\":\r\n        return (\r\n          <RankingQuestion\r\n            data={item.data}\r\n            contentIndex={i}\r\n            sectionIndex={props.sectionIndex}\r\n          />\r\n        );\r\n    }\r\n    switch (item.type) {\r\n      case \"Image\":\r\n        return <Image data={item.data} />;\r\n      case \"Text\":\r\n        return <TextField data={item.data} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/*Mappa tutti i contenuti (contents:[] nel json) della pagina corrente e per ogni contenuto chiama il contentSorter*/}\r\n      {props.contents.map((s, i) => {\r\n        return <div key={s.contentId + i}>{newContentSorter(s, i)}</div>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\RandomNamesContext.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\Image.js",["222","223","224"],"import React, { useState, useEffect, useContext, useRef } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport { Box } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport RandomNamesContext from \"./RandomNamesContext\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\nfunction Image(props) {\r\n  const classes = useStyles();\r\n  const [image, setImage] = useState(\"\");\r\n  const randomNames = useContext(RandomNamesContext);\r\n\r\n  useEffect(() => {\r\n    let tempGeneratedNumber = undefined;\r\n    if (props.data.randomStatus) {\r\n      randomNames.forEach((r) => {\r\n        if (r.randomName === props.data.randomName) {\r\n          tempGeneratedNumber = r.generatedNumber;\r\n        }\r\n      });\r\n      if (tempGeneratedNumber === undefined) return;\r\n      let imgPath = new URL(\"http://localhost:9000/getRandomImage\");\r\n      imgPath.search = new URLSearchParams({\r\n        imageName: tempGeneratedNumber,\r\n        folder: \"question\",\r\n      });\r\n      fetch(imgPath)\r\n        .then((response) => response.blob())\r\n        .then((data) => {\r\n          console.log(\"BLOB: \", URL.createObjectURL(data));\r\n          setImage(URL.createObjectURL(data));\r\n        });\r\n    } else {\r\n      setImage(URL.createObjectURL(props.data.img));\r\n    }\r\n    //}\r\n  }, [randomNames]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            {props.data.title &&\r\n              <Box align=\"left\" className={classes.titleContainer}>\r\n                {props.data.title}\r\n              </Box>\r\n            }\r\n            <div className={classes.singleImageContainer}>\r\n              <img src={image} width=\"200px\" height=\"200px\" />\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\LinearScaleQuestion.js",["225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Menu,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport SelectedSurveyContext from \"../../SelectedSurveyContext\";\r\nimport TextQuestion from \"./TextQuestion.js\";\r\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion.js\";\r\nimport RankingQuestion from \"./RankingQuestion.js\";\r\nimport DataCollectorContext from \"./DataCollectorContext\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\nfunction LinearScaleQuestion(props) {\r\n  const classes = useStyles();\r\n  const [linearScaleSelectedValue, setLinearScaleSelectedValue] = useState(\"\");\r\n  \r\n  const [answer, setAnswer] = useState([]);\r\n  const updateAnswer = useContext(DataCollectorContext);\r\n\r\n  const saveAnswer = answer => (e) => {\r\n\r\n    console.log(\"LINEAR ANSW: \", answer)\r\n    setAnswer(answer);\r\n    updateAnswer(props.sectionIndex, props.contentIndex, answer);\r\n  }\r\n\r\n\r\n  /*---GESTIONE DELLA SELEZIONE NELLA LINEAR SCALE---*/\r\n  const handleLinearScaleChange = (e) => {\r\n    setLinearScaleSelectedValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n      <Grid>\r\n        <Paper\r\n          variant=\"outlined\"\r\n          width={400}\r\n          component=\"div\"\r\n          className={classes.wrapper}\r\n        >\r\n          <Box align=\"left\" className={classes.titleContainer}>\r\n            {props.data.title}\r\n          </Box>\r\n\r\n          <Box\r\n            align=\"left\"\r\n            fontWeight=\"fontWeightBold\"\r\n            className={classes.elementContainer}\r\n          >\r\n          </Box>\r\n          \r\n          <Box display=\"flex\" flexdirection=\"row\">\r\n            <Box className={classes.labelContainer}>\r\n              {props.data.minValueLabel}\r\n            </Box>\r\n\r\n            <FormControl component=\"fieldset\">\r\n              <RadioGroup\r\n                row\r\n                aria-label=\"gender\"\r\n                name=\"LinearScale\"\r\n                value={linearScaleSelectedValue}\r\n                onChange={handleLinearScaleChange}\r\n              >\r\n                {/*Creazione del range della LinearScale dati minValue e maxValue*/}\r\n                {\r\n                  //Number converte una stringa in un numero\r\n                  [\r\n                    ...Array(\r\n                      Number(props.data.maxValue) +\r\n                        1 -\r\n                        Number(props.data.minValue)\r\n                    ).keys(),\r\n                  ].map((s, i) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        value={Number(props.data.minValue) + i}\r\n                        control={\r\n                          <Radio\r\n                            onChange={saveAnswer(s + 1)}\r\n                            checked={\r\n                              linearScaleSelectedValue ===\r\n                              (Number(props.data.minValue) + i).toString()\r\n                            }\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label={Number(props.data.minValue) + i}\r\n                        labelPlacement=\"top\"\r\n                        key={s}\r\n                      />\r\n                    );\r\n                  })\r\n                }\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <Box className={classes.labelContainer}>\r\n              {props.data.maxValueLabel}\r\n            </Box>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default LinearScaleQuestion;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\RankingQuestion.js",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Menu,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport SelectedSurveyContext from \"../../SelectedSurveyContext\";\r\nimport TextQuestion from \"./TextQuestion.js\";\r\nimport MultipleChoiceQuestion from \"./MultipleChoiceQuestion.js\"\r\nimport DataCollectorContext from \"./DataCollectorContext\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\nfunction RankingQuestion(props){\r\n\r\n  const classes = useStyles();\r\n  const updateAnswer = useContext(DataCollectorContext);\r\n  const [choices, setChoices] = useState(props.data.choices);\r\n  \r\n  useEffect(() => {\r\n    // Sends the answers with their initial state\r\n    updateAnswer(props.sectionIndex, props.contentIndex, props.data.choices);\r\n    console.log(\"CHOICES: \", choices)\r\n  }, []);\r\n\r\n\r\n  return (\r\n      <Typography component={\"span\"}>\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <div>\r\n              <Box align=\"left\" className={classes.titleContainer}>\r\n                {props.data.title}\r\n              </Box>\r\n\r\n              <Box align=\"left\" className={classes.elementContainer}>\r\n                {props.data.description}\r\n              </Box>\r\n\r\n              <DragDropContext\r\n                \r\n                onDragEnd={(param) => {\r\n\r\n                  //Indici dei due elementi da scambiare\r\n                  const srcIndex = param.source.index;\r\n                  const destIndex = param.destination?.index;\r\n\r\n                  let newList = [...choices]; //Copia dell'array di scelte da ordinare\r\n                  const [reorderList] = newList.splice(\r\n                    srcIndex,\r\n                    1\r\n                  ); //si rimuove l'indice sorgente dal nuovo array\r\n                  newList.splice(destIndex, 0, reorderList); //si riaggiunge l'indice nell'array nella nuova posizione\r\n                  setChoices(newList);\r\n                  updateAnswer(props.sectionIndex, props.contentIndex, newList);\r\n                }}   \r\n              >\r\n                <Droppable droppableId=\"1\">\r\n                  {(provided, _) => (\r\n                    <div\r\n                      className={classes.rankingContainer}\r\n                      ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                    >\r\n                      {choices.map((item, i) => (\r\n                        <Draggable\r\n                          key={\"draggable-\" + item.id}\r\n                          index={i}\r\n                          draggableId={\"draggable-\" + item.id}\r\n                        >\r\n                          {(provided, snapshot) => (\r\n                            <Card\r\n                              className={classes.dragndropItem}\r\n                              ref={provided.innerRef}\r\n                              {...provided.dragHandleProps}\r\n                              {...provided.draggableProps}\r\n                            >\r\n                              <CardContent>\r\n                                <DragHandleIcon\r\n                                  className={classes.dragHandleIcon}\r\n                                />\r\n                                <div className={classes.rankingCardContent}>\r\n                                  {item.value}\r\n                                </div>\r\n                              </CardContent>\r\n                            </Card>\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </DragDropContext>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n}\r\n\r\nexport default RankingQuestion;","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\MultipleChoiceQuestion.js",["275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Menu,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport DataCollectorContext from \"./DataCollectorContext\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\n\r\n/*BUG: se in due domande diversele possibili risposte\r\ndei radio button sono uguali, allora quando si sceglie la risposta in una domanda, verrà in automatico\r\nselezionata anche nell'altra.*/\r\n\r\nfunction MultipleChoiceQuestion(props){\r\n\r\n\tconst classes = useStyles();\r\n  let tempAnswer = [];\r\n  const [answer, setAnswer] = useState([]);\r\n  const updateAnswer = useContext(DataCollectorContext);\r\n\r\n  //Salva la risposta data\r\n  const saveAnswer = answer => (e) => {\r\n\r\n    setAnswer(answer);\r\n    updateAnswer(props.sectionIndex, props.contentIndex, answer);\r\n  }\r\n\r\n\r\n\treturn (\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {props.data.title}\r\n            </Box>\r\n\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {props.data.description}\r\n            </Box>\r\n\r\n            {props.data.images &&\r\n            <Grid className={classes.grid} container spacing={3}>\r\n              <Grid item>\r\n                {/*Se l'array non è vuoto, allora lo scorre*/}\r\n                {props.data.images.map((img) => (\r\n                  <Paper\r\n                    variant=\"outlined\"\r\n                    className={classes.imagePaperContainer}\r\n                    key={props.data}\r\n                  >\r\n                    {/*loadImage(img) - NON STA PASSANDO LE IMMAGINI STATICHE*/}\r\n                    <img src={props.data.images} width=\"200px\" height=\"200px\" />\r\n                  </Paper>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n            }\r\n            <div className={classes.spacer}>\r\n              <RadioGroup name=\"RadioGroup\">\r\n                {props.data.choices.map((s) => (\r\n                  <Box align=\"left\" className={classes.choicesContainer} key={s.value}>\r\n                    <FormControlLabel\r\n                      value={s.value}\r\n                      control={<Radio color=\"primary\" onChange={saveAnswer(s.value)}/>}\r\n                      label={s.value}\r\n                    />\r\n                  </Box>\r\n                ))}\r\n              </RadioGroup>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n}\r\n\r\nexport default MultipleChoiceQuestion;","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\TextQuestion.js",["301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\n// Importing Material\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  IconButton,\r\n  Input,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Menu,\r\n  Select,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Droppable, Draggable, DragDropContext } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport SelectedSurveyContext from \"../../SelectedSurveyContext\";\r\nimport DataCollectorContext from \"./DataCollectorContext\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\nfunction TextQuestion(props){\r\n\r\n  const classes = useStyles();\r\n  const [answer, setAnswer] = useState([]);\r\n  const updateAnswer = useContext(DataCollectorContext);\r\n\r\n  const saveAnswer = (e) => {\r\n\r\n    setAnswer(e.target.value);\r\n    updateAnswer(props.sectionIndex, props.contentIndex, e.target.value);\r\n  }\r\n\r\n\r\n  return (\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {props.data.title}\r\n            </Box>\r\n            <Box align=\"left\" className={classes.elementContainer}>\r\n              {props.data.description}\r\n            </Box>\r\n\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                className={classes.textField}\r\n                id=\"standard-textarea\"\r\n                label=\"Type here your answer\"\r\n                placeholder=\"Placeholder\"\r\n                multiline\r\n                rowsMax={3}\r\n                onChange={saveAnswer}\r\n              />\r\n            </form>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    );\r\n}\r\n\r\nexport default TextQuestion;","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\TextField.js",["328","329"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { questionStyle } from \"../../viewStyles.js\";\r\nimport RandomNamesContext from \"./RandomNamesContext\";\r\nimport { Box, Typography, Grid, Paper } from \"@material-ui/core\";\r\n\r\nconst useStyles = questionStyle;\r\n\r\nfunction TextField(props) {\r\n  const classes = useStyles();\r\n  const [text, setText] = useState();\r\n  const randomNames = useContext(RandomNamesContext);\r\n\r\n  useEffect(() => {\r\n    let tempGeneratedNumber = undefined;\r\n    if (props.data.randomStatus) {\r\n      randomNames.forEach((r) => {\r\n        if (r.randomName === props.data.randomName) {\r\n          tempGeneratedNumber = r.generatedNumber;\r\n        }\r\n      });\r\n      if (tempGeneratedNumber === undefined) return;\r\n      let imgPath = new URL(\"http://localhost:9000/getRandomText\");\r\n      imgPath.search = new URLSearchParams({\r\n        textName: tempGeneratedNumber,\r\n      });\r\n      fetch(imgPath)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(\"The resulting text is \", data);\r\n          setText(data);\r\n        });\r\n    } else {\r\n      setText(props.data.description);\r\n    }\r\n  }, [randomNames]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography component={\"span\"} color=\"textPrimary\" align=\"center\">\r\n        <Grid>\r\n          <Paper\r\n            variant=\"outlined\"\r\n            width={400}\r\n            component=\"div\"\r\n            className={classes.wrapper}\r\n          >\r\n            <Box align=\"left\" className={classes.titleContainer}>\r\n              {props.data.title}\r\n            </Box>\r\n            {/* Create the class descriptionContainer (or change its name) into the style file */}\r\n            <Box align=\"left\" className={classes.descriptionContainer} className={classes.elementContainer}>\r\n              {text}\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextField;\r\n","C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\DataCollectorContext.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\AnswersSummary.js",[],"C:\\Users\\rikyv\\Desktop\\React\\materialusertests\\client\\src\\components\\view\\CheckBoxQuestion.js",["330","331"],{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","severity":1,"message":"337","line":18,"column":7,"nodeType":"338","messageId":"339","endLine":18,"endColumn":14},{"ruleId":"340","severity":1,"message":"341","line":93,"column":5,"nodeType":"342","messageId":"343","endLine":117,"endColumn":6},{"ruleId":"340","severity":1,"message":"341","line":122,"column":7,"nodeType":"342","messageId":"343","endLine":127,"endColumn":8},{"ruleId":"336","severity":1,"message":"344","line":30,"column":5,"nodeType":"338","messageId":"339","endLine":30,"endColumn":15},{"ruleId":"336","severity":1,"message":"345","line":32,"column":5,"nodeType":"338","messageId":"339","endLine":32,"endColumn":16},{"ruleId":"336","severity":1,"message":"346","line":20,"column":8,"nodeType":"338","messageId":"339","endLine":20,"endColumn":21},{"ruleId":"336","severity":1,"message":"347","line":23,"column":10,"nodeType":"338","messageId":"339","endLine":23,"endColumn":25},{"ruleId":"336","severity":1,"message":"348","line":23,"column":27,"nodeType":"338","messageId":"339","endLine":23,"endColumn":36},{"ruleId":"336","severity":1,"message":"349","line":27,"column":8,"nodeType":"338","messageId":"339","endLine":27,"endColumn":21},{"ruleId":"336","severity":1,"message":"350","line":36,"column":8,"nodeType":"338","messageId":"339","endLine":36,"endColumn":27},{"ruleId":"351","severity":1,"message":"352","line":87,"column":6,"nodeType":"353","endLine":87,"endColumn":8,"suggestions":"354"},{"ruleId":"336","severity":1,"message":"355","line":90,"column":9,"nodeType":"338","messageId":"339","endLine":90,"endColumn":18},{"ruleId":"336","severity":1,"message":"356","line":287,"column":13,"nodeType":"338","messageId":"339","endLine":287,"endColumn":35},{"ruleId":"357","severity":1,"message":"358","line":363,"column":53,"nodeType":"359","messageId":"360","endLine":363,"endColumn":55},{"ruleId":"361","severity":1,"message":"362","line":39,"column":24,"nodeType":"363","messageId":"364","endLine":39,"endColumn":26},{"ruleId":"361","severity":1,"message":"362","line":47,"column":24,"nodeType":"363","messageId":"364","endLine":47,"endColumn":26},{"ruleId":"336","severity":1,"message":"365","line":80,"column":9,"nodeType":"338","messageId":"339","endLine":80,"endColumn":19},{"ruleId":"351","severity":1,"message":"366","line":145,"column":6,"nodeType":"353","endLine":145,"endColumn":19,"suggestions":"367"},{"ruleId":"351","severity":1,"message":"368","line":195,"column":6,"nodeType":"353","endLine":195,"endColumn":8,"suggestions":"369"},{"ruleId":"340","severity":1,"message":"341","line":265,"column":3,"nodeType":"342","messageId":"343","endLine":271,"endColumn":4},{"ruleId":"336","severity":1,"message":"370","line":1,"column":10,"nodeType":"338","messageId":"339","endLine":1,"endColumn":26},{"ruleId":"336","severity":1,"message":"371","line":2,"column":10,"nodeType":"338","messageId":"339","endLine":2,"endColumn":13},{"ruleId":"336","severity":1,"message":"372","line":27,"column":8,"nodeType":"338","messageId":"339","endLine":27,"endColumn":22},{"ruleId":"336","severity":1,"message":"373","line":33,"column":10,"nodeType":"338","messageId":"339","endLine":33,"endColumn":19},{"ruleId":"336","severity":1,"message":"374","line":42,"column":7,"nodeType":"338","messageId":"339","endLine":42,"endColumn":18},{"ruleId":"351","severity":1,"message":"375","line":95,"column":6,"nodeType":"353","endLine":95,"endColumn":8,"suggestions":"376"},{"ruleId":"336","severity":1,"message":"377","line":16,"column":3,"nodeType":"338","messageId":"339","endLine":16,"endColumn":15},{"ruleId":"336","severity":1,"message":"378","line":17,"column":3,"nodeType":"338","messageId":"339","endLine":17,"endColumn":15},{"ruleId":"336","severity":1,"message":"373","line":21,"column":10,"nodeType":"338","messageId":"339","endLine":21,"endColumn":19},{"ruleId":"336","severity":1,"message":"372","line":23,"column":8,"nodeType":"338","messageId":"339","endLine":23,"endColumn":22},{"ruleId":"336","severity":1,"message":"379","line":29,"column":8,"nodeType":"338","messageId":"339","endLine":29,"endColumn":21},{"ruleId":"336","severity":1,"message":"380","line":30,"column":8,"nodeType":"338","messageId":"339","endLine":30,"endColumn":21},{"ruleId":"336","severity":1,"message":"381","line":31,"column":8,"nodeType":"338","messageId":"339","endLine":31,"endColumn":19},{"ruleId":"336","severity":1,"message":"382","line":32,"column":8,"nodeType":"338","messageId":"339","endLine":32,"endColumn":30},{"ruleId":"336","severity":1,"message":"383","line":33,"column":8,"nodeType":"338","messageId":"339","endLine":33,"endColumn":20},{"ruleId":"336","severity":1,"message":"384","line":34,"column":8,"nodeType":"338","messageId":"339","endLine":34,"endColumn":23},{"ruleId":"336","severity":1,"message":"385","line":35,"column":8,"nodeType":"338","messageId":"339","endLine":35,"endColumn":24},{"ruleId":"351","severity":1,"message":"386","line":60,"column":6,"nodeType":"353","endLine":60,"endColumn":8,"suggestions":"387"},{"ruleId":"336","severity":1,"message":"388","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":25},{"ruleId":"336","severity":1,"message":"389","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":19},{"ruleId":"336","severity":1,"message":"390","line":13,"column":3,"nodeType":"338","messageId":"339","endLine":13,"endColumn":9},{"ruleId":"336","severity":1,"message":"373","line":16,"column":10,"nodeType":"338","messageId":"339","endLine":16,"endColumn":19},{"ruleId":"336","severity":1,"message":"372","line":18,"column":8,"nodeType":"338","messageId":"339","endLine":18,"endColumn":22},{"ruleId":"336","severity":1,"message":"380","line":24,"column":8,"nodeType":"338","messageId":"339","endLine":24,"endColumn":21},{"ruleId":"336","severity":1,"message":"346","line":25,"column":8,"nodeType":"338","messageId":"339","endLine":25,"endColumn":21},{"ruleId":"336","severity":1,"message":"391","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":9},{"ruleId":"351","severity":1,"message":"392","line":36,"column":6,"nodeType":"353","endLine":36,"endColumn":8,"suggestions":"393"},{"ruleId":"351","severity":1,"message":"394","line":15,"column":6,"nodeType":"353","endLine":15,"endColumn":8,"suggestions":"395"},{"ruleId":"396","severity":1,"message":"397","line":88,"column":11,"nodeType":"398","endLine":88,"endColumn":72},{"ruleId":"336","severity":1,"message":"399","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":26},{"ruleId":"336","severity":1,"message":"400","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":25},{"ruleId":"336","severity":1,"message":"400","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":25},{"ruleId":"336","severity":1,"message":"399","line":1,"column":27,"nodeType":"338","messageId":"339","endLine":1,"endColumn":36},{"ruleId":"336","severity":1,"message":"401","line":1,"column":38,"nodeType":"338","messageId":"339","endLine":1,"endColumn":48},{"ruleId":"336","severity":1,"message":"402","line":6,"column":8,"nodeType":"338","messageId":"339","endLine":6,"endColumn":24},{"ruleId":"336","severity":1,"message":"403","line":13,"column":9,"nodeType":"338","messageId":"339","endLine":13,"endColumn":16},{"ruleId":"340","severity":1,"message":"341","line":16,"column":5,"nodeType":"342","messageId":"343","endLine":25,"endColumn":6},{"ruleId":"340","severity":1,"message":"341","line":26,"column":5,"nodeType":"342","messageId":"343","endLine":31,"endColumn":6},{"ruleId":"336","severity":1,"message":"404","line":1,"column":50,"nodeType":"338","messageId":"339","endLine":1,"endColumn":56},{"ruleId":"351","severity":1,"message":"405","line":41,"column":6,"nodeType":"353","endLine":41,"endColumn":19,"suggestions":"406"},{"ruleId":"407","severity":1,"message":"408","line":59,"column":15,"nodeType":"398","endLine":59,"endColumn":63},{"ruleId":"336","severity":1,"message":"399","line":1,"column":27,"nodeType":"338","messageId":"339","endLine":1,"endColumn":36},{"ruleId":"336","severity":1,"message":"409","line":6,"column":3,"nodeType":"338","messageId":"339","endLine":6,"endColumn":9},{"ruleId":"336","severity":1,"message":"410","line":7,"column":3,"nodeType":"338","messageId":"339","endLine":7,"endColumn":7},{"ruleId":"336","severity":1,"message":"411","line":8,"column":3,"nodeType":"338","messageId":"339","endLine":8,"endColumn":14},{"ruleId":"336","severity":1,"message":"412","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":14},{"ruleId":"336","severity":1,"message":"413","line":10,"column":3,"nodeType":"338","messageId":"339","endLine":10,"endColumn":13},{"ruleId":"336","severity":1,"message":"414","line":11,"column":3,"nodeType":"338","messageId":"339","endLine":11,"endColumn":8},{"ruleId":"336","severity":1,"message":"377","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":15},{"ruleId":"336","severity":1,"message":"378","line":13,"column":3,"nodeType":"338","messageId":"339","endLine":13,"endColumn":15},{"ruleId":"336","severity":1,"message":"415","line":14,"column":3,"nodeType":"338","messageId":"339","endLine":14,"endColumn":11},{"ruleId":"336","severity":1,"message":"416","line":15,"column":3,"nodeType":"338","messageId":"339","endLine":15,"endColumn":7},{"ruleId":"336","severity":1,"message":"391","line":16,"column":3,"nodeType":"338","messageId":"339","endLine":16,"endColumn":9},{"ruleId":"336","severity":1,"message":"417","line":17,"column":3,"nodeType":"338","messageId":"339","endLine":17,"endColumn":10},{"ruleId":"336","severity":1,"message":"390","line":19,"column":3,"nodeType":"338","messageId":"339","endLine":19,"endColumn":9},{"ruleId":"336","severity":1,"message":"418","line":20,"column":3,"nodeType":"338","messageId":"339","endLine":20,"endColumn":10},{"ruleId":"336","severity":1,"message":"419","line":22,"column":8,"nodeType":"338","messageId":"339","endLine":22,"endColumn":17},{"ruleId":"336","severity":1,"message":"420","line":29,"column":8,"nodeType":"338","messageId":"339","endLine":29,"endColumn":17},{"ruleId":"336","severity":1,"message":"421","line":30,"column":8,"nodeType":"338","messageId":"339","endLine":30,"endColumn":17},{"ruleId":"336","severity":1,"message":"348","line":31,"column":10,"nodeType":"338","messageId":"339","endLine":31,"endColumn":19},{"ruleId":"336","severity":1,"message":"373","line":31,"column":21,"nodeType":"338","messageId":"339","endLine":31,"endColumn":30},{"ruleId":"336","severity":1,"message":"347","line":31,"column":32,"nodeType":"338","messageId":"339","endLine":31,"endColumn":47},{"ruleId":"336","severity":1,"message":"372","line":32,"column":8,"nodeType":"338","messageId":"339","endLine":32,"endColumn":22},{"ruleId":"336","severity":1,"message":"422","line":33,"column":8,"nodeType":"338","messageId":"339","endLine":33,"endColumn":29},{"ruleId":"336","severity":1,"message":"423","line":34,"column":8,"nodeType":"338","messageId":"339","endLine":34,"endColumn":20},{"ruleId":"336","severity":1,"message":"424","line":35,"column":8,"nodeType":"338","messageId":"339","endLine":35,"endColumn":30},{"ruleId":"336","severity":1,"message":"425","line":36,"column":8,"nodeType":"338","messageId":"339","endLine":36,"endColumn":23},{"ruleId":"336","severity":1,"message":"426","line":45,"column":10,"nodeType":"338","messageId":"339","endLine":45,"endColumn":16},{"ruleId":"336","severity":1,"message":"409","line":6,"column":3,"nodeType":"338","messageId":"339","endLine":6,"endColumn":9},{"ruleId":"336","severity":1,"message":"411","line":8,"column":3,"nodeType":"338","messageId":"339","endLine":8,"endColumn":14},{"ruleId":"336","severity":1,"message":"413","line":10,"column":3,"nodeType":"338","messageId":"339","endLine":10,"endColumn":13},{"ruleId":"336","severity":1,"message":"414","line":11,"column":3,"nodeType":"338","messageId":"339","endLine":11,"endColumn":8},{"ruleId":"336","severity":1,"message":"377","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":15},{"ruleId":"336","severity":1,"message":"378","line":13,"column":3,"nodeType":"338","messageId":"339","endLine":13,"endColumn":15},{"ruleId":"336","severity":1,"message":"415","line":14,"column":3,"nodeType":"338","messageId":"339","endLine":14,"endColumn":11},{"ruleId":"336","severity":1,"message":"416","line":15,"column":3,"nodeType":"338","messageId":"339","endLine":15,"endColumn":7},{"ruleId":"336","severity":1,"message":"391","line":16,"column":3,"nodeType":"338","messageId":"339","endLine":16,"endColumn":9},{"ruleId":"336","severity":1,"message":"417","line":17,"column":3,"nodeType":"338","messageId":"339","endLine":17,"endColumn":10},{"ruleId":"336","severity":1,"message":"389","line":18,"column":3,"nodeType":"338","messageId":"339","endLine":18,"endColumn":19},{"ruleId":"336","severity":1,"message":"390","line":19,"column":3,"nodeType":"338","messageId":"339","endLine":19,"endColumn":9},{"ruleId":"336","severity":1,"message":"418","line":20,"column":3,"nodeType":"338","messageId":"339","endLine":20,"endColumn":10},{"ruleId":"336","severity":1,"message":"419","line":22,"column":8,"nodeType":"338","messageId":"339","endLine":22,"endColumn":17},{"ruleId":"336","severity":1,"message":"427","line":26,"column":8,"nodeType":"338","messageId":"339","endLine":26,"endColumn":13},{"ruleId":"336","severity":1,"message":"428","line":27,"column":8,"nodeType":"338","messageId":"339","endLine":27,"endColumn":18},{"ruleId":"336","severity":1,"message":"429","line":28,"column":8,"nodeType":"338","messageId":"339","endLine":28,"endColumn":19},{"ruleId":"336","severity":1,"message":"420","line":29,"column":8,"nodeType":"338","messageId":"339","endLine":29,"endColumn":17},{"ruleId":"336","severity":1,"message":"421","line":30,"column":8,"nodeType":"338","messageId":"339","endLine":30,"endColumn":17},{"ruleId":"336","severity":1,"message":"422","line":33,"column":8,"nodeType":"338","messageId":"339","endLine":33,"endColumn":29},{"ruleId":"336","severity":1,"message":"423","line":34,"column":8,"nodeType":"338","messageId":"339","endLine":34,"endColumn":20},{"ruleId":"336","severity":1,"message":"424","line":35,"column":8,"nodeType":"338","messageId":"339","endLine":35,"endColumn":30},{"ruleId":"351","severity":1,"message":"430","line":50,"column":6,"nodeType":"353","endLine":50,"endColumn":8,"suggestions":"431"},{"ruleId":"336","severity":1,"message":"399","line":1,"column":27,"nodeType":"338","messageId":"339","endLine":1,"endColumn":36},{"ruleId":"336","severity":1,"message":"409","line":6,"column":3,"nodeType":"338","messageId":"339","endLine":6,"endColumn":9},{"ruleId":"336","severity":1,"message":"410","line":7,"column":3,"nodeType":"338","messageId":"339","endLine":7,"endColumn":7},{"ruleId":"336","severity":1,"message":"411","line":8,"column":3,"nodeType":"338","messageId":"339","endLine":8,"endColumn":14},{"ruleId":"336","severity":1,"message":"412","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":14},{"ruleId":"336","severity":1,"message":"413","line":10,"column":3,"nodeType":"338","messageId":"339","endLine":10,"endColumn":13},{"ruleId":"336","severity":1,"message":"414","line":11,"column":3,"nodeType":"338","messageId":"339","endLine":11,"endColumn":8},{"ruleId":"336","severity":1,"message":"377","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":15},{"ruleId":"336","severity":1,"message":"378","line":13,"column":3,"nodeType":"338","messageId":"339","endLine":13,"endColumn":15},{"ruleId":"336","severity":1,"message":"415","line":14,"column":3,"nodeType":"338","messageId":"339","endLine":14,"endColumn":11},{"ruleId":"336","severity":1,"message":"416","line":15,"column":3,"nodeType":"338","messageId":"339","endLine":15,"endColumn":7},{"ruleId":"336","severity":1,"message":"391","line":16,"column":3,"nodeType":"338","messageId":"339","endLine":16,"endColumn":9},{"ruleId":"336","severity":1,"message":"417","line":17,"column":3,"nodeType":"338","messageId":"339","endLine":17,"endColumn":10},{"ruleId":"336","severity":1,"message":"390","line":19,"column":3,"nodeType":"338","messageId":"339","endLine":19,"endColumn":9},{"ruleId":"336","severity":1,"message":"418","line":20,"column":3,"nodeType":"338","messageId":"339","endLine":20,"endColumn":10},{"ruleId":"336","severity":1,"message":"419","line":22,"column":8,"nodeType":"338","messageId":"339","endLine":22,"endColumn":17},{"ruleId":"336","severity":1,"message":"429","line":28,"column":8,"nodeType":"338","messageId":"339","endLine":28,"endColumn":19},{"ruleId":"336","severity":1,"message":"420","line":29,"column":8,"nodeType":"338","messageId":"339","endLine":29,"endColumn":17},{"ruleId":"336","severity":1,"message":"421","line":30,"column":8,"nodeType":"338","messageId":"339","endLine":30,"endColumn":17},{"ruleId":"336","severity":1,"message":"348","line":31,"column":10,"nodeType":"338","messageId":"339","endLine":31,"endColumn":19},{"ruleId":"336","severity":1,"message":"373","line":31,"column":21,"nodeType":"338","messageId":"339","endLine":31,"endColumn":30},{"ruleId":"336","severity":1,"message":"347","line":31,"column":32,"nodeType":"338","messageId":"339","endLine":31,"endColumn":47},{"ruleId":"336","severity":1,"message":"372","line":32,"column":8,"nodeType":"338","messageId":"339","endLine":32,"endColumn":22},{"ruleId":"336","severity":1,"message":"432","line":45,"column":7,"nodeType":"338","messageId":"339","endLine":45,"endColumn":17},{"ruleId":"336","severity":1,"message":"426","line":46,"column":10,"nodeType":"338","messageId":"339","endLine":46,"endColumn":16},{"ruleId":"407","severity":1,"message":"408","line":85,"column":21,"nodeType":"398","endLine":85,"endColumn":81},{"ruleId":"336","severity":1,"message":"399","line":1,"column":27,"nodeType":"338","messageId":"339","endLine":1,"endColumn":36},{"ruleId":"336","severity":1,"message":"409","line":6,"column":3,"nodeType":"338","messageId":"339","endLine":6,"endColumn":9},{"ruleId":"336","severity":1,"message":"410","line":7,"column":3,"nodeType":"338","messageId":"339","endLine":7,"endColumn":7},{"ruleId":"336","severity":1,"message":"411","line":8,"column":3,"nodeType":"338","messageId":"339","endLine":8,"endColumn":14},{"ruleId":"336","severity":1,"message":"412","line":9,"column":3,"nodeType":"338","messageId":"339","endLine":9,"endColumn":14},{"ruleId":"336","severity":1,"message":"413","line":10,"column":3,"nodeType":"338","messageId":"339","endLine":10,"endColumn":13},{"ruleId":"336","severity":1,"message":"414","line":11,"column":3,"nodeType":"338","messageId":"339","endLine":11,"endColumn":8},{"ruleId":"336","severity":1,"message":"377","line":12,"column":3,"nodeType":"338","messageId":"339","endLine":12,"endColumn":15},{"ruleId":"336","severity":1,"message":"378","line":13,"column":3,"nodeType":"338","messageId":"339","endLine":13,"endColumn":15},{"ruleId":"336","severity":1,"message":"415","line":14,"column":3,"nodeType":"338","messageId":"339","endLine":14,"endColumn":11},{"ruleId":"336","severity":1,"message":"416","line":15,"column":3,"nodeType":"338","messageId":"339","endLine":15,"endColumn":7},{"ruleId":"336","severity":1,"message":"391","line":16,"column":3,"nodeType":"338","messageId":"339","endLine":16,"endColumn":9},{"ruleId":"336","severity":1,"message":"417","line":17,"column":3,"nodeType":"338","messageId":"339","endLine":17,"endColumn":10},{"ruleId":"336","severity":1,"message":"389","line":18,"column":3,"nodeType":"338","messageId":"339","endLine":18,"endColumn":19},{"ruleId":"336","severity":1,"message":"390","line":19,"column":3,"nodeType":"338","messageId":"339","endLine":19,"endColumn":9},{"ruleId":"336","severity":1,"message":"418","line":20,"column":3,"nodeType":"338","messageId":"339","endLine":20,"endColumn":10},{"ruleId":"336","severity":1,"message":"419","line":22,"column":8,"nodeType":"338","messageId":"339","endLine":22,"endColumn":17},{"ruleId":"336","severity":1,"message":"427","line":26,"column":8,"nodeType":"338","messageId":"339","endLine":26,"endColumn":13},{"ruleId":"336","severity":1,"message":"428","line":27,"column":8,"nodeType":"338","messageId":"339","endLine":27,"endColumn":18},{"ruleId":"336","severity":1,"message":"429","line":28,"column":8,"nodeType":"338","messageId":"339","endLine":28,"endColumn":19},{"ruleId":"336","severity":1,"message":"420","line":29,"column":8,"nodeType":"338","messageId":"339","endLine":29,"endColumn":17},{"ruleId":"336","severity":1,"message":"348","line":31,"column":10,"nodeType":"338","messageId":"339","endLine":31,"endColumn":19},{"ruleId":"336","severity":1,"message":"373","line":31,"column":21,"nodeType":"338","messageId":"339","endLine":31,"endColumn":30},{"ruleId":"336","severity":1,"message":"347","line":31,"column":32,"nodeType":"338","messageId":"339","endLine":31,"endColumn":47},{"ruleId":"336","severity":1,"message":"372","line":32,"column":8,"nodeType":"338","messageId":"339","endLine":32,"endColumn":22},{"ruleId":"336","severity":1,"message":"422","line":33,"column":8,"nodeType":"338","messageId":"339","endLine":33,"endColumn":29},{"ruleId":"336","severity":1,"message":"426","line":41,"column":10,"nodeType":"338","messageId":"339","endLine":41,"endColumn":16},{"ruleId":"351","severity":1,"message":"433","line":35,"column":6,"nodeType":"353","endLine":35,"endColumn":19,"suggestions":"434"},{"ruleId":"435","severity":1,"message":"436","line":51,"column":72,"nodeType":"437","endLine":51,"endColumn":108},{"ruleId":"351","severity":1,"message":"438","line":56,"column":6,"nodeType":"353","endLine":56,"endColumn":8,"suggestions":"439"},{"ruleId":"407","severity":1,"message":"408","line":86,"column":21,"nodeType":"398","endLine":86,"endColumn":81},"no-native-reassign",["440"],"no-negated-in-lhs",["441"],"no-unused-vars","'surveyz' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'secondPage' is assigned a value but never used.","'otherSurvey' is assigned a value but never used.","'ImageInputBtn' is defined but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'VideoCallIcon' is defined but never used.","'PlaceholdersContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getMaxContentId', 'props.json', and 'updateRandomNumbers'. Either include them or remove the dependency array.","ArrayExpression",["442"],"'onDragEnd' is assigned a value but never used.","'onOpenEmbedVideoDialog' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'saveSurvey' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'jsonData.pages'. Either include it or remove the dependency array.",["443"],"React Hook useEffect has missing dependencies: 'jsonData.id' and 'jsonData.pages'. Either include them or remove the dependency array.",["444"],"'BottomNavigation' is defined but never used.","'red' is defined but never used.","'DragHandleIcon' is defined but never used.","'Draggable' is defined but never used.","'initialData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'mandatory', 'question.title', 'question.type', and 'updateQuestion'. Either include them or remove the dependency array.",["445"],"'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'QuestionTypes' is defined but never used.","'ShortTextIcon' is defined but never used.","'SubjectIcon' is defined but never used.","'RadioButtonCheckedIcon' is defined but never used.","'CheckBoxIcon' is defined but never used.","'LinearScaleIcon' is defined but never used.","'ImportExportIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'randomNumbersNames'. Either include it or remove the dependency array.",["446"],"'Fragment' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'Select' is defined but never used.","React Hook useEffect has missing dependencies: 'maxRange', 'minRange', 'name', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["447"],"React Hook useEffect has a missing dependency: 'content'. Either include it or remove the dependency array.",["448"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'CheckBoxQuestion' is defined but never used.","'classes' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'props.data.img', 'props.data.randomName', and 'props.data.randomStatus'. Either include them or remove the dependency array. If 'setImage' needs the current value of 'props.data.img', you can also switch to useReducer instead of useState and read 'props.data.img' in the reducer.",["449"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Button' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'IconButton' is defined but never used.","'Input' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","'Divider' is defined but never used.","'Tooltip' is defined but never used.","'Container' is defined but never used.","'FormLabel' is defined but never used.","'TextField' is defined but never used.","'SelectedSurveyContext' is defined but never used.","'TextQuestion' is defined but never used.","'MultipleChoiceQuestion' is defined but never used.","'RankingQuestion' is defined but never used.","'answer' is assigned a value but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'choices', 'props.contentIndex', 'props.data.choices', 'props.sectionIndex', and 'updateAnswer'. Either include them or remove the dependency array.",["450"],"'tempAnswer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.data.description', 'props.data.randomName', and 'props.data.randomStatus'. Either include them or remove the dependency array. If 'setText' needs the current value of 'props.data.description', you can also switch to useReducer instead of useState and read 'props.data.description' in the reducer.",["451"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'calculateArray', 'props.contentIndex', 'props.data.choices', 'props.sectionIndex', and 'updateAnswer'. Either include them or remove the dependency array.",["452"],"no-global-assign","no-unsafe-negation",{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},"Update the dependencies array to be: [getMaxContentId, props.json, updateRandomNumbers]",{"range":"475","text":"476"},"Update the dependencies array to be: [jsonData.pages, randomNames]",{"range":"477","text":"478"},"Update the dependencies array to be: [jsonData.id, jsonData.pages]",{"range":"479","text":"480"},"Update the dependencies array to be: [mandatory, question.title, question.type, updateQuestion]",{"range":"481","text":"482"},"Update the dependencies array to be: [randomNumbersNames]",{"range":"483","text":"484"},"Update the dependencies array to be: [maxRange, minRange, name, props]",{"range":"485","text":"486"},"Update the dependencies array to be: [content]",{"range":"487","text":"488"},"Update the dependencies array to be: [props.data.img, props.data.randomName, props.data.randomStatus, randomNames]",{"range":"489","text":"490"},"Update the dependencies array to be: [choices, props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",{"range":"491","text":"492"},"Update the dependencies array to be: [props.data.description, props.data.randomName, props.data.randomStatus, randomNames]",{"range":"493","text":"494"},"Update the dependencies array to be: [calculateArray, props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",{"range":"495","text":"496"},[2638,2640],"[getMaxContentId, props.json, updateRandomNumbers]",[5623,5636],"[jsonData.pages, randomNames]",[7261,7263],"[jsonData.id, jsonData.pages]",[2973,2975],"[mandatory, question.title, question.type, updateQuestion]",[1955,1957],"[randomNumbersNames]",[1016,1018],"[maxRange, minRange, name, props]",[503,505],"[content]",[1410,1423],"[props.data.img, props.data.randomName, props.data.randomStatus, randomNames]",[1661,1663],"[choices, props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]",[1177,1190],"[props.data.description, props.data.randomName, props.data.randomStatus, randomNames]",[1878,1880],"[calculateArray, props.contentIndex, props.data.choices, props.sectionIndex, updateAnswer]"]